
stm32f4-eth-uart-communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005790  08005790  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005798  08005798  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005798  08005798  00015798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080057a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000009c  0800583c  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  0800583c  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b282  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f0b  00000000  00000000  0002b34e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ae0  00000000  00000000  0002d260  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e8  00000000  00000000  0002dd40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002104c  00000000  00000000  0002e728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ac1  00000000  00000000  0004f774  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7792  00000000  00000000  00058235  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f9c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003054  00000000  00000000  0011fa44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005440 	.word	0x08005440

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08005440 	.word	0x08005440

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <param_Connection>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void param_Connection() {
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	b09f      	sub	sp, #124	; 0x7c
 8000584:	af0e      	add	r7, sp, #56	; 0x38
    UART_Printf("\r\ninit () llamado!\r\n");
 8000586:	4861      	ldr	r0, [pc, #388]	; (800070c <param_Connection+0x18c>)
 8000588:	f000 fb32 	bl	8000bf0 <UART_Printf>

    UART_Printf("Registro de devoluciones de llamada del W5500...\r\n");
 800058c:	4860      	ldr	r0, [pc, #384]	; (8000710 <param_Connection+0x190>)
 800058e:	f000 fb2f 	bl	8000bf0 <UART_Printf>
    reg_wizchip_cs_cbfunc(select_CS, unselect_CS);
 8000592:	4960      	ldr	r1, [pc, #384]	; (8000714 <param_Connection+0x194>)
 8000594:	4860      	ldr	r0, [pc, #384]	; (8000718 <param_Connection+0x198>)
 8000596:	f004 f945 	bl	8004824 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(read_Byte, write_Byte);
 800059a:	4960      	ldr	r1, [pc, #384]	; (800071c <param_Connection+0x19c>)
 800059c:	4860      	ldr	r0, [pc, #384]	; (8000720 <param_Connection+0x1a0>)
 800059e:	f004 f965 	bl	800486c <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(read_Buff, write_Buff);
 80005a2:	4960      	ldr	r1, [pc, #384]	; (8000724 <param_Connection+0x1a4>)
 80005a4:	4860      	ldr	r0, [pc, #384]	; (8000728 <param_Connection+0x1a8>)
 80005a6:	f004 f98d 	bl	80048c4 <reg_wizchip_spiburst_cbfunc>

    UART_Printf("Iniciando funcion wizchip_init ()\r\n");
 80005aa:	4860      	ldr	r0, [pc, #384]	; (800072c <param_Connection+0x1ac>)
 80005ac:	f000 fb20 	bl	8000bf0 <UART_Printf>
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80005b0:	4a5f      	ldr	r2, [pc, #380]	; (8000730 <param_Connection+0x1b0>)
 80005b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ba:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80005be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80005c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c6:	4611      	mov	r1, r2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f004 f9f3 	bl	80049b4 <wizchip_init>

    wiz_NetInfo net_info = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]
 80005de:	f8c3 2013 	str.w	r2, [r3, #19]
 80005e2:	2308      	movs	r3, #8
 80005e4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80005e8:	23dc      	movs	r3, #220	; 0xdc
 80005ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80005ee:	23ab      	movs	r3, #171	; 0xab
 80005f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80005f4:	23cd      	movs	r3, #205	; 0xcd
 80005f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005fa:	23ef      	movs	r3, #239	; 0xef
 80005fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000600:	23c0      	movs	r3, #192	; 0xc0
 8000602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000606:	23a8      	movs	r3, #168	; 0xa8
 8000608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800060c:	2314      	movs	r3, #20
 800060e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000612:	23ff      	movs	r3, #255	; 0xff
 8000614:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8000618:	23ff      	movs	r3, #255	; 0xff
 800061a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800061e:	23ff      	movs	r3, #255	; 0xff
 8000620:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000624:	23c0      	movs	r3, #192	; 0xc0
 8000626:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800062a:	23a8      	movs	r3, #168	; 0xa8
 800062c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000630:	2301      	movs	r3, #1
 8000632:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000636:	2308      	movs	r3, #8
 8000638:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800063c:	2308      	movs	r3, #8
 800063e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000642:	2308      	movs	r3, #8
 8000644:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000648:	2308      	movs	r3, #8
 800064a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                             .sn 	= {255, 255, 255, 0},					// Subnet mask
                             .gw 	= {192, 168, 0, 1},					// Gateway address
    						 .dns 	= {8, 8, 8, 8}};					// DNS


     UART_Printf("Iniciando funcion wizchip_setnetinfo ()\r\n");
 800064e:	4839      	ldr	r0, [pc, #228]	; (8000734 <param_Connection+0x1b4>)
 8000650:	f000 face 	bl	8000bf0 <UART_Printf>
     wizchip_setnetinfo(&net_info);
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f004 fa37 	bl	8004acc <wizchip_setnetinfo>
     wizchip_getnetinfo(&net_info);
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4618      	mov	r0, r3
 8000664:	f004 fa72 	bl	8004b4c <wizchip_getnetinfo>

    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
            net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8000668:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800066c:	469c      	mov	ip, r3
            net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800066e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8000672:	469e      	mov	lr, r3
            net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8000674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8000678:	4618      	mov	r0, r3
            net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800067a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800067e:	461c      	mov	r4, r3
            net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8000680:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8000684:	461d      	mov	r5, r3
            net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8000686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800068a:	461e      	mov	r6, r3
            net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800068c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8000690:	61fb      	str	r3, [r7, #28]
            net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8000692:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8000696:	61bb      	str	r3, [r7, #24]
            net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 8000698:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800069c:	617b      	str	r3, [r7, #20]
            net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 800069e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006a2:	613b      	str	r3, [r7, #16]
            net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80006a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006a8:	60fb      	str	r3, [r7, #12]
            net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80006aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006ae:	60bb      	str	r3, [r7, #8]
    		net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 80006b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006b4:	607b      	str	r3, [r7, #4]
    		net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 80006b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006ba:	4619      	mov	r1, r3
    		net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 80006bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006c0:	461a      	mov	r2, r3
    		net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]);
 80006c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    sprintf(buffer, "IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006c6:	930d      	str	r3, [sp, #52]	; 0x34
 80006c8:	920c      	str	r2, [sp, #48]	; 0x30
 80006ca:	910b      	str	r1, [sp, #44]	; 0x2c
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	920a      	str	r2, [sp, #40]	; 0x28
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	9209      	str	r2, [sp, #36]	; 0x24
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	9208      	str	r2, [sp, #32]
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	9207      	str	r2, [sp, #28]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	9206      	str	r2, [sp, #24]
 80006e0:	69ba      	ldr	r2, [r7, #24]
 80006e2:	9205      	str	r2, [sp, #20]
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	9304      	str	r3, [sp, #16]
 80006e8:	9603      	str	r6, [sp, #12]
 80006ea:	9502      	str	r5, [sp, #8]
 80006ec:	9401      	str	r4, [sp, #4]
 80006ee:	9000      	str	r0, [sp, #0]
 80006f0:	4673      	mov	r3, lr
 80006f2:	4662      	mov	r2, ip
 80006f4:	4910      	ldr	r1, [pc, #64]	; (8000738 <param_Connection+0x1b8>)
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <param_Connection+0x1bc>)
 80006f8:	f004 fb5e 	bl	8004db8 <siprintf>
    UART_Printf(buffer);
 80006fc:	480f      	ldr	r0, [pc, #60]	; (800073c <param_Connection+0x1bc>)
 80006fe:	f000 fa77 	bl	8000bf0 <UART_Printf>
}
 8000702:	bf00      	nop
 8000704:	3744      	adds	r7, #68	; 0x44
 8000706:	46bd      	mov	sp, r7
 8000708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070a:	bf00      	nop
 800070c:	08005458 	.word	0x08005458
 8000710:	08005470 	.word	0x08005470
 8000714:	08000c35 	.word	0x08000c35
 8000718:	08000c1d 	.word	0x08000c1d
 800071c:	08000cb7 	.word	0x08000cb7
 8000720:	08000c9d 	.word	0x08000c9d
 8000724:	08000c75 	.word	0x08000c75
 8000728:	08000c4d 	.word	0x08000c4d
 800072c:	080054a4 	.word	0x080054a4
 8000730:	08005540 	.word	0x08005540
 8000734:	080054c8 	.word	0x080054c8
 8000738:	080054f4 	.word	0x080054f4
 800073c:	200000fc 	.word	0x200000fc

08000740 <conectar_Socket_UDP>:

void conectar_Socket_UDP(uint8_t socketNum, uint16_t portLocal){
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b08d      	sub	sp, #52	; 0x34
 8000744:	af04      	add	r7, sp, #16
 8000746:	4603      	mov	r3, r0
 8000748:	460a      	mov	r2, r1
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	80bb      	strh	r3, [r7, #4]
 /*Abra el socket 0 como TCP_SOCKET con el   puerto 5000*/
	if((retVal = socket(socketNum, Sn_MR_UDP, portLocal, 0)) == 0){
 8000750:	88ba      	ldrh	r2, [r7, #4]
 8000752:	79f8      	ldrb	r0, [r7, #7]
 8000754:	2300      	movs	r3, #0
 8000756:	2102      	movs	r1, #2
 8000758:	f003 fb5a 	bl	8003e10 <socket>
 800075c:	4603      	mov	r3, r0
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b5e      	ldr	r3, [pc, #376]	; (80008dc <conectar_Socket_UDP+0x19c>)
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	4b5d      	ldr	r3, [pc, #372]	; (80008dc <conectar_Socket_UDP+0x19c>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	f040 80b3 	bne.w	80008d4 <conectar_Socket_UDP+0x194>
		uint8_t ipDestination[4];
		uint16_t portDestination;
		uint16_t len;
		uint8_t sockInterrupt;
		uint32_t revDatagram;
		okReceptionUart = 1;
 800076e:	4b5c      	ldr	r3, [pc, #368]	; (80008e0 <conectar_Socket_UDP+0x1a0>)
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
		while(1){
			/*Comprobamos si el estatus del socket esta en UPD*/
			if((sockStatus = getSn_SR(socketNum)) == SOCK_UDP) {
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	3301      	adds	r3, #1
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000780:	4618      	mov	r0, r3
 8000782:	f003 f855 	bl	8003830 <WIZCHIP_READ>
 8000786:	4603      	mov	r3, r0
 8000788:	461a      	mov	r2, r3
 800078a:	4b56      	ldr	r3, [pc, #344]	; (80008e4 <conectar_Socket_UDP+0x1a4>)
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	4b55      	ldr	r3, [pc, #340]	; (80008e4 <conectar_Socket_UDP+0x1a4>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b22      	cmp	r3, #34	; 0x22
 8000794:	f040 8095 	bne.w	80008c2 <conectar_Socket_UDP+0x182>
				/*Comprueba el servicio de interrupcion y verifica si existen datos entrantes*/
				if((sockInterrupt=getSn_IR(socketNum)) == Sn_IR_RECV){//verifica si llego datos verificar con o  Sn_IR values en w5500.h
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	3301      	adds	r3, #1
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 f843 	bl	8003830 <WIZCHIP_READ>
 80007aa:	4603      	mov	r3, r0
 80007ac:	f003 031f 	and.w	r3, r3, #31
 80007b0:	76fb      	strb	r3, [r7, #27]
 80007b2:	7efb      	ldrb	r3, [r7, #27]
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	d14c      	bne.n	8000852 <conectar_Socket_UDP+0x112>
					setSn_IR(socketNum, Sn_IR_RECV); /*Set el servicio de interruciones con la recepcion de datos*/
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	3301      	adds	r3, #1
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80007c4:	2104      	movs	r1, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 f87e 	bl	80038c8 <WIZCHIP_WRITE>
					/*Verificamos la longitud de buffer recibido*/
					if((len=getSn_RX_RSR(socketNum)) > 0){
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 f9d3 	bl	8003b7a <getSn_RX_RSR>
 80007d4:	4603      	mov	r3, r0
 80007d6:	833b      	strh	r3, [r7, #24]
 80007d8:	8b3b      	ldrh	r3, [r7, #24]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d039      	beq.n	8000852 <conectar_Socket_UDP+0x112>
						/*Recibimos los datos*/
						if((revDatagram=recvfrom(socketNum, recepcionSocket, len, ipDestination, &portDestination)) > 0){
 80007de:	f107 0110 	add.w	r1, r7, #16
 80007e2:	8b3a      	ldrh	r2, [r7, #24]
 80007e4:	79f8      	ldrb	r0, [r7, #7]
 80007e6:	f107 030e 	add.w	r3, r7, #14
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	460b      	mov	r3, r1
 80007ee:	493e      	ldr	r1, [pc, #248]	; (80008e8 <conectar_Socket_UDP+0x1a8>)
 80007f0:	f003 fdc8 	bl	8004384 <recvfrom>
 80007f4:	4603      	mov	r3, r0
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d021      	beq.n	8000842 <conectar_Socket_UDP+0x102>
							sprintf(buffer, "Dato recibido: * %s * de la IP Remota: %d.%d.%d.%d: %d\r\n",
									recepcionSocket,
									ipDestination[0], ipDestination[1], ipDestination[2], ipDestination[3], portDestination);
 80007fe:	7c3b      	ldrb	r3, [r7, #16]
							sprintf(buffer, "Dato recibido: * %s * de la IP Remota: %d.%d.%d.%d: %d\r\n",
 8000800:	461c      	mov	r4, r3
									ipDestination[0], ipDestination[1], ipDestination[2], ipDestination[3], portDestination);
 8000802:	7c7b      	ldrb	r3, [r7, #17]
 8000804:	7cba      	ldrb	r2, [r7, #18]
 8000806:	7cf9      	ldrb	r1, [r7, #19]
							sprintf(buffer, "Dato recibido: * %s * de la IP Remota: %d.%d.%d.%d: %d\r\n",
 8000808:	89f8      	ldrh	r0, [r7, #14]
 800080a:	9003      	str	r0, [sp, #12]
 800080c:	9102      	str	r1, [sp, #8]
 800080e:	9201      	str	r2, [sp, #4]
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	4623      	mov	r3, r4
 8000814:	4a34      	ldr	r2, [pc, #208]	; (80008e8 <conectar_Socket_UDP+0x1a8>)
 8000816:	4935      	ldr	r1, [pc, #212]	; (80008ec <conectar_Socket_UDP+0x1ac>)
 8000818:	4835      	ldr	r0, [pc, #212]	; (80008f0 <conectar_Socket_UDP+0x1b0>)
 800081a:	f004 facd 	bl	8004db8 <siprintf>
							UART_Printf(buffer);
 800081e:	4834      	ldr	r0, [pc, #208]	; (80008f0 <conectar_Socket_UDP+0x1b0>)
 8000820:	f000 f9e6 	bl	8000bf0 <UART_Printf>
							for( int i = 0; i < sizeof(recepcionSocket);  ++i )
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
 8000828:	e007      	b.n	800083a <conectar_Socket_UDP+0xfa>
								recepcionSocket[i] = (char)0;
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <conectar_Socket_UDP+0x1a8>)
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	4413      	add	r3, r2
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
							for( int i = 0; i < sizeof(recepcionSocket);  ++i )
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	3301      	adds	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	2b0f      	cmp	r3, #15
 800083e:	d9f4      	bls.n	800082a <conectar_Socket_UDP+0xea>
 8000840:	e007      	b.n	8000852 <conectar_Socket_UDP+0x112>
						}else {
							sprintf(buffer, "Algo salio mal; Receive datagram : %ld\r\n", revDatagram);
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	492b      	ldr	r1, [pc, #172]	; (80008f4 <conectar_Socket_UDP+0x1b4>)
 8000846:	482a      	ldr	r0, [pc, #168]	; (80008f0 <conectar_Socket_UDP+0x1b0>)
 8000848:	f004 fab6 	bl	8004db8 <siprintf>
							UART_Printf(buffer);
 800084c:	4828      	ldr	r0, [pc, #160]	; (80008f0 <conectar_Socket_UDP+0x1b0>)
 800084e:	f000 f9cf 	bl	8000bf0 <UART_Printf>
						}
					}
				}
                /*Compruebo si exiten datos recibidos por UART (Interrupcion)*/
				if (!okReceptionUart) {
 8000852:	4b23      	ldr	r3, [pc, #140]	; (80008e0 <conectar_Socket_UDP+0x1a0>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d137      	bne.n	80008ca <conectar_Socket_UDP+0x18a>
					okReceptionUart = 1;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <conectar_Socket_UDP+0x1a0>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
					/*Enviamos datos enviados de Uart por socket UDP*/
					retVal = sendto(socketNum, recepcionUart, sizeof(recepcionUart), ipDestination, portDestination);
 8000860:	89fb      	ldrh	r3, [r7, #14]
 8000862:	f107 0210 	add.w	r2, r7, #16
 8000866:	79f8      	ldrb	r0, [r7, #7]
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	4613      	mov	r3, r2
 800086c:	2210      	movs	r2, #16
 800086e:	4922      	ldr	r1, [pc, #136]	; (80008f8 <conectar_Socket_UDP+0x1b8>)
 8000870:	f003 fc52 	bl	8004118 <sendto>
 8000874:	4603      	mov	r3, r0
 8000876:	b2da      	uxtb	r2, r3
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <conectar_Socket_UDP+0x19c>)
 800087a:	701a      	strb	r2, [r3, #0]
					/*Verificamos envio correcto*/
					if (retVal == (int16_t) sizeof(recepcionUart)){
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <conectar_Socket_UDP+0x19c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b10      	cmp	r3, #16
 8000882:	d113      	bne.n	80008ac <conectar_Socket_UDP+0x16c>
						sprintf(buffer, "Mensaje Enviando a la IP Remota: %d.%d.%d.%d: %d\r\n",
								ipDestination[0], ipDestination[1], ipDestination[2], ipDestination[3], portDestination);
 8000884:	7c3b      	ldrb	r3, [r7, #16]
						sprintf(buffer, "Mensaje Enviando a la IP Remota: %d.%d.%d.%d: %d\r\n",
 8000886:	4618      	mov	r0, r3
								ipDestination[0], ipDestination[1], ipDestination[2], ipDestination[3], portDestination);
 8000888:	7c7b      	ldrb	r3, [r7, #17]
						sprintf(buffer, "Mensaje Enviando a la IP Remota: %d.%d.%d.%d: %d\r\n",
 800088a:	461c      	mov	r4, r3
								ipDestination[0], ipDestination[1], ipDestination[2], ipDestination[3], portDestination);
 800088c:	7cbb      	ldrb	r3, [r7, #18]
 800088e:	7cfa      	ldrb	r2, [r7, #19]
						sprintf(buffer, "Mensaje Enviando a la IP Remota: %d.%d.%d.%d: %d\r\n",
 8000890:	89f9      	ldrh	r1, [r7, #14]
 8000892:	9102      	str	r1, [sp, #8]
 8000894:	9201      	str	r2, [sp, #4]
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	4623      	mov	r3, r4
 800089a:	4602      	mov	r2, r0
 800089c:	4917      	ldr	r1, [pc, #92]	; (80008fc <conectar_Socket_UDP+0x1bc>)
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <conectar_Socket_UDP+0x1b0>)
 80008a0:	f004 fa8a 	bl	8004db8 <siprintf>
						UART_Printf(buffer);
 80008a4:	4812      	ldr	r0, [pc, #72]	; (80008f0 <conectar_Socket_UDP+0x1b0>)
 80008a6:	f000 f9a3 	bl	8000bf0 <UART_Printf>
 80008aa:	e00e      	b.n	80008ca <conectar_Socket_UDP+0x18a>
					}else{
						sprintf(buffer, "Algo salio mal; Return Value: %d\r\n", retVal);
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <conectar_Socket_UDP+0x19c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	461a      	mov	r2, r3
 80008b2:	4913      	ldr	r1, [pc, #76]	; (8000900 <conectar_Socket_UDP+0x1c0>)
 80008b4:	480e      	ldr	r0, [pc, #56]	; (80008f0 <conectar_Socket_UDP+0x1b0>)
 80008b6:	f004 fa7f 	bl	8004db8 <siprintf>
						UART_Printf(buffer);
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <conectar_Socket_UDP+0x1b0>)
 80008bc:	f000 f998 	bl	8000bf0 <UART_Printf>
 80008c0:	e003      	b.n	80008ca <conectar_Socket_UDP+0x18a>
					}
				}
			}else if(sockStatus == SOCK_CLOSED) break;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <conectar_Socket_UDP+0x1a4>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d003      	beq.n	80008d2 <conectar_Socket_UDP+0x192>
			HAL_Delay(100);
 80008ca:	2064      	movs	r0, #100	; 0x64
 80008cc:	f000 fbde 	bl	800108c <HAL_Delay>
			if((sockStatus = getSn_SR(socketNum)) == SOCK_UDP) {
 80008d0:	e750      	b.n	8000774 <conectar_Socket_UDP+0x34>
			}else if(sockStatus == SOCK_CLOSED) break;
 80008d2:	bf00      	nop
		}
	}
}
 80008d4:	bf00      	nop
 80008d6:	3724      	adds	r7, #36	; 0x24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	200000e8 	.word	0x200000e8
 80008e0:	20000000 	.word	0x20000000
 80008e4:	200002a8 	.word	0x200002a8
 80008e8:	20000298 	.word	0x20000298
 80008ec:	08005548 	.word	0x08005548
 80008f0:	200000fc 	.word	0x200000fc
 80008f4:	08005584 	.word	0x08005584
 80008f8:	200000ec 	.word	0x200000ec
 80008fc:	080055b0 	.word	0x080055b0
 8000900:	080055e4 	.word	0x080055e4

08000904 <HAL_UART_RxCpltCallback>:
	disconnect(socketNum);
	close(socketNum);

}

void HAL_UART_RxCpltCallback ( UART_HandleTypeDef *huart ){
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a0a      	ldr	r2, [pc, #40]	; (800093c <HAL_UART_RxCpltCallback+0x38>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d109      	bne.n	800092a <HAL_UART_RxCpltCallback+0x26>
		okReceptionUart = HAL_UART_Receive_IT(&huart2, recepcionUart, RX_UART_BUFFER_RECEPTION);
 8000916:	220f      	movs	r2, #15
 8000918:	4909      	ldr	r1, [pc, #36]	; (8000940 <HAL_UART_RxCpltCallback+0x3c>)
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <HAL_UART_RxCpltCallback+0x40>)
 800091c:	f002 f936 	bl	8002b8c <HAL_UART_Receive_IT>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <HAL_UART_RxCpltCallback+0x44>)
 8000926:	701a      	strb	r2, [r3, #0]
	else
		HAL_UART_Receive_IT(&huart2, recepcionUart, RX_UART_BUFFER_RECEPTION);
}
 8000928:	e004      	b.n	8000934 <HAL_UART_RxCpltCallback+0x30>
		HAL_UART_Receive_IT(&huart2, recepcionUart, RX_UART_BUFFER_RECEPTION);
 800092a:	220f      	movs	r2, #15
 800092c:	4904      	ldr	r1, [pc, #16]	; (8000940 <HAL_UART_RxCpltCallback+0x3c>)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <HAL_UART_RxCpltCallback+0x40>)
 8000930:	f002 f92c 	bl	8002b8c <HAL_UART_Receive_IT>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40004400 	.word	0x40004400
 8000940:	200000ec 	.word	0x200000ec
 8000944:	20000258 	.word	0x20000258
 8000948:	20000000 	.word	0x20000000

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fb2a 	bl	8000fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000954:	f000 f818 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000958:	f000 f8d4 	bl	8000b04 <MX_GPIO_Init>
  MX_SPI1_Init();
 800095c:	f000 f872 	bl	8000a44 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000960:	f000 f8a6 	bl	8000ab0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, recepcionUart, RX_UART_BUFFER_RECEPTION);
 8000964:	220f      	movs	r2, #15
 8000966:	4906      	ldr	r1, [pc, #24]	; (8000980 <main+0x34>)
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <main+0x38>)
 800096a:	f002 f90f 	bl	8002b8c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  param_Connection();
 800096e:	f7ff fe07 	bl	8000580 <param_Connection>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  reconectar_Socket();
//	  conectar_Socket_TCP(SOCKET_NUMBER, PORT_NUMBER);
	  conectar_Socket_UDP(SOCKET_NUMBER, PORT_NUMBER);
 8000972:	f241 3188 	movw	r1, #5000	; 0x1388
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fee2 	bl	8000740 <conectar_Socket_UDP>
 800097c:	e7f9      	b.n	8000972 <main+0x26>
 800097e:	bf00      	nop
 8000980:	200000ec 	.word	0x200000ec
 8000984:	20000258 	.word	0x20000258

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2230      	movs	r2, #48	; 0x30
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f004 f94d 	bl	8004c36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <SystemClock_Config+0xb4>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <SystemClock_Config+0xb4>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <SystemClock_Config+0xb4>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <SystemClock_Config+0xb8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a1b      	ldr	r2, [pc, #108]	; (8000a40 <SystemClock_Config+0xb8>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <SystemClock_Config+0xb8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e4:	2302      	movs	r3, #2
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e8:	2301      	movs	r3, #1
 80009ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ec:	2310      	movs	r3, #16
 80009ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fe51 	bl	80016a0 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000a04:	f000 f965 	bl	8000cd2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 f8ac 	bl	8001b80 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a2e:	f000 f950 	bl	8000cd2 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a4a:	4a18      	ldr	r2, [pc, #96]	; (8000aac <MX_SPI1_Init+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a90:	220a      	movs	r2, #10
 8000a92:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <MX_SPI1_Init+0x64>)
 8000a96:	f001 fa3f 	bl	8001f18 <HAL_SPI_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000aa0:	f000 f917 	bl	8000cd2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000200 	.word	0x20000200
 8000aac:	40013000 	.word	0x40013000

08000ab0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_USART2_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000abc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ac0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f001 ff6a 	bl	80029c0 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f8ee 	bl	8000cd2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000258 	.word	0x20000258
 8000b00:	40004400 	.word	0x40004400

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a30      	ldr	r2, [pc, #192]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b24:	f043 0310 	orr.w	r3, r3, #16
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b2e      	ldr	r3, [pc, #184]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0310 	and.w	r3, r3, #16
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b2a      	ldr	r3, [pc, #168]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0308 	and.w	r3, r3, #8
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a1b      	ldr	r2, [pc, #108]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <MX_GPIO_Init+0xe0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	4816      	ldr	r0, [pc, #88]	; (8000be8 <MX_GPIO_Init+0xe4>)
 8000b90:	f000 fd6c 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b9a:	4814      	ldr	r0, [pc, #80]	; (8000bec <MX_GPIO_Init+0xe8>)
 8000b9c:	f000 fd66 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <MX_GPIO_Init+0xe4>)
 8000bb8:	f000 fbbe 	bl	8001338 <HAL_GPIO_Init>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_GPIO_Init+0xe8>)
 8000bd6:	f000 fbaf 	bl	8001338 <HAL_GPIO_Init>

}
 8000bda:	bf00      	nop
 8000bdc:	3728      	adds	r7, #40	; 0x28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40020c00 	.word	0x40020c00

08000bf0 <UART_Printf>:
//      va_start(args, fmt);
//      vsnprintf(buff, sizeof(buff), fmt, args);
//      HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
//      va_end(args);
//}
  void UART_Printf(const char* fmt){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
      HAL_UART_Transmit(&huart2, (uint8_t*)fmt, strlen(fmt), HAL_MAX_DELAY);
 8000bf8:	6878      	ldr	r0, [r7, #4]
 8000bfa:	f7ff fae9 	bl	80001d0 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <UART_Printf+0x28>)
 8000c0a:	f001 ff26 	bl	8002a5a <HAL_UART_Transmit>
  }
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000258 	.word	0x20000258

08000c1c <select_CS>:

  void select_CS(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
      HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2120      	movs	r1, #32
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <select_CS+0x14>)
 8000c26:	f000 fd21 	bl	800166c <HAL_GPIO_WritePin>
  }
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40021000 	.word	0x40021000

08000c34 <unselect_CS>:

  void unselect_CS(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
      HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <unselect_CS+0x14>)
 8000c3e:	f000 fd15 	bl	800166c <HAL_GPIO_WritePin>
  }
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <read_Buff>:

  void read_Buff( uint8_t* buff, uint16_t len) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
      HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8000c58:	887a      	ldrh	r2, [r7, #2]
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <read_Buff+0x24>)
 8000c62:	f001 faf1 	bl	8002248 <HAL_SPI_Receive>
  }
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000200 	.word	0x20000200

08000c74 <write_Buff>:

  void write_Buff(uint8_t* buff, uint16_t len) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	807b      	strh	r3, [r7, #2]
      HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8000c80:	887a      	ldrh	r2, [r7, #2]
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	6879      	ldr	r1, [r7, #4]
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <write_Buff+0x24>)
 8000c8a:	f001 f9a9 	bl	8001fe0 <HAL_SPI_Transmit>
  }
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000200 	.word	0x20000200

08000c9c <read_Byte>:

  uint8_t read_Byte(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
      uint8_t byte;
      read_Buff(&byte, sizeof(byte));
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ffd0 	bl	8000c4c <read_Buff>
      return byte;
 8000cac:	79fb      	ldrb	r3, [r7, #7]
  }
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <write_Byte>:

  void write_Byte(uint8_t byte) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	71fb      	strb	r3, [r7, #7]
      write_Buff(&byte, sizeof(byte));
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ffd5 	bl	8000c74 <write_Buff>
  }
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	; (8000db4 <HAL_SPI_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12b      	bne.n	8000daa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d8a:	2338      	movs	r3, #56	; 0x38
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <HAL_SPI_MspInit+0x8c>)
 8000da6:	f000 fac7 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40013000 	.word	0x40013000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_UART_MspInit+0x94>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d133      	bne.n	8000e4a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	4a1b      	ldr	r2, [pc, #108]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	6413      	str	r3, [r2, #64]	; 0x40
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a14      	ldr	r2, [pc, #80]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_UART_MspInit+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <HAL_UART_MspInit+0x9c>)
 8000e36:	f000 fa7f 	bl	8001338 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2026      	movs	r0, #38	; 0x26
 8000e40:	f000 fa21 	bl	8001286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e44:	2026      	movs	r0, #38	; 0x26
 8000e46:	f000 fa3a 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40004400 	.word	0x40004400
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f8ca 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <USART2_IRQHandler+0x10>)
 8000ec2:	f001 feb9 	bl	8002c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000258 	.word	0x20000258

08000ed0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <_sbrk+0x50>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x16>
		heap_end = &end;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <_sbrk+0x50>)
 8000ee2:	4a10      	ldr	r2, [pc, #64]	; (8000f24 <_sbrk+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <_sbrk+0x50>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <_sbrk+0x50>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	466a      	mov	r2, sp
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d907      	bls.n	8000f0a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000efa:	f003 fe67 	bl	8004bcc <__errno>
 8000efe:	4602      	mov	r2, r0
 8000f00:	230c      	movs	r3, #12
 8000f02:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	e006      	b.n	8000f18 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <_sbrk+0x50>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a03      	ldr	r2, [pc, #12]	; (8000f20 <_sbrk+0x50>)
 8000f14:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200000b8 	.word	0x200000b8
 8000f24:	200002b8 	.word	0x200002b8

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <SystemInit+0x28>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <SystemInit+0x28>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SystemInit+0x28>)
 8000f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f42:	609a      	str	r2, [r3, #8]
#endif
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f5a:	e003      	b.n	8000f64 <LoopCopyDataInit>

08000f5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f62:	3104      	adds	r1, #4

08000f64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f6c:	d3f6      	bcc.n	8000f5c <CopyDataInit>
  ldr  r2, =_sbss
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f70:	e002      	b.n	8000f78 <LoopFillZerobss>

08000f72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f74:	f842 3b04 	str.w	r3, [r2], #4

08000f78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f7c:	d3f9      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7e:	f7ff ffd3 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f82:	f003 fe29 	bl	8004bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f86:	f7ff fce1 	bl	800094c <main>
  bx  lr    
 8000f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f90:	080057a0 	.word	0x080057a0
  ldr  r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f98:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8000f9c:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8000fa0:	200002b4 	.word	0x200002b4

08000fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa4:	e7fe      	b.n	8000fa4 <ADC_IRQHandler>
	...

08000fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <HAL_Init+0x40>)
 8000fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x40>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_Init+0x40>)
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x40>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x40>)
 8000fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f94d 	bl	8001270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fe80 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f965 	bl	80012da <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f92d 	bl	8001286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000004 	.word	0x20000004
 8001044:	2000000c 	.word	0x2000000c
 8001048:	20000008 	.word	0x20000008

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	2000000c 	.word	0x2000000c
 8001070:	200002ac 	.word	0x200002ac

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200002ac 	.word	0x200002ac

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_Delay+0x40>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000000c 	.word	0x2000000c

080010d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ec:	4013      	ands	r3, r2
 80010ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001102:	4a04      	ldr	r2, [pc, #16]	; (8001114 <__NVIC_SetPriorityGrouping+0x44>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	60d3      	str	r3, [r2, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <__NVIC_GetPriorityGrouping+0x18>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	f003 0307 	and.w	r3, r3, #7
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0b      	blt.n	800115e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	f003 021f 	and.w	r2, r3, #31
 800114c:	4907      	ldr	r1, [pc, #28]	; (800116c <__NVIC_EnableIRQ+0x38>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	2001      	movs	r0, #1
 8001156:	fa00 f202 	lsl.w	r2, r0, r2
 800115a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800115e:	bf00      	nop
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	2b00      	cmp	r3, #0
 8001182:	db0a      	blt.n	800119a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <__NVIC_SetPriority+0x4c>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	0112      	lsls	r2, r2, #4
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	440b      	add	r3, r1
 8001194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001198:	e00a      	b.n	80011b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4908      	ldr	r1, [pc, #32]	; (80011c0 <__NVIC_SetPriority+0x50>)
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	3b04      	subs	r3, #4
 80011a8:	0112      	lsls	r2, r2, #4
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	440b      	add	r3, r1
 80011ae:	761a      	strb	r2, [r3, #24]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f1c3 0307 	rsb	r3, r3, #7
 80011de:	2b04      	cmp	r3, #4
 80011e0:	bf28      	it	cs
 80011e2:	2304      	movcs	r3, #4
 80011e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3304      	adds	r3, #4
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d902      	bls.n	80011f4 <NVIC_EncodePriority+0x30>
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3b03      	subs	r3, #3
 80011f2:	e000      	b.n	80011f6 <NVIC_EncodePriority+0x32>
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43da      	mvns	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	401a      	ands	r2, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800120c:	f04f 31ff 	mov.w	r1, #4294967295
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa01 f303 	lsl.w	r3, r1, r3
 8001216:	43d9      	mvns	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	4313      	orrs	r3, r2
         );
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	; 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
	...

0800122c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800123c:	d301      	bcc.n	8001242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2301      	movs	r3, #1
 8001240:	e00f      	b.n	8001262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001242:	4a0a      	ldr	r2, [pc, #40]	; (800126c <SysTick_Config+0x40>)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3b01      	subs	r3, #1
 8001248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124a:	210f      	movs	r1, #15
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f7ff ff8e 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001254:	4b05      	ldr	r3, [pc, #20]	; (800126c <SysTick_Config+0x40>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <SysTick_Config+0x40>)
 800125c:	2207      	movs	r2, #7
 800125e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	e000e010 	.word	0xe000e010

08001270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff29 	bl	80010d0 <__NVIC_SetPriorityGrouping>
}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001286:	b580      	push	{r7, lr}
 8001288:	b086      	sub	sp, #24
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	60b9      	str	r1, [r7, #8]
 8001290:	607a      	str	r2, [r7, #4]
 8001292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001298:	f7ff ff3e 	bl	8001118 <__NVIC_GetPriorityGrouping>
 800129c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	f7ff ff8e 	bl	80011c4 <NVIC_EncodePriority>
 80012a8:	4602      	mov	r2, r0
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff ff31 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ffa2 	bl	800122c <SysTick_Config>
 80012e8:	4603      	mov	r3, r0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d004      	beq.n	8001310 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e00c      	b.n	800132a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2205      	movs	r2, #5
 8001314:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
 8001352:	e16b      	b.n	800162c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001354:	2201      	movs	r2, #1
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	429a      	cmp	r2, r3
 800136e:	f040 815a 	bne.w	8001626 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d00b      	beq.n	8001392 <HAL_GPIO_Init+0x5a>
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001386:	2b11      	cmp	r3, #17
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b12      	cmp	r3, #18
 8001390:	d130      	bne.n	80013f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c8:	2201      	movs	r2, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	f003 0201 	and.w	r2, r3, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b02      	cmp	r3, #2
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0xfc>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b12      	cmp	r3, #18
 8001432:	d123      	bne.n	800147c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	08da      	lsrs	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3208      	adds	r2, #8
 800143c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	4013      	ands	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	69b9      	ldr	r1, [r7, #24]
 8001478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80b4 	beq.w	8001626 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <HAL_GPIO_Init+0x308>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a5e      	ldr	r2, [pc, #376]	; (8001640 <HAL_GPIO_Init+0x308>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b5c      	ldr	r3, [pc, #368]	; (8001640 <HAL_GPIO_Init+0x308>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014da:	4a5a      	ldr	r2, [pc, #360]	; (8001644 <HAL_GPIO_Init+0x30c>)
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f003 0303 	and.w	r3, r3, #3
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a51      	ldr	r2, [pc, #324]	; (8001648 <HAL_GPIO_Init+0x310>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d02b      	beq.n	800155e <HAL_GPIO_Init+0x226>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a50      	ldr	r2, [pc, #320]	; (800164c <HAL_GPIO_Init+0x314>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d025      	beq.n	800155a <HAL_GPIO_Init+0x222>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_GPIO_Init+0x318>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01f      	beq.n	8001556 <HAL_GPIO_Init+0x21e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <HAL_GPIO_Init+0x31c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d019      	beq.n	8001552 <HAL_GPIO_Init+0x21a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4d      	ldr	r2, [pc, #308]	; (8001658 <HAL_GPIO_Init+0x320>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0x216>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_GPIO_Init+0x324>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00d      	beq.n	800154a <HAL_GPIO_Init+0x212>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4b      	ldr	r2, [pc, #300]	; (8001660 <HAL_GPIO_Init+0x328>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x20e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4a      	ldr	r2, [pc, #296]	; (8001664 <HAL_GPIO_Init+0x32c>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_GPIO_Init+0x20a>
 800153e:	2307      	movs	r3, #7
 8001540:	e00e      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001542:	2308      	movs	r3, #8
 8001544:	e00c      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001546:	2306      	movs	r3, #6
 8001548:	e00a      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800154a:	2305      	movs	r3, #5
 800154c:	e008      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800154e:	2304      	movs	r3, #4
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001552:	2303      	movs	r3, #3
 8001554:	e004      	b.n	8001560 <HAL_GPIO_Init+0x228>
 8001556:	2302      	movs	r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x228>
 800155e:	2300      	movs	r3, #0
 8001560:	69fa      	ldr	r2, [r7, #28]
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001570:	4934      	ldr	r1, [pc, #208]	; (8001644 <HAL_GPIO_Init+0x30c>)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800157e:	4b3a      	ldr	r3, [pc, #232]	; (8001668 <HAL_GPIO_Init+0x330>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a2:	4a31      	ldr	r2, [pc, #196]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4013      	ands	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015cc:	4a26      	ldr	r2, [pc, #152]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015f6:	4a1c      	ldr	r2, [pc, #112]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <HAL_GPIO_Init+0x330>)
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001620:	4a11      	ldr	r2, [pc, #68]	; (8001668 <HAL_GPIO_Init+0x330>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3301      	adds	r3, #1
 800162a:	61fb      	str	r3, [r7, #28]
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	2b0f      	cmp	r3, #15
 8001630:	f67f ae90 	bls.w	8001354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001634:	bf00      	nop
 8001636:	3724      	adds	r7, #36	; 0x24
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	40023800 	.word	0x40023800
 8001644:	40013800 	.word	0x40013800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40021000 	.word	0x40021000
 800165c:	40021400 	.word	0x40021400
 8001660:	40021800 	.word	0x40021800
 8001664:	40021c00 	.word	0x40021c00
 8001668:	40013c00 	.word	0x40013c00

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001688:	e003      	b.n	8001692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	041a      	lsls	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	619a      	str	r2, [r3, #24]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b086      	sub	sp, #24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e25b      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d075      	beq.n	80017aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016be:	4ba3      	ldr	r3, [pc, #652]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d00c      	beq.n	80016e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ca:	4ba0      	ldr	r3, [pc, #640]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d112      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016d6:	4b9d      	ldr	r3, [pc, #628]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016e2:	d10b      	bne.n	80016fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016e4:	4b99      	ldr	r3, [pc, #612]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d05b      	beq.n	80017a8 <HAL_RCC_OscConfig+0x108>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d157      	bne.n	80017a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e236      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d106      	bne.n	8001714 <HAL_RCC_OscConfig+0x74>
 8001706:	4b91      	ldr	r3, [pc, #580]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a90      	ldr	r2, [pc, #576]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e01d      	b.n	8001750 <HAL_RCC_OscConfig+0xb0>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800171c:	d10c      	bne.n	8001738 <HAL_RCC_OscConfig+0x98>
 800171e:	4b8b      	ldr	r3, [pc, #556]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a8a      	ldr	r2, [pc, #552]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b88      	ldr	r3, [pc, #544]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a87      	ldr	r2, [pc, #540]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	e00b      	b.n	8001750 <HAL_RCC_OscConfig+0xb0>
 8001738:	4b84      	ldr	r3, [pc, #528]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a83      	ldr	r2, [pc, #524]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800173e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001742:	6013      	str	r3, [r2, #0]
 8001744:	4b81      	ldr	r3, [pc, #516]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a80      	ldr	r2, [pc, #512]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800174a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d013      	beq.n	8001780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fc8c 	bl	8001074 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001760:	f7ff fc88 	bl	8001074 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b64      	cmp	r3, #100	; 0x64
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e1fb      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	4b76      	ldr	r3, [pc, #472]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0f0      	beq.n	8001760 <HAL_RCC_OscConfig+0xc0>
 800177e:	e014      	b.n	80017aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff fc78 	bl	8001074 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001788:	f7ff fc74 	bl	8001074 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b64      	cmp	r3, #100	; 0x64
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e1e7      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800179a:	4b6c      	ldr	r3, [pc, #432]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0xe8>
 80017a6:	e000      	b.n	80017aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d063      	beq.n	800187e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017b6:	4b65      	ldr	r3, [pc, #404]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d00b      	beq.n	80017da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017c2:	4b62      	ldr	r3, [pc, #392]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d11c      	bne.n	8001808 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ce:	4b5f      	ldr	r3, [pc, #380]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017da:	4b5c      	ldr	r3, [pc, #368]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_RCC_OscConfig+0x152>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e1bb      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f2:	4b56      	ldr	r3, [pc, #344]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4952      	ldr	r1, [pc, #328]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001806:	e03a      	b.n	800187e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001810:	4b4f      	ldr	r3, [pc, #316]	; (8001950 <HAL_RCC_OscConfig+0x2b0>)
 8001812:	2201      	movs	r2, #1
 8001814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001816:	f7ff fc2d 	bl	8001074 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800181e:	f7ff fc29 	bl	8001074 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e19c      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001830:	4b46      	ldr	r3, [pc, #280]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183c:	4b43      	ldr	r3, [pc, #268]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	4940      	ldr	r1, [pc, #256]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800184c:	4313      	orrs	r3, r2
 800184e:	600b      	str	r3, [r1, #0]
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001852:	4b3f      	ldr	r3, [pc, #252]	; (8001950 <HAL_RCC_OscConfig+0x2b0>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fc0c 	bl	8001074 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001860:	f7ff fc08 	bl	8001074 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e17b      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	4b36      	ldr	r3, [pc, #216]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d030      	beq.n	80018ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d016      	beq.n	80018c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_OscConfig+0x2b4>)
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001898:	f7ff fbec 	bl	8001074 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fbe8 	bl	8001074 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e15b      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80018b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x200>
 80018be:	e015      	b.n	80018ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_RCC_OscConfig+0x2b4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c6:	f7ff fbd5 	bl	8001074 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fbd1 	bl	8001074 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e144      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 80018e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d1f0      	bne.n	80018ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a0 	beq.w	8001a3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d10f      	bne.n	800192a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_RCC_OscConfig+0x2ac>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001926:	2301      	movs	r3, #1
 8001928:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x2b8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d121      	bne.n	800197a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <HAL_RCC_OscConfig+0x2b8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_RCC_OscConfig+0x2b8>)
 800193c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001942:	f7ff fb97 	bl	8001074 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	e011      	b.n	800196e <HAL_RCC_OscConfig+0x2ce>
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	42470000 	.word	0x42470000
 8001954:	42470e80 	.word	0x42470e80
 8001958:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195c:	f7ff fb8a 	bl	8001074 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e0fd      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4b81      	ldr	r3, [pc, #516]	; (8001b74 <HAL_RCC_OscConfig+0x4d4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d106      	bne.n	8001990 <HAL_RCC_OscConfig+0x2f0>
 8001982:	4b7d      	ldr	r3, [pc, #500]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a7c      	ldr	r2, [pc, #496]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	e01c      	b.n	80019ca <HAL_RCC_OscConfig+0x32a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b05      	cmp	r3, #5
 8001996:	d10c      	bne.n	80019b2 <HAL_RCC_OscConfig+0x312>
 8001998:	4b77      	ldr	r3, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	4a76      	ldr	r2, [pc, #472]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 800199e:	f043 0304 	orr.w	r3, r3, #4
 80019a2:	6713      	str	r3, [r2, #112]	; 0x70
 80019a4:	4b74      	ldr	r3, [pc, #464]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 80019a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a8:	4a73      	ldr	r2, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6713      	str	r3, [r2, #112]	; 0x70
 80019b0:	e00b      	b.n	80019ca <HAL_RCC_OscConfig+0x32a>
 80019b2:	4b71      	ldr	r3, [pc, #452]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b6:	4a70      	ldr	r2, [pc, #448]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6713      	str	r3, [r2, #112]	; 0x70
 80019be:	4b6e      	ldr	r3, [pc, #440]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	4a6d      	ldr	r2, [pc, #436]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d015      	beq.n	80019fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d2:	f7ff fb4f 	bl	8001074 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff fb4b 	bl	8001074 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0bc      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	4b61      	ldr	r3, [pc, #388]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 80019f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f4:	f003 0302 	and.w	r3, r3, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0ee      	beq.n	80019da <HAL_RCC_OscConfig+0x33a>
 80019fc:	e014      	b.n	8001a28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fb39 	bl	8001074 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	e00a      	b.n	8001a1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a06:	f7ff fb35 	bl	8001074 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e0a6      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1ee      	bne.n	8001a06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2e:	4b52      	ldr	r3, [pc, #328]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a51      	ldr	r2, [pc, #324]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8092 	beq.w	8001b68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d05c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d141      	bne.n	8001adc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b48      	ldr	r3, [pc, #288]	; (8001b7c <HAL_RCC_OscConfig+0x4dc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff fb09 	bl	8001074 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff fb05 	bl	8001074 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e078      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a78:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69da      	ldr	r2, [r3, #28]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	019b      	lsls	r3, r3, #6
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9a:	085b      	lsrs	r3, r3, #1
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	041b      	lsls	r3, r3, #16
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa6:	061b      	lsls	r3, r3, #24
 8001aa8:	4933      	ldr	r1, [pc, #204]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aae:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <HAL_RCC_OscConfig+0x4dc>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fade 	bl	8001074 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abc:	f7ff fada 	bl	8001074 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e04d      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ace:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x41c>
 8001ada:	e045      	b.n	8001b68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001adc:	4b27      	ldr	r3, [pc, #156]	; (8001b7c <HAL_RCC_OscConfig+0x4dc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae2:	f7ff fac7 	bl	8001074 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff fac3 	bl	8001074 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e036      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x44a>
 8001b08:	e02e      	b.n	8001b68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e029      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_RCC_OscConfig+0x4d8>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d11c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d115      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b3e:	4013      	ands	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d10d      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40007000 	.word	0x40007000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	42470060 	.word	0x42470060

08001b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0cc      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d90c      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b65      	ldr	r3, [pc, #404]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b8      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	494d      	ldr	r1, [pc, #308]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d044      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e07f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e06f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e067      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 0203 	bic.w	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4934      	ldr	r1, [pc, #208]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c70:	f7ff fa00 	bl	8001074 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7ff f9fc 	bl	8001074 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e04f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 020c 	and.w	r2, r3, #12
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1eb      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d20c      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e032      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4916      	ldr	r1, [pc, #88]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d06:	f000 f821 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d0a:	4601      	mov	r1, r0
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	5cd3      	ldrb	r3, [r2, r3]
 8001d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f960 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	080056e4 	.word	0x080056e4
 8001d44:	20000004 	.word	0x20000004
 8001d48:	20000008 	.word	0x20000008

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	607b      	str	r3, [r7, #4]
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d62:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d007      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0x32>
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d008      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x38>
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f040 808d 	bne.w	8001e92 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d78:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d7a:	60bb      	str	r3, [r7, #8]
       break;
 8001d7c:	e08c      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d7e:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <HAL_RCC_GetSysClockFreq+0x160>)
 8001d80:	60bb      	str	r3, [r7, #8]
      break;
 8001d82:	e089      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d84:	4b47      	ldr	r3, [pc, #284]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8e:	4b45      	ldr	r3, [pc, #276]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d023      	beq.n	8001de2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d9a:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	099b      	lsrs	r3, r3, #6
 8001da0:	f04f 0400 	mov.w	r4, #0
 8001da4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	ea03 0501 	and.w	r5, r3, r1
 8001db0:	ea04 0602 	and.w	r6, r4, r2
 8001db4:	4a3d      	ldr	r2, [pc, #244]	; (8001eac <HAL_RCC_GetSysClockFreq+0x160>)
 8001db6:	fb02 f106 	mul.w	r1, r2, r6
 8001dba:	2200      	movs	r2, #0
 8001dbc:	fb02 f205 	mul.w	r2, r2, r5
 8001dc0:	440a      	add	r2, r1
 8001dc2:	493a      	ldr	r1, [pc, #232]	; (8001eac <HAL_RCC_GetSysClockFreq+0x160>)
 8001dc4:	fba5 0101 	umull	r0, r1, r5, r1
 8001dc8:	1853      	adds	r3, r2, r1
 8001dca:	4619      	mov	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f04f 0400 	mov.w	r4, #0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4623      	mov	r3, r4
 8001dd6:	f7fe fa53 	bl	8000280 <__aeabi_uldivmod>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460c      	mov	r4, r1
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e049      	b.n	8001e76 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	099b      	lsrs	r3, r3, #6
 8001de8:	f04f 0400 	mov.w	r4, #0
 8001dec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	ea03 0501 	and.w	r5, r3, r1
 8001df8:	ea04 0602 	and.w	r6, r4, r2
 8001dfc:	4629      	mov	r1, r5
 8001dfe:	4632      	mov	r2, r6
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	f04f 0400 	mov.w	r4, #0
 8001e08:	0154      	lsls	r4, r2, #5
 8001e0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e0e:	014b      	lsls	r3, r1, #5
 8001e10:	4619      	mov	r1, r3
 8001e12:	4622      	mov	r2, r4
 8001e14:	1b49      	subs	r1, r1, r5
 8001e16:	eb62 0206 	sbc.w	r2, r2, r6
 8001e1a:	f04f 0300 	mov.w	r3, #0
 8001e1e:	f04f 0400 	mov.w	r4, #0
 8001e22:	0194      	lsls	r4, r2, #6
 8001e24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e28:	018b      	lsls	r3, r1, #6
 8001e2a:	1a5b      	subs	r3, r3, r1
 8001e2c:	eb64 0402 	sbc.w	r4, r4, r2
 8001e30:	f04f 0100 	mov.w	r1, #0
 8001e34:	f04f 0200 	mov.w	r2, #0
 8001e38:	00e2      	lsls	r2, r4, #3
 8001e3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e3e:	00d9      	lsls	r1, r3, #3
 8001e40:	460b      	mov	r3, r1
 8001e42:	4614      	mov	r4, r2
 8001e44:	195b      	adds	r3, r3, r5
 8001e46:	eb44 0406 	adc.w	r4, r4, r6
 8001e4a:	f04f 0100 	mov.w	r1, #0
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	02a2      	lsls	r2, r4, #10
 8001e54:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e58:	0299      	lsls	r1, r3, #10
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4614      	mov	r4, r2
 8001e5e:	4618      	mov	r0, r3
 8001e60:	4621      	mov	r1, r4
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f04f 0400 	mov.w	r4, #0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	f7fe fa08 	bl	8000280 <__aeabi_uldivmod>
 8001e70:	4603      	mov	r3, r0
 8001e72:	460c      	mov	r4, r1
 8001e74:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	3301      	adds	r3, #1
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8e:	60bb      	str	r3, [r7, #8]
      break;
 8001e90:	e002      	b.n	8001e98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e94:	60bb      	str	r3, [r7, #8]
      break;
 8001e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e98:	68bb      	ldr	r3, [r7, #8]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	017d7840 	.word	0x017d7840

08001eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	; (8001ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4601      	mov	r1, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0a9b      	lsrs	r3, r3, #10
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4a03      	ldr	r2, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	080056f4 	.word	0x080056f4

08001ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ef4:	f7ff ffdc 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4601      	mov	r1, r0
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0b5b      	lsrs	r3, r3, #13
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4a03      	ldr	r2, [pc, #12]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	080056f4 	.word	0x080056f4

08001f18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e056      	b.n	8001fd8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d106      	bne.n	8001f4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7fe fef3 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	ea42 0103 	orr.w	r1, r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	0c1b      	lsrs	r3, r3, #16
 8001fa8:	f003 0104 	and.w	r1, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d101      	bne.n	8002002 <HAL_SPI_Transmit+0x22>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e11e      	b.n	8002240 <HAL_SPI_Transmit+0x260>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800200a:	f7ff f833 	bl	8001074 <HAL_GetTick>
 800200e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d002      	beq.n	8002026 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002020:	2302      	movs	r3, #2
 8002022:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002024:	e103      	b.n	800222e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d002      	beq.n	8002032 <HAL_SPI_Transmit+0x52>
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002036:	e0fa      	b.n	800222e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2203      	movs	r2, #3
 800203c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	88fa      	ldrh	r2, [r7, #6]
 8002050:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800207e:	d107      	bne.n	8002090 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800208e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209a:	2b40      	cmp	r3, #64	; 0x40
 800209c:	d007      	beq.n	80020ae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020b6:	d14b      	bne.n	8002150 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d002      	beq.n	80020c6 <HAL_SPI_Transmit+0xe6>
 80020c0:	8afb      	ldrh	r3, [r7, #22]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d13e      	bne.n	8002144 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	881a      	ldrh	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	1c9a      	adds	r2, r3, #2
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	3b01      	subs	r3, #1
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020ea:	e02b      	b.n	8002144 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d112      	bne.n	8002120 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	881a      	ldrh	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	1c9a      	adds	r2, r3, #2
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29a      	uxth	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	86da      	strh	r2, [r3, #54]	; 0x36
 800211e:	e011      	b.n	8002144 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002120:	f7fe ffa8 	bl	8001074 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d803      	bhi.n	8002138 <HAL_SPI_Transmit+0x158>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002136:	d102      	bne.n	800213e <HAL_SPI_Transmit+0x15e>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002142:	e074      	b.n	800222e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ce      	bne.n	80020ec <HAL_SPI_Transmit+0x10c>
 800214e:	e04c      	b.n	80021ea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_SPI_Transmit+0x17e>
 8002158:	8afb      	ldrh	r3, [r7, #22]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d140      	bne.n	80021e0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	330c      	adds	r3, #12
 8002168:	7812      	ldrb	r2, [r2, #0]
 800216a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002184:	e02c      	b.n	80021e0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b02      	cmp	r3, #2
 8002192:	d113      	bne.n	80021bc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	7812      	ldrb	r2, [r2, #0]
 80021a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80021ba:	e011      	b.n	80021e0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021bc:	f7fe ff5a 	bl	8001074 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d803      	bhi.n	80021d4 <HAL_SPI_Transmit+0x1f4>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d2:	d102      	bne.n	80021da <HAL_SPI_Transmit+0x1fa>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021de:	e026      	b.n	800222e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1cd      	bne.n	8002186 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fba4 	bl	800293c <SPI_EndRxTxTransaction>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2220      	movs	r2, #32
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	77fb      	strb	r3, [r7, #31]
 800222a:	e000      	b.n	800222e <HAL_SPI_Transmit+0x24e>
  }

error:
 800222c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2201      	movs	r2, #1
 8002232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800223e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	603b      	str	r3, [r7, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002264:	d112      	bne.n	800228c <HAL_SPI_Receive+0x44>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10e      	bne.n	800228c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2204      	movs	r2, #4
 8002272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002276:	88fa      	ldrh	r2, [r7, #6]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	9300      	str	r3, [sp, #0]
 800227c:	4613      	mov	r3, r2
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f8e9 	bl	800245a <HAL_SPI_TransmitReceive>
 8002288:	4603      	mov	r3, r0
 800228a:	e0e2      	b.n	8002452 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_SPI_Receive+0x52>
 8002296:	2302      	movs	r3, #2
 8002298:	e0db      	b.n	8002452 <HAL_SPI_Receive+0x20a>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022a2:	f7fe fee7 	bl	8001074 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d002      	beq.n	80022ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
 80022b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022b8:	e0c2      	b.n	8002440 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <HAL_SPI_Receive+0x7e>
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d102      	bne.n	80022cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022ca:	e0b9      	b.n	8002440 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2204      	movs	r2, #4
 80022d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	88fa      	ldrh	r2, [r7, #6]
 80022e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002312:	d107      	bne.n	8002324 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d007      	beq.n	8002342 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d162      	bne.n	8002410 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800234a:	e02e      	b.n	80023aa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d115      	bne.n	8002386 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f103 020c 	add.w	r2, r3, #12
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002384:	e011      	b.n	80023aa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002386:	f7fe fe75 	bl	8001074 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d803      	bhi.n	800239e <HAL_SPI_Receive+0x156>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d102      	bne.n	80023a4 <HAL_SPI_Receive+0x15c>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023a8:	e04a      	b.n	8002440 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1cb      	bne.n	800234c <HAL_SPI_Receive+0x104>
 80023b4:	e031      	b.n	800241a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d113      	bne.n	80023ec <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ce:	b292      	uxth	r2, r2
 80023d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	1c9a      	adds	r2, r3, #2
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023ea:	e011      	b.n	8002410 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ec:	f7fe fe42 	bl	8001074 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d803      	bhi.n	8002404 <HAL_SPI_Receive+0x1bc>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002402:	d102      	bne.n	800240a <HAL_SPI_Receive+0x1c2>
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800240e:	e017      	b.n	8002440 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1cd      	bne.n	80023b6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	6839      	ldr	r1, [r7, #0]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fa27 	bl	8002872 <SPI_EndRxTransaction>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2220      	movs	r2, #32
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	75fb      	strb	r3, [r7, #23]
 800243c:	e000      	b.n	8002440 <HAL_SPI_Receive+0x1f8>
  }

error :
 800243e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002450:	7dfb      	ldrb	r3, [r7, #23]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b08c      	sub	sp, #48	; 0x30
 800245e:	af00      	add	r7, sp, #0
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002468:	2301      	movs	r3, #1
 800246a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_SPI_TransmitReceive+0x26>
 800247c:	2302      	movs	r3, #2
 800247e:	e18a      	b.n	8002796 <HAL_SPI_TransmitReceive+0x33c>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002488:	f7fe fdf4 	bl	8001074 <HAL_GetTick>
 800248c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002494:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800249e:	887b      	ldrh	r3, [r7, #2]
 80024a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d00f      	beq.n	80024ca <HAL_SPI_TransmitReceive+0x70>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024b0:	d107      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <HAL_SPI_TransmitReceive+0x68>
 80024ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d003      	beq.n	80024ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024c2:	2302      	movs	r3, #2
 80024c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024c8:	e15b      	b.n	8002782 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_SPI_TransmitReceive+0x82>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <HAL_SPI_TransmitReceive+0x82>
 80024d6:	887b      	ldrh	r3, [r7, #2]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d103      	bne.n	80024e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024e2:	e14e      	b.n	8002782 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d003      	beq.n	80024f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2205      	movs	r2, #5
 80024f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	887a      	ldrh	r2, [r7, #2]
 800250e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	887a      	ldrh	r2, [r7, #2]
 800251a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d007      	beq.n	800254c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800254a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002554:	d178      	bne.n	8002648 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_SPI_TransmitReceive+0x10a>
 800255e:	8b7b      	ldrh	r3, [r7, #26]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d166      	bne.n	8002632 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	881a      	ldrh	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	1c9a      	adds	r2, r3, #2
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002588:	e053      	b.n	8002632 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b02      	cmp	r3, #2
 8002596:	d11b      	bne.n	80025d0 <HAL_SPI_TransmitReceive+0x176>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d016      	beq.n	80025d0 <HAL_SPI_TransmitReceive+0x176>
 80025a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d113      	bne.n	80025d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	881a      	ldrh	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	1c9a      	adds	r2, r3, #2
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d119      	bne.n	8002612 <HAL_SPI_TransmitReceive+0x1b8>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d014      	beq.n	8002612 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f2:	b292      	uxth	r2, r2
 80025f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fa:	1c9a      	adds	r2, r3, #2
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800260e:	2301      	movs	r3, #1
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002612:	f7fe fd2f 	bl	8001074 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800261e:	429a      	cmp	r2, r3
 8002620:	d807      	bhi.n	8002632 <HAL_SPI_TransmitReceive+0x1d8>
 8002622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d003      	beq.n	8002632 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002630:	e0a7      	b.n	8002782 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1a6      	bne.n	800258a <HAL_SPI_TransmitReceive+0x130>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1a1      	bne.n	800258a <HAL_SPI_TransmitReceive+0x130>
 8002646:	e07c      	b.n	8002742 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <HAL_SPI_TransmitReceive+0x1fc>
 8002650:	8b7b      	ldrh	r3, [r7, #26]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d16b      	bne.n	800272e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800267c:	e057      	b.n	800272e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d11c      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x26c>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d017      	beq.n	80026c6 <HAL_SPI_TransmitReceive+0x26c>
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	2b01      	cmp	r3, #1
 800269a:	d114      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	7812      	ldrb	r2, [r2, #0]
 80026a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d119      	bne.n	8002708 <HAL_SPI_TransmitReceive+0x2ae>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d014      	beq.n	8002708 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002704:	2301      	movs	r3, #1
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002708:	f7fe fcb4 	bl	8001074 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002714:	429a      	cmp	r2, r3
 8002716:	d803      	bhi.n	8002720 <HAL_SPI_TransmitReceive+0x2c6>
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271e:	d102      	bne.n	8002726 <HAL_SPI_TransmitReceive+0x2cc>
 8002720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800272c:	e029      	b.n	8002782 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002732:	b29b      	uxth	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1a2      	bne.n	800267e <HAL_SPI_TransmitReceive+0x224>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d19d      	bne.n	800267e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002744:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f8f8 	bl	800293c <SPI_EndRxTxTransaction>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d006      	beq.n	8002760 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800275e:	e010      	b.n	8002782 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10b      	bne.n	8002780 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	e000      	b.n	8002782 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002780:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002792:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002796:	4618      	mov	r0, r3
 8002798:	3730      	adds	r7, #48	; 0x30
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b084      	sub	sp, #16
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	603b      	str	r3, [r7, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027ae:	e04c      	b.n	800284a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d048      	beq.n	800284a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80027b8:	f7fe fc5c 	bl	8001074 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d902      	bls.n	80027ce <SPI_WaitFlagStateUntilTimeout+0x30>
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d13d      	bne.n	800284a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027e6:	d111      	bne.n	800280c <SPI_WaitFlagStateUntilTimeout+0x6e>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f0:	d004      	beq.n	80027fc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fa:	d107      	bne.n	800280c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002814:	d10f      	bne.n	8002836 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e00f      	b.n	800286a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	4013      	ands	r3, r2
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	429a      	cmp	r2, r3
 8002858:	bf0c      	ite	eq
 800285a:	2301      	moveq	r3, #1
 800285c:	2300      	movne	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	79fb      	ldrb	r3, [r7, #7]
 8002864:	429a      	cmp	r2, r3
 8002866:	d1a3      	bne.n	80027b0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af02      	add	r7, sp, #8
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002886:	d111      	bne.n	80028ac <SPI_EndRxTransaction+0x3a>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002890:	d004      	beq.n	800289c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800289a:	d107      	bne.n	80028ac <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028aa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b4:	d12a      	bne.n	800290c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028be:	d012      	beq.n	80028e6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2200      	movs	r2, #0
 80028c8:	2180      	movs	r1, #128	; 0x80
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff ff67 	bl	800279e <SPI_WaitFlagStateUntilTimeout>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d02d      	beq.n	8002932 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028da:	f043 0220 	orr.w	r2, r3, #32
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e026      	b.n	8002934 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2101      	movs	r1, #1
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff ff54 	bl	800279e <SPI_WaitFlagStateUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d01a      	beq.n	8002932 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e013      	b.n	8002934 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2200      	movs	r2, #0
 8002914:	2101      	movs	r1, #1
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f7ff ff41 	bl	800279e <SPI_WaitFlagStateUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d007      	beq.n	8002932 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0220 	orr.w	r2, r3, #32
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e000      	b.n	8002934 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <SPI_EndRxTxTransaction+0x7c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <SPI_EndRxTxTransaction+0x80>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0d5b      	lsrs	r3, r3, #21
 8002954:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002966:	d112      	bne.n	800298e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2200      	movs	r2, #0
 8002970:	2180      	movs	r1, #128	; 0x80
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f7ff ff13 	bl	800279e <SPI_WaitFlagStateUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f043 0220 	orr.w	r2, r3, #32
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e00f      	b.n	80029ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3b01      	subs	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a4:	2b80      	cmp	r3, #128	; 0x80
 80029a6:	d0f2      	beq.n	800298e <SPI_EndRxTxTransaction+0x52>
 80029a8:	e000      	b.n	80029ac <SPI_EndRxTxTransaction+0x70>
        break;
 80029aa:	bf00      	nop
  }

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000004 	.word	0x20000004
 80029bc:	165e9f81 	.word	0x165e9f81

080029c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e03f      	b.n	8002a52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fe f9ea 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2224      	movs	r2, #36	; 0x24
 80029f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fb97 	bl	8003138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b088      	sub	sp, #32
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	f040 8083 	bne.w	8002b82 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_UART_Transmit+0x2e>
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e07b      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <HAL_UART_Transmit+0x40>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e074      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2221      	movs	r2, #33	; 0x21
 8002aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002ab0:	f7fe fae0 	bl	8001074 <HAL_GetTick>
 8002ab4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002aca:	e042      	b.n	8002b52 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae2:	d122      	bne.n	8002b2a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	2200      	movs	r2, #0
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f9b6 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e042      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	3302      	adds	r3, #2
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	e017      	b.n	8002b52 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3301      	adds	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	e013      	b.n	8002b52 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2180      	movs	r1, #128	; 0x80
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f993 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e01f      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	60ba      	str	r2, [r7, #8]
 8002b4a:	781a      	ldrb	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1b7      	bne.n	8002acc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	2200      	movs	r2, #0
 8002b64:	2140      	movs	r1, #64	; 0x40
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 f97a 	bl	8002e60 <UART_WaitOnFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e006      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	e000      	b.n	8002b84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
  }
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b20      	cmp	r3, #32
 8002ba4:	d140      	bne.n	8002c28 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <HAL_UART_Receive_IT+0x26>
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e039      	b.n	8002c2a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_UART_Receive_IT+0x38>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e032      	b.n	8002c2a <HAL_UART_Receive_IT+0x9e>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	88fa      	ldrh	r2, [r7, #6]
 8002bd6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	88fa      	ldrh	r2, [r7, #6]
 8002bdc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2222      	movs	r2, #34	; 0x22
 8002be8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c02:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695a      	ldr	r2, [r3, #20]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10d      	bne.n	8002c8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_UART_IRQHandler+0x52>
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f003 0320 	and.w	r3, r3, #32
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f9d6 	bl	8003034 <UART_Receive_IT>
      return;
 8002c88:	e0d1      	b.n	8002e2e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 80b0 	beq.w	8002df2 <HAL_UART_IRQHandler+0x1ba>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d105      	bne.n	8002ca8 <HAL_UART_IRQHandler+0x70>
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80a5 	beq.w	8002df2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x90>
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_UART_IRQHandler+0xb0>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce0:	f043 0202 	orr.w	r2, r3, #2
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00a      	beq.n	8002d08 <HAL_UART_IRQHandler+0xd0>
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f003 0301 	and.w	r3, r3, #1
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0308 	and.w	r3, r3, #8
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00f      	beq.n	8002d32 <HAL_UART_IRQHandler+0xfa>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d104      	bne.n	8002d26 <HAL_UART_IRQHandler+0xee>
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2a:	f043 0208 	orr.w	r2, r3, #8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d078      	beq.n	8002e2c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d007      	beq.n	8002d54 <HAL_UART_IRQHandler+0x11c>
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f003 0320 	and.w	r3, r3, #32
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f970 	bl	8003034 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_UART_IRQHandler+0x144>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d031      	beq.n	8002de0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f8b9 	bl	8002ef4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8c:	2b40      	cmp	r3, #64	; 0x40
 8002d8e:	d123      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <HAL_UART_IRQHandler+0x1fc>)
 8002dae:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe fa9c 	bl	80012f2 <HAL_DMA_Abort_IT>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d016      	beq.n	8002dee <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dce:	e00e      	b.n	8002dee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f83b 	bl	8002e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd6:	e00a      	b.n	8002dee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f837 	bl	8002e4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dde:	e006      	b.n	8002dee <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f833 	bl	8002e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002dec:	e01e      	b.n	8002e2c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dee:	bf00      	nop
    return;
 8002df0:	e01c      	b.n	8002e2c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_UART_IRQHandler+0x1d6>
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8a6 	bl	8002f58 <UART_Transmit_IT>
    return;
 8002e0c:	e00f      	b.n	8002e2e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_UART_IRQHandler+0x1f6>
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d005      	beq.n	8002e2e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 f8ee 	bl	8003004 <UART_EndTransmit_IT>
    return;
 8002e28:	bf00      	nop
 8002e2a:	e000      	b.n	8002e2e <HAL_UART_IRQHandler+0x1f6>
    return;
 8002e2c:	bf00      	nop
  }
}
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	08002f31 	.word	0x08002f31

08002e38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e70:	e02c      	b.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d028      	beq.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d007      	beq.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e80:	f7fe f8f8 	bl	8001074 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d21d      	bcs.n	8002ecc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e9e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0201 	bic.w	r2, r2, #1
 8002eae:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e00f      	b.n	8002eec <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d0c3      	beq.n	8002e72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0201 	bic.w	r2, r2, #1
 8002f1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7ff ff7e 	bl	8002e4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f50:	bf00      	nop
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b21      	cmp	r3, #33	; 0x21
 8002f6a:	d144      	bne.n	8002ff6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d11a      	bne.n	8002fac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f8a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d105      	bne.n	8002fa0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	1c9a      	adds	r2, r3, #2
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	621a      	str	r2, [r3, #32]
 8002f9e:	e00e      	b.n	8002fbe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	621a      	str	r2, [r3, #32]
 8002faa:	e008      	b.n	8002fbe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	1c59      	adds	r1, r3, #1
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6211      	str	r1, [r2, #32]
 8002fb6:	781a      	ldrb	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68da      	ldr	r2, [r3, #12]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ff0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e000      	b.n	8002ff8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002ff6:	2302      	movs	r3, #2
  }
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3714      	adds	r7, #20
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68da      	ldr	r2, [r3, #12]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800301a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ff07 	bl	8002e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b22      	cmp	r3, #34	; 0x22
 8003046:	d171      	bne.n	800312c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003050:	d123      	bne.n	800309a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10e      	bne.n	800307e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	1c9a      	adds	r2, r3, #2
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
 800307c:	e029      	b.n	80030d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	b29b      	uxth	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
 8003098:	e01b      	b.n	80030d2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10a      	bne.n	80030b8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6858      	ldr	r0, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	1c59      	adds	r1, r3, #1
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6291      	str	r1, [r2, #40]	; 0x28
 80030b2:	b2c2      	uxtb	r2, r0
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	e00c      	b.n	80030d2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	1c58      	adds	r0, r3, #1
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	6288      	str	r0, [r1, #40]	; 0x28
 80030ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4619      	mov	r1, r3
 80030e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d120      	bne.n	8003128 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0220 	bic.w	r2, r2, #32
 80030f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003104:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0201 	bic.w	r2, r2, #1
 8003114:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd fbf0 	bl	8000904 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	e002      	b.n	800312e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e000      	b.n	800312e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800312c:	2302      	movs	r3, #2
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800313c:	b085      	sub	sp, #20
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800317a:	f023 030c 	bic.w	r3, r3, #12
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6812      	ldr	r2, [r2, #0]
 8003182:	68f9      	ldr	r1, [r7, #12]
 8003184:	430b      	orrs	r3, r1
 8003186:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a6:	f040 818b 	bne.w	80034c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4ac1      	ldr	r2, [pc, #772]	; (80034b4 <UART_SetConfig+0x37c>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d005      	beq.n	80031c0 <UART_SetConfig+0x88>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4abf      	ldr	r2, [pc, #764]	; (80034b8 <UART_SetConfig+0x380>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	f040 80bd 	bne.w	800333a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031c0:	f7fe fe96 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 80031c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	461d      	mov	r5, r3
 80031ca:	f04f 0600 	mov.w	r6, #0
 80031ce:	46a8      	mov	r8, r5
 80031d0:	46b1      	mov	r9, r6
 80031d2:	eb18 0308 	adds.w	r3, r8, r8
 80031d6:	eb49 0409 	adc.w	r4, r9, r9
 80031da:	4698      	mov	r8, r3
 80031dc:	46a1      	mov	r9, r4
 80031de:	eb18 0805 	adds.w	r8, r8, r5
 80031e2:	eb49 0906 	adc.w	r9, r9, r6
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031fa:	4688      	mov	r8, r1
 80031fc:	4691      	mov	r9, r2
 80031fe:	eb18 0005 	adds.w	r0, r8, r5
 8003202:	eb49 0106 	adc.w	r1, r9, r6
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	461d      	mov	r5, r3
 800320c:	f04f 0600 	mov.w	r6, #0
 8003210:	196b      	adds	r3, r5, r5
 8003212:	eb46 0406 	adc.w	r4, r6, r6
 8003216:	461a      	mov	r2, r3
 8003218:	4623      	mov	r3, r4
 800321a:	f7fd f831 	bl	8000280 <__aeabi_uldivmod>
 800321e:	4603      	mov	r3, r0
 8003220:	460c      	mov	r4, r1
 8003222:	461a      	mov	r2, r3
 8003224:	4ba5      	ldr	r3, [pc, #660]	; (80034bc <UART_SetConfig+0x384>)
 8003226:	fba3 2302 	umull	r2, r3, r3, r2
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	461d      	mov	r5, r3
 8003234:	f04f 0600 	mov.w	r6, #0
 8003238:	46a9      	mov	r9, r5
 800323a:	46b2      	mov	sl, r6
 800323c:	eb19 0309 	adds.w	r3, r9, r9
 8003240:	eb4a 040a 	adc.w	r4, sl, sl
 8003244:	4699      	mov	r9, r3
 8003246:	46a2      	mov	sl, r4
 8003248:	eb19 0905 	adds.w	r9, r9, r5
 800324c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800325c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003260:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003264:	4689      	mov	r9, r1
 8003266:	4692      	mov	sl, r2
 8003268:	eb19 0005 	adds.w	r0, r9, r5
 800326c:	eb4a 0106 	adc.w	r1, sl, r6
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	461d      	mov	r5, r3
 8003276:	f04f 0600 	mov.w	r6, #0
 800327a:	196b      	adds	r3, r5, r5
 800327c:	eb46 0406 	adc.w	r4, r6, r6
 8003280:	461a      	mov	r2, r3
 8003282:	4623      	mov	r3, r4
 8003284:	f7fc fffc 	bl	8000280 <__aeabi_uldivmod>
 8003288:	4603      	mov	r3, r0
 800328a:	460c      	mov	r4, r1
 800328c:	461a      	mov	r2, r3
 800328e:	4b8b      	ldr	r3, [pc, #556]	; (80034bc <UART_SetConfig+0x384>)
 8003290:	fba3 1302 	umull	r1, r3, r3, r2
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	2164      	movs	r1, #100	; 0x64
 8003298:	fb01 f303 	mul.w	r3, r1, r3
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	3332      	adds	r3, #50	; 0x32
 80032a2:	4a86      	ldr	r2, [pc, #536]	; (80034bc <UART_SetConfig+0x384>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	095b      	lsrs	r3, r3, #5
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032b0:	4498      	add	r8, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	461d      	mov	r5, r3
 80032b6:	f04f 0600 	mov.w	r6, #0
 80032ba:	46a9      	mov	r9, r5
 80032bc:	46b2      	mov	sl, r6
 80032be:	eb19 0309 	adds.w	r3, r9, r9
 80032c2:	eb4a 040a 	adc.w	r4, sl, sl
 80032c6:	4699      	mov	r9, r3
 80032c8:	46a2      	mov	sl, r4
 80032ca:	eb19 0905 	adds.w	r9, r9, r5
 80032ce:	eb4a 0a06 	adc.w	sl, sl, r6
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032e6:	4689      	mov	r9, r1
 80032e8:	4692      	mov	sl, r2
 80032ea:	eb19 0005 	adds.w	r0, r9, r5
 80032ee:	eb4a 0106 	adc.w	r1, sl, r6
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	461d      	mov	r5, r3
 80032f8:	f04f 0600 	mov.w	r6, #0
 80032fc:	196b      	adds	r3, r5, r5
 80032fe:	eb46 0406 	adc.w	r4, r6, r6
 8003302:	461a      	mov	r2, r3
 8003304:	4623      	mov	r3, r4
 8003306:	f7fc ffbb 	bl	8000280 <__aeabi_uldivmod>
 800330a:	4603      	mov	r3, r0
 800330c:	460c      	mov	r4, r1
 800330e:	461a      	mov	r2, r3
 8003310:	4b6a      	ldr	r3, [pc, #424]	; (80034bc <UART_SetConfig+0x384>)
 8003312:	fba3 1302 	umull	r1, r3, r3, r2
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2164      	movs	r1, #100	; 0x64
 800331a:	fb01 f303 	mul.w	r3, r1, r3
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	3332      	adds	r3, #50	; 0x32
 8003324:	4a65      	ldr	r2, [pc, #404]	; (80034bc <UART_SetConfig+0x384>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	f003 0207 	and.w	r2, r3, #7
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4442      	add	r2, r8
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	e26f      	b.n	800381a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800333a:	f7fe fdc5 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 800333e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	461d      	mov	r5, r3
 8003344:	f04f 0600 	mov.w	r6, #0
 8003348:	46a8      	mov	r8, r5
 800334a:	46b1      	mov	r9, r6
 800334c:	eb18 0308 	adds.w	r3, r8, r8
 8003350:	eb49 0409 	adc.w	r4, r9, r9
 8003354:	4698      	mov	r8, r3
 8003356:	46a1      	mov	r9, r4
 8003358:	eb18 0805 	adds.w	r8, r8, r5
 800335c:	eb49 0906 	adc.w	r9, r9, r6
 8003360:	f04f 0100 	mov.w	r1, #0
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800336c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003370:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003374:	4688      	mov	r8, r1
 8003376:	4691      	mov	r9, r2
 8003378:	eb18 0005 	adds.w	r0, r8, r5
 800337c:	eb49 0106 	adc.w	r1, r9, r6
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	461d      	mov	r5, r3
 8003386:	f04f 0600 	mov.w	r6, #0
 800338a:	196b      	adds	r3, r5, r5
 800338c:	eb46 0406 	adc.w	r4, r6, r6
 8003390:	461a      	mov	r2, r3
 8003392:	4623      	mov	r3, r4
 8003394:	f7fc ff74 	bl	8000280 <__aeabi_uldivmod>
 8003398:	4603      	mov	r3, r0
 800339a:	460c      	mov	r4, r1
 800339c:	461a      	mov	r2, r3
 800339e:	4b47      	ldr	r3, [pc, #284]	; (80034bc <UART_SetConfig+0x384>)
 80033a0:	fba3 2302 	umull	r2, r3, r3, r2
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	461d      	mov	r5, r3
 80033ae:	f04f 0600 	mov.w	r6, #0
 80033b2:	46a9      	mov	r9, r5
 80033b4:	46b2      	mov	sl, r6
 80033b6:	eb19 0309 	adds.w	r3, r9, r9
 80033ba:	eb4a 040a 	adc.w	r4, sl, sl
 80033be:	4699      	mov	r9, r3
 80033c0:	46a2      	mov	sl, r4
 80033c2:	eb19 0905 	adds.w	r9, r9, r5
 80033c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80033ca:	f04f 0100 	mov.w	r1, #0
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033de:	4689      	mov	r9, r1
 80033e0:	4692      	mov	sl, r2
 80033e2:	eb19 0005 	adds.w	r0, r9, r5
 80033e6:	eb4a 0106 	adc.w	r1, sl, r6
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	461d      	mov	r5, r3
 80033f0:	f04f 0600 	mov.w	r6, #0
 80033f4:	196b      	adds	r3, r5, r5
 80033f6:	eb46 0406 	adc.w	r4, r6, r6
 80033fa:	461a      	mov	r2, r3
 80033fc:	4623      	mov	r3, r4
 80033fe:	f7fc ff3f 	bl	8000280 <__aeabi_uldivmod>
 8003402:	4603      	mov	r3, r0
 8003404:	460c      	mov	r4, r1
 8003406:	461a      	mov	r2, r3
 8003408:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <UART_SetConfig+0x384>)
 800340a:	fba3 1302 	umull	r1, r3, r3, r2
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	2164      	movs	r1, #100	; 0x64
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	3332      	adds	r3, #50	; 0x32
 800341c:	4a27      	ldr	r2, [pc, #156]	; (80034bc <UART_SetConfig+0x384>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800342a:	4498      	add	r8, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	461d      	mov	r5, r3
 8003430:	f04f 0600 	mov.w	r6, #0
 8003434:	46a9      	mov	r9, r5
 8003436:	46b2      	mov	sl, r6
 8003438:	eb19 0309 	adds.w	r3, r9, r9
 800343c:	eb4a 040a 	adc.w	r4, sl, sl
 8003440:	4699      	mov	r9, r3
 8003442:	46a2      	mov	sl, r4
 8003444:	eb19 0905 	adds.w	r9, r9, r5
 8003448:	eb4a 0a06 	adc.w	sl, sl, r6
 800344c:	f04f 0100 	mov.w	r1, #0
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003458:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800345c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003460:	4689      	mov	r9, r1
 8003462:	4692      	mov	sl, r2
 8003464:	eb19 0005 	adds.w	r0, r9, r5
 8003468:	eb4a 0106 	adc.w	r1, sl, r6
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	461d      	mov	r5, r3
 8003472:	f04f 0600 	mov.w	r6, #0
 8003476:	196b      	adds	r3, r5, r5
 8003478:	eb46 0406 	adc.w	r4, r6, r6
 800347c:	461a      	mov	r2, r3
 800347e:	4623      	mov	r3, r4
 8003480:	f7fc fefe 	bl	8000280 <__aeabi_uldivmod>
 8003484:	4603      	mov	r3, r0
 8003486:	460c      	mov	r4, r1
 8003488:	461a      	mov	r2, r3
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <UART_SetConfig+0x384>)
 800348c:	fba3 1302 	umull	r1, r3, r3, r2
 8003490:	095b      	lsrs	r3, r3, #5
 8003492:	2164      	movs	r1, #100	; 0x64
 8003494:	fb01 f303 	mul.w	r3, r1, r3
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	3332      	adds	r3, #50	; 0x32
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <UART_SetConfig+0x384>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	f003 0207 	and.w	r2, r3, #7
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4442      	add	r2, r8
 80034b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80034b2:	e1b2      	b.n	800381a <UART_SetConfig+0x6e2>
 80034b4:	40011000 	.word	0x40011000
 80034b8:	40011400 	.word	0x40011400
 80034bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4ad7      	ldr	r2, [pc, #860]	; (8003824 <UART_SetConfig+0x6ec>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d005      	beq.n	80034d6 <UART_SetConfig+0x39e>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4ad6      	ldr	r2, [pc, #856]	; (8003828 <UART_SetConfig+0x6f0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	f040 80d1 	bne.w	8003678 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80034d6:	f7fe fd0b 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 80034da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	469a      	mov	sl, r3
 80034e0:	f04f 0b00 	mov.w	fp, #0
 80034e4:	46d0      	mov	r8, sl
 80034e6:	46d9      	mov	r9, fp
 80034e8:	eb18 0308 	adds.w	r3, r8, r8
 80034ec:	eb49 0409 	adc.w	r4, r9, r9
 80034f0:	4698      	mov	r8, r3
 80034f2:	46a1      	mov	r9, r4
 80034f4:	eb18 080a 	adds.w	r8, r8, sl
 80034f8:	eb49 090b 	adc.w	r9, r9, fp
 80034fc:	f04f 0100 	mov.w	r1, #0
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003508:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800350c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003510:	4688      	mov	r8, r1
 8003512:	4691      	mov	r9, r2
 8003514:	eb1a 0508 	adds.w	r5, sl, r8
 8003518:	eb4b 0609 	adc.w	r6, fp, r9
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4619      	mov	r1, r3
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	f04f 0400 	mov.w	r4, #0
 800352e:	0094      	lsls	r4, r2, #2
 8003530:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003534:	008b      	lsls	r3, r1, #2
 8003536:	461a      	mov	r2, r3
 8003538:	4623      	mov	r3, r4
 800353a:	4628      	mov	r0, r5
 800353c:	4631      	mov	r1, r6
 800353e:	f7fc fe9f 	bl	8000280 <__aeabi_uldivmod>
 8003542:	4603      	mov	r3, r0
 8003544:	460c      	mov	r4, r1
 8003546:	461a      	mov	r2, r3
 8003548:	4bb8      	ldr	r3, [pc, #736]	; (800382c <UART_SetConfig+0x6f4>)
 800354a:	fba3 2302 	umull	r2, r3, r3, r2
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	469b      	mov	fp, r3
 8003558:	f04f 0c00 	mov.w	ip, #0
 800355c:	46d9      	mov	r9, fp
 800355e:	46e2      	mov	sl, ip
 8003560:	eb19 0309 	adds.w	r3, r9, r9
 8003564:	eb4a 040a 	adc.w	r4, sl, sl
 8003568:	4699      	mov	r9, r3
 800356a:	46a2      	mov	sl, r4
 800356c:	eb19 090b 	adds.w	r9, r9, fp
 8003570:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003580:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003584:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003588:	4689      	mov	r9, r1
 800358a:	4692      	mov	sl, r2
 800358c:	eb1b 0509 	adds.w	r5, fp, r9
 8003590:	eb4c 060a 	adc.w	r6, ip, sl
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4619      	mov	r1, r3
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	f04f 0400 	mov.w	r4, #0
 80035a6:	0094      	lsls	r4, r2, #2
 80035a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035ac:	008b      	lsls	r3, r1, #2
 80035ae:	461a      	mov	r2, r3
 80035b0:	4623      	mov	r3, r4
 80035b2:	4628      	mov	r0, r5
 80035b4:	4631      	mov	r1, r6
 80035b6:	f7fc fe63 	bl	8000280 <__aeabi_uldivmod>
 80035ba:	4603      	mov	r3, r0
 80035bc:	460c      	mov	r4, r1
 80035be:	461a      	mov	r2, r3
 80035c0:	4b9a      	ldr	r3, [pc, #616]	; (800382c <UART_SetConfig+0x6f4>)
 80035c2:	fba3 1302 	umull	r1, r3, r3, r2
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	2164      	movs	r1, #100	; 0x64
 80035ca:	fb01 f303 	mul.w	r3, r1, r3
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	3332      	adds	r3, #50	; 0x32
 80035d4:	4a95      	ldr	r2, [pc, #596]	; (800382c <UART_SetConfig+0x6f4>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	095b      	lsrs	r3, r3, #5
 80035dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e0:	4498      	add	r8, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	469b      	mov	fp, r3
 80035e6:	f04f 0c00 	mov.w	ip, #0
 80035ea:	46d9      	mov	r9, fp
 80035ec:	46e2      	mov	sl, ip
 80035ee:	eb19 0309 	adds.w	r3, r9, r9
 80035f2:	eb4a 040a 	adc.w	r4, sl, sl
 80035f6:	4699      	mov	r9, r3
 80035f8:	46a2      	mov	sl, r4
 80035fa:	eb19 090b 	adds.w	r9, r9, fp
 80035fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800360e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003612:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003616:	4689      	mov	r9, r1
 8003618:	4692      	mov	sl, r2
 800361a:	eb1b 0509 	adds.w	r5, fp, r9
 800361e:	eb4c 060a 	adc.w	r6, ip, sl
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4619      	mov	r1, r3
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	f04f 0400 	mov.w	r4, #0
 8003634:	0094      	lsls	r4, r2, #2
 8003636:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800363a:	008b      	lsls	r3, r1, #2
 800363c:	461a      	mov	r2, r3
 800363e:	4623      	mov	r3, r4
 8003640:	4628      	mov	r0, r5
 8003642:	4631      	mov	r1, r6
 8003644:	f7fc fe1c 	bl	8000280 <__aeabi_uldivmod>
 8003648:	4603      	mov	r3, r0
 800364a:	460c      	mov	r4, r1
 800364c:	461a      	mov	r2, r3
 800364e:	4b77      	ldr	r3, [pc, #476]	; (800382c <UART_SetConfig+0x6f4>)
 8003650:	fba3 1302 	umull	r1, r3, r3, r2
 8003654:	095b      	lsrs	r3, r3, #5
 8003656:	2164      	movs	r1, #100	; 0x64
 8003658:	fb01 f303 	mul.w	r3, r1, r3
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	3332      	adds	r3, #50	; 0x32
 8003662:	4a72      	ldr	r2, [pc, #456]	; (800382c <UART_SetConfig+0x6f4>)
 8003664:	fba2 2303 	umull	r2, r3, r2, r3
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	f003 020f 	and.w	r2, r3, #15
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4442      	add	r2, r8
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	e0d0      	b.n	800381a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003678:	f7fe fc26 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 800367c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	469a      	mov	sl, r3
 8003682:	f04f 0b00 	mov.w	fp, #0
 8003686:	46d0      	mov	r8, sl
 8003688:	46d9      	mov	r9, fp
 800368a:	eb18 0308 	adds.w	r3, r8, r8
 800368e:	eb49 0409 	adc.w	r4, r9, r9
 8003692:	4698      	mov	r8, r3
 8003694:	46a1      	mov	r9, r4
 8003696:	eb18 080a 	adds.w	r8, r8, sl
 800369a:	eb49 090b 	adc.w	r9, r9, fp
 800369e:	f04f 0100 	mov.w	r1, #0
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036b2:	4688      	mov	r8, r1
 80036b4:	4691      	mov	r9, r2
 80036b6:	eb1a 0508 	adds.w	r5, sl, r8
 80036ba:	eb4b 0609 	adc.w	r6, fp, r9
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4619      	mov	r1, r3
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	f04f 0400 	mov.w	r4, #0
 80036d0:	0094      	lsls	r4, r2, #2
 80036d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036d6:	008b      	lsls	r3, r1, #2
 80036d8:	461a      	mov	r2, r3
 80036da:	4623      	mov	r3, r4
 80036dc:	4628      	mov	r0, r5
 80036de:	4631      	mov	r1, r6
 80036e0:	f7fc fdce 	bl	8000280 <__aeabi_uldivmod>
 80036e4:	4603      	mov	r3, r0
 80036e6:	460c      	mov	r4, r1
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b50      	ldr	r3, [pc, #320]	; (800382c <UART_SetConfig+0x6f4>)
 80036ec:	fba3 2302 	umull	r2, r3, r3, r2
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	469b      	mov	fp, r3
 80036fa:	f04f 0c00 	mov.w	ip, #0
 80036fe:	46d9      	mov	r9, fp
 8003700:	46e2      	mov	sl, ip
 8003702:	eb19 0309 	adds.w	r3, r9, r9
 8003706:	eb4a 040a 	adc.w	r4, sl, sl
 800370a:	4699      	mov	r9, r3
 800370c:	46a2      	mov	sl, r4
 800370e:	eb19 090b 	adds.w	r9, r9, fp
 8003712:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003722:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003726:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800372a:	4689      	mov	r9, r1
 800372c:	4692      	mov	sl, r2
 800372e:	eb1b 0509 	adds.w	r5, fp, r9
 8003732:	eb4c 060a 	adc.w	r6, ip, sl
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	4619      	mov	r1, r3
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	f04f 0400 	mov.w	r4, #0
 8003748:	0094      	lsls	r4, r2, #2
 800374a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800374e:	008b      	lsls	r3, r1, #2
 8003750:	461a      	mov	r2, r3
 8003752:	4623      	mov	r3, r4
 8003754:	4628      	mov	r0, r5
 8003756:	4631      	mov	r1, r6
 8003758:	f7fc fd92 	bl	8000280 <__aeabi_uldivmod>
 800375c:	4603      	mov	r3, r0
 800375e:	460c      	mov	r4, r1
 8003760:	461a      	mov	r2, r3
 8003762:	4b32      	ldr	r3, [pc, #200]	; (800382c <UART_SetConfig+0x6f4>)
 8003764:	fba3 1302 	umull	r1, r3, r3, r2
 8003768:	095b      	lsrs	r3, r3, #5
 800376a:	2164      	movs	r1, #100	; 0x64
 800376c:	fb01 f303 	mul.w	r3, r1, r3
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	3332      	adds	r3, #50	; 0x32
 8003776:	4a2d      	ldr	r2, [pc, #180]	; (800382c <UART_SetConfig+0x6f4>)
 8003778:	fba2 2303 	umull	r2, r3, r2, r3
 800377c:	095b      	lsrs	r3, r3, #5
 800377e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003782:	4498      	add	r8, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	469b      	mov	fp, r3
 8003788:	f04f 0c00 	mov.w	ip, #0
 800378c:	46d9      	mov	r9, fp
 800378e:	46e2      	mov	sl, ip
 8003790:	eb19 0309 	adds.w	r3, r9, r9
 8003794:	eb4a 040a 	adc.w	r4, sl, sl
 8003798:	4699      	mov	r9, r3
 800379a:	46a2      	mov	sl, r4
 800379c:	eb19 090b 	adds.w	r9, r9, fp
 80037a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037a4:	f04f 0100 	mov.w	r1, #0
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037b8:	4689      	mov	r9, r1
 80037ba:	4692      	mov	sl, r2
 80037bc:	eb1b 0509 	adds.w	r5, fp, r9
 80037c0:	eb4c 060a 	adc.w	r6, ip, sl
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4619      	mov	r1, r3
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	f04f 0400 	mov.w	r4, #0
 80037d6:	0094      	lsls	r4, r2, #2
 80037d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037dc:	008b      	lsls	r3, r1, #2
 80037de:	461a      	mov	r2, r3
 80037e0:	4623      	mov	r3, r4
 80037e2:	4628      	mov	r0, r5
 80037e4:	4631      	mov	r1, r6
 80037e6:	f7fc fd4b 	bl	8000280 <__aeabi_uldivmod>
 80037ea:	4603      	mov	r3, r0
 80037ec:	460c      	mov	r4, r1
 80037ee:	461a      	mov	r2, r3
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <UART_SetConfig+0x6f4>)
 80037f2:	fba3 1302 	umull	r1, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2164      	movs	r1, #100	; 0x64
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	3332      	adds	r3, #50	; 0x32
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <UART_SetConfig+0x6f4>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4442      	add	r2, r8
 8003816:	609a      	str	r2, [r3, #8]
}
 8003818:	e7ff      	b.n	800381a <UART_SetConfig+0x6e2>
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003824:	40011000 	.word	0x40011000
 8003828:	40011400 	.word	0x40011400
 800382c:	51eb851f 	.word	0x51eb851f

08003830 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003838:	4b22      	ldr	r3, [pc, #136]	; (80038c4 <WIZCHIP_READ+0x94>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800383e:	4b21      	ldr	r3, [pc, #132]	; (80038c4 <WIZCHIP_READ+0x94>)
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003844:	4b1f      	ldr	r3, [pc, #124]	; (80038c4 <WIZCHIP_READ+0x94>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <WIZCHIP_READ+0x24>
 800384c:	4b1d      	ldr	r3, [pc, #116]	; (80038c4 <WIZCHIP_READ+0x94>)
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	2b00      	cmp	r3, #0
 8003852:	d114      	bne.n	800387e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <WIZCHIP_READ+0x94>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	0c12      	lsrs	r2, r2, #16
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	4610      	mov	r0, r2
 8003860:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <WIZCHIP_READ+0x94>)
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	0a12      	lsrs	r2, r2, #8
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	4610      	mov	r0, r2
 800386e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003870:	4b14      	ldr	r3, [pc, #80]	; (80038c4 <WIZCHIP_READ+0x94>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	4610      	mov	r0, r2
 800387a:	4798      	blx	r3
 800387c:	e011      	b.n	80038a2 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	b2db      	uxtb	r3, r3
 8003884:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	b2db      	uxtb	r3, r3
 800388c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	b2db      	uxtb	r3, r3
 8003892:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <WIZCHIP_READ+0x94>)
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	f107 020c 	add.w	r2, r7, #12
 800389c:	2103      	movs	r1, #3
 800389e:	4610      	mov	r0, r2
 80038a0:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80038a2:	4b08      	ldr	r3, [pc, #32]	; (80038c4 <WIZCHIP_READ+0x94>)
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	4798      	blx	r3
 80038a8:	4603      	mov	r3, r0
 80038aa:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <WIZCHIP_READ+0x94>)
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <WIZCHIP_READ+0x94>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	4798      	blx	r3
   return ret;
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000010 	.word	0x20000010

080038c8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b084      	sub	sp, #16
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80038d4:	4b22      	ldr	r3, [pc, #136]	; (8003960 <WIZCHIP_WRITE+0x98>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80038da:	4b21      	ldr	r3, [pc, #132]	; (8003960 <WIZCHIP_WRITE+0x98>)
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80038e8:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <WIZCHIP_WRITE+0x98>)
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d119      	bne.n	8003924 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <WIZCHIP_WRITE+0x98>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	0c12      	lsrs	r2, r2, #16
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	4610      	mov	r0, r2
 80038fc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80038fe:	4b18      	ldr	r3, [pc, #96]	; (8003960 <WIZCHIP_WRITE+0x98>)
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	0a12      	lsrs	r2, r2, #8
 8003906:	b2d2      	uxtb	r2, r2
 8003908:	4610      	mov	r0, r2
 800390a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <WIZCHIP_WRITE+0x98>)
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	4610      	mov	r0, r2
 8003916:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <WIZCHIP_WRITE+0x98>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	4610      	mov	r0, r2
 8003920:	4798      	blx	r3
 8003922:	e013      	b.n	800394c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	0c1b      	lsrs	r3, r3, #16
 8003928:	b2db      	uxtb	r3, r3
 800392a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b2db      	uxtb	r3, r3
 8003932:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800393a:	78fb      	ldrb	r3, [r7, #3]
 800393c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <WIZCHIP_WRITE+0x98>)
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	f107 020c 	add.w	r2, r7, #12
 8003946:	2104      	movs	r1, #4
 8003948:	4610      	mov	r0, r2
 800394a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800394c:	4b04      	ldr	r3, [pc, #16]	; (8003960 <WIZCHIP_WRITE+0x98>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003952:	4b03      	ldr	r3, [pc, #12]	; (8003960 <WIZCHIP_WRITE+0x98>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4798      	blx	r3
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000010 	.word	0x20000010

08003964 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b087      	sub	sp, #28
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003972:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003978:	4b29      	ldr	r3, [pc, #164]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800397e:	4b28      	ldr	r3, [pc, #160]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <WIZCHIP_READ_BUF+0x2a>
 8003986:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	2b00      	cmp	r3, #0
 800398c:	d126      	bne.n	80039dc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800398e:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	0c12      	lsrs	r2, r2, #16
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	4610      	mov	r0, r2
 800399a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800399c:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	0a12      	lsrs	r2, r2, #8
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	4610      	mov	r0, r2
 80039a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80039aa:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	4610      	mov	r0, r2
 80039b4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	82fb      	strh	r3, [r7, #22]
 80039ba:	e00a      	b.n	80039d2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	8afa      	ldrh	r2, [r7, #22]
 80039c2:	68b9      	ldr	r1, [r7, #8]
 80039c4:	188c      	adds	r4, r1, r2
 80039c6:	4798      	blx	r3
 80039c8:	4603      	mov	r3, r0
 80039ca:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80039cc:	8afb      	ldrh	r3, [r7, #22]
 80039ce:	3301      	adds	r3, #1
 80039d0:	82fb      	strh	r3, [r7, #22]
 80039d2:	8afa      	ldrh	r2, [r7, #22]
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d3f0      	bcc.n	80039bc <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80039da:	e017      	b.n	8003a0c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	0c1b      	lsrs	r3, r3, #16
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f107 0210 	add.w	r2, r7, #16
 80039fa:	2103      	movs	r1, #3
 80039fc:	4610      	mov	r0, r2
 80039fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003a00:	4b07      	ldr	r3, [pc, #28]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	88fa      	ldrh	r2, [r7, #6]
 8003a06:	4611      	mov	r1, r2
 8003a08:	68b8      	ldr	r0, [r7, #8]
 8003a0a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003a0c:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003a12:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <WIZCHIP_READ_BUF+0xbc>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	4798      	blx	r3
}
 8003a18:	bf00      	nop
 8003a1a:	371c      	adds	r7, #28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd90      	pop	{r4, r7, pc}
 8003a20:	20000010 	.word	0x20000010

08003a24 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003a32:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003a38:	4b29      	ldr	r3, [pc, #164]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f043 0304 	orr.w	r3, r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003a46:	4b26      	ldr	r3, [pc, #152]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d126      	bne.n	8003a9c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003a4e:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	0c12      	lsrs	r2, r2, #16
 8003a56:	b2d2      	uxtb	r2, r2
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003a5c:	4b20      	ldr	r3, [pc, #128]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	0a12      	lsrs	r2, r2, #8
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	4610      	mov	r0, r2
 8003a68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	4610      	mov	r0, r2
 8003a74:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	82fb      	strh	r3, [r7, #22]
 8003a7a:	e00a      	b.n	8003a92 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003a7c:	4b18      	ldr	r3, [pc, #96]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	8afa      	ldrh	r2, [r7, #22]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	440a      	add	r2, r1
 8003a86:	7812      	ldrb	r2, [r2, #0]
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003a8c:	8afb      	ldrh	r3, [r7, #22]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	82fb      	strh	r3, [r7, #22]
 8003a92:	8afa      	ldrh	r2, [r7, #22]
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d3f0      	bcc.n	8003a7c <WIZCHIP_WRITE_BUF+0x58>
 8003a9a:	e017      	b.n	8003acc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	0c1b      	lsrs	r3, r3, #16
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	0a1b      	lsrs	r3, r3, #8
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f107 0210 	add.w	r2, r7, #16
 8003aba:	2103      	movs	r1, #3
 8003abc:	4610      	mov	r0, r2
 8003abe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	88fa      	ldrh	r2, [r7, #6]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	68b8      	ldr	r0, [r7, #8]
 8003aca:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003acc:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003ad2:	4b03      	ldr	r3, [pc, #12]	; (8003ae0 <WIZCHIP_WRITE_BUF+0xbc>)
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	4798      	blx	r3
}
 8003ad8:	bf00      	nop
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	20000010 	.word	0x20000010

08003ae4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003ae4:	b590      	push	{r4, r7, lr}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	81fb      	strh	r3, [r7, #14]
 8003af2:	2300      	movs	r3, #0
 8003af4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	3301      	adds	r3, #1
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fe94 	bl	8003830 <WIZCHIP_READ>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003b0c:	89bb      	ldrh	r3, [r7, #12]
 8003b0e:	021b      	lsls	r3, r3, #8
 8003b10:	b29c      	uxth	r4, r3
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	3301      	adds	r3, #1
 8003b18:	00db      	lsls	r3, r3, #3
 8003b1a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fe86 	bl	8003830 <WIZCHIP_READ>
 8003b24:	4603      	mov	r3, r0
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	4423      	add	r3, r4
 8003b2a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003b2c:	89bb      	ldrh	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d01a      	beq.n	8003b68 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	3301      	adds	r3, #1
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fe76 	bl	8003830 <WIZCHIP_READ>
 8003b44:	4603      	mov	r3, r0
 8003b46:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003b48:	89fb      	ldrh	r3, [r7, #14]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	b29c      	uxth	r4, r3
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	3301      	adds	r3, #1
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff fe68 	bl	8003830 <WIZCHIP_READ>
 8003b60:	4603      	mov	r3, r0
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	4423      	add	r3, r4
 8003b66:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003b68:	89fa      	ldrh	r2, [r7, #14]
 8003b6a:	89bb      	ldrh	r3, [r7, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d1c2      	bne.n	8003af6 <getSn_TX_FSR+0x12>
   return val;
 8003b70:	89fb      	ldrh	r3, [r7, #14]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd90      	pop	{r4, r7, pc}

08003b7a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003b7a:	b590      	push	{r4, r7, lr}
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	81fb      	strh	r3, [r7, #14]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	3301      	adds	r3, #1
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fe49 	bl	8003830 <WIZCHIP_READ>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003ba2:	89bb      	ldrh	r3, [r7, #12]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	b29c      	uxth	r4, r3
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	3301      	adds	r3, #1
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fe3b 	bl	8003830 <WIZCHIP_READ>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4423      	add	r3, r4
 8003bc0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003bc2:	89bb      	ldrh	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01a      	beq.n	8003bfe <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	3301      	adds	r3, #1
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fe2b 	bl	8003830 <WIZCHIP_READ>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003bde:	89fb      	ldrh	r3, [r7, #14]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	b29c      	uxth	r4, r3
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	3301      	adds	r3, #1
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7ff fe1d 	bl	8003830 <WIZCHIP_READ>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	4423      	add	r3, r4
 8003bfc:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003bfe:	89fa      	ldrh	r2, [r7, #14]
 8003c00:	89bb      	ldrh	r3, [r7, #12]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d1c2      	bne.n	8003b8c <getSn_RX_RSR+0x12>
   return val;
 8003c06:	89fb      	ldrh	r3, [r7, #14]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd90      	pop	{r4, r7, pc}

08003c10 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	6039      	str	r1, [r7, #0]
 8003c1a:	71fb      	strb	r3, [r7, #7]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003c28:	88bb      	ldrh	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d048      	beq.n	8003cc0 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	3301      	adds	r3, #1
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fdf8 	bl	8003830 <WIZCHIP_READ>
 8003c40:	4603      	mov	r3, r0
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	021b      	lsls	r3, r3, #8
 8003c46:	b29c      	uxth	r4, r3
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff fdeb 	bl	8003830 <WIZCHIP_READ>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	4423      	add	r3, r4
 8003c60:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003c62:	89fb      	ldrh	r3, [r7, #14]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	79fa      	ldrb	r2, [r7, #7]
 8003c68:	0092      	lsls	r2, r2, #2
 8003c6a:	3202      	adds	r2, #2
 8003c6c:	00d2      	lsls	r2, r2, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003c72:	88bb      	ldrh	r3, [r7, #4]
 8003c74:	461a      	mov	r2, r3
 8003c76:	6839      	ldr	r1, [r7, #0]
 8003c78:	68b8      	ldr	r0, [r7, #8]
 8003c7a:	f7ff fed3 	bl	8003a24 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003c7e:	89fa      	ldrh	r2, [r7, #14]
 8003c80:	88bb      	ldrh	r3, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c92:	461a      	mov	r2, r3
 8003c94:	89fb      	ldrh	r3, [r7, #14]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	4610      	mov	r0, r2
 8003ca0:	f7ff fe12 	bl	80038c8 <WIZCHIP_WRITE>
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	3301      	adds	r3, #1
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	89fb      	ldrh	r3, [r7, #14]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f7ff fe05 	bl	80038c8 <WIZCHIP_WRITE>
 8003cbe:	e000      	b.n	8003cc2 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003cc0:	bf00      	nop
}
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd90      	pop	{r4, r7, pc}

08003cc8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003cc8:	b590      	push	{r4, r7, lr}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	71fb      	strb	r3, [r7, #7]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003ce0:	88bb      	ldrh	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d048      	beq.n	8003d78 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	3301      	adds	r3, #1
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fd9c 	bl	8003830 <WIZCHIP_READ>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	b29c      	uxth	r4, r3
 8003d00:	79fb      	ldrb	r3, [r7, #7]
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	3301      	adds	r3, #1
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fd8f 	bl	8003830 <WIZCHIP_READ>
 8003d12:	4603      	mov	r3, r0
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4423      	add	r3, r4
 8003d18:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003d1a:	89fb      	ldrh	r3, [r7, #14]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	79fa      	ldrb	r2, [r7, #7]
 8003d20:	0092      	lsls	r2, r2, #2
 8003d22:	3203      	adds	r2, #3
 8003d24:	00d2      	lsls	r2, r2, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003d2a:	88bb      	ldrh	r3, [r7, #4]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6839      	ldr	r1, [r7, #0]
 8003d30:	68b8      	ldr	r0, [r7, #8]
 8003d32:	f7ff fe17 	bl	8003964 <WIZCHIP_READ_BUF>
   ptr += len;
 8003d36:	89fa      	ldrh	r2, [r7, #14]
 8003d38:	88bb      	ldrh	r3, [r7, #4]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	3301      	adds	r3, #1
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	89fb      	ldrh	r3, [r7, #14]
 8003d4e:	0a1b      	lsrs	r3, r3, #8
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	4619      	mov	r1, r3
 8003d56:	4610      	mov	r0, r2
 8003d58:	f7ff fdb6 	bl	80038c8 <WIZCHIP_WRITE>
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	3301      	adds	r3, #1
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003d68:	461a      	mov	r2, r3
 8003d6a:	89fb      	ldrh	r3, [r7, #14]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7ff fda9 	bl	80038c8 <WIZCHIP_WRITE>
 8003d76:	e000      	b.n	8003d7a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8003d78:	bf00      	nop
}
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd90      	pop	{r4, r7, pc}

08003d80 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	460a      	mov	r2, r1
 8003d8a:	71fb      	strb	r3, [r7, #7]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8003d94:	79fb      	ldrb	r3, [r7, #7]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	3301      	adds	r3, #1
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fd45 	bl	8003830 <WIZCHIP_READ>
 8003da6:	4603      	mov	r3, r0
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	b29c      	uxth	r4, r3
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	3301      	adds	r3, #1
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fd38 	bl	8003830 <WIZCHIP_READ>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	4423      	add	r3, r4
 8003dc6:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8003dc8:	89fa      	ldrh	r2, [r7, #14]
 8003dca:	88bb      	ldrh	r3, [r7, #4]
 8003dcc:	4413      	add	r3, r2
 8003dce:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003ddc:	461a      	mov	r2, r3
 8003dde:	89fb      	ldrh	r3, [r7, #14]
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7ff fd6d 	bl	80038c8 <WIZCHIP_WRITE>
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	3301      	adds	r3, #1
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	89fb      	ldrh	r3, [r7, #14]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	4619      	mov	r1, r3
 8003e02:	4610      	mov	r0, r2
 8003e04:	f7ff fd60 	bl	80038c8 <WIZCHIP_WRITE>
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd90      	pop	{r4, r7, pc}

08003e10 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003e10:	b590      	push	{r4, r7, lr}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4604      	mov	r4, r0
 8003e18:	4608      	mov	r0, r1
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	4623      	mov	r3, r4
 8003e20:	71fb      	strb	r3, [r7, #7]
 8003e22:	4603      	mov	r3, r0
 8003e24:	71bb      	strb	r3, [r7, #6]
 8003e26:	460b      	mov	r3, r1
 8003e28:	80bb      	strh	r3, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d902      	bls.n	8003e3a <socket+0x2a>
 8003e34:	f04f 33ff 	mov.w	r3, #4294967295
 8003e38:	e0f1      	b.n	800401e <socket+0x20e>
	switch(protocol)
 8003e3a:	79bb      	ldrb	r3, [r7, #6]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d004      	beq.n	8003e4a <socket+0x3a>
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	db10      	blt.n	8003e66 <socket+0x56>
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	dc0e      	bgt.n	8003e66 <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003e48:	e010      	b.n	8003e6c <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 8003e4a:	f107 030c 	add.w	r3, r7, #12
 8003e4e:	2204      	movs	r2, #4
 8003e50:	4619      	mov	r1, r3
 8003e52:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003e56:	f7ff fd85 	bl	8003964 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d105      	bne.n	8003e6c <socket+0x5c>
 8003e60:	f06f 0302 	mvn.w	r3, #2
 8003e64:	e0db      	b.n	800401e <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003e66:	f06f 0304 	mvn.w	r3, #4
 8003e6a:	e0d8      	b.n	800401e <socket+0x20e>
         break;
 8003e6c:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003e6e:	78fb      	ldrb	r3, [r7, #3]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <socket+0x6e>
 8003e78:	f06f 0305 	mvn.w	r3, #5
 8003e7c:	e0cf      	b.n	800401e <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d025      	beq.n	8003ed0 <socket+0xc0>
	{
   	switch(protocol)
 8003e84:	79bb      	ldrb	r3, [r7, #6]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d002      	beq.n	8003e90 <socket+0x80>
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d008      	beq.n	8003ea0 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003e8e:	e024      	b.n	8003eda <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d11c      	bne.n	8003ed4 <socket+0xc4>
 8003e9a:	f06f 0305 	mvn.w	r3, #5
 8003e9e:	e0be      	b.n	800401e <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	f003 0320 	and.w	r3, r3, #32
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d006      	beq.n	8003eb8 <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003eaa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	db02      	blt.n	8003eb8 <socket+0xa8>
 8003eb2:	f06f 0305 	mvn.w	r3, #5
 8003eb6:	e0b2      	b.n	800401e <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	db06      	blt.n	8003ed8 <socket+0xc8>
 8003eca:	f06f 0305 	mvn.w	r3, #5
 8003ece:	e0a6      	b.n	800401e <socket+0x20e>
   	}
   }
 8003ed0:	bf00      	nop
 8003ed2:	e002      	b.n	8003eda <socket+0xca>
   	      break;
 8003ed4:	bf00      	nop
 8003ed6:	e000      	b.n	8003eda <socket+0xca>
   	      break;
 8003ed8:	bf00      	nop
	close(sn);
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f8ad 	bl	800403c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4618      	mov	r0, r3
 8003eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef0:	f023 030f 	bic.w	r3, r3, #15
 8003ef4:	b25a      	sxtb	r2, r3
 8003ef6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	b25b      	sxtb	r3, r3
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	4619      	mov	r1, r3
 8003f02:	f7ff fce1 	bl	80038c8 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003f06:	88bb      	ldrh	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d110      	bne.n	8003f2e <socket+0x11e>
	{
	   port = sock_any_port++;
 8003f0c:	4b46      	ldr	r3, [pc, #280]	; (8004028 <socket+0x218>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	1c5a      	adds	r2, r3, #1
 8003f12:	b291      	uxth	r1, r2
 8003f14:	4a44      	ldr	r2, [pc, #272]	; (8004028 <socket+0x218>)
 8003f16:	8011      	strh	r1, [r2, #0]
 8003f18:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003f1a:	4b43      	ldr	r3, [pc, #268]	; (8004028 <socket+0x218>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d103      	bne.n	8003f2e <socket+0x11e>
 8003f26:	4b40      	ldr	r3, [pc, #256]	; (8004028 <socket+0x218>)
 8003f28:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003f2c:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	3301      	adds	r3, #1
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	88bb      	ldrh	r3, [r7, #4]
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f7ff fcbe 	bl	80038c8 <WIZCHIP_WRITE>
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	3301      	adds	r3, #1
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f58:	461a      	mov	r2, r3
 8003f5a:	88bb      	ldrh	r3, [r7, #4]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7ff fcb1 	bl	80038c8 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f72:	2101      	movs	r1, #1
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fca7 	bl	80038c8 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003f7a:	bf00      	nop
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	3301      	adds	r3, #1
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fc51 	bl	8003830 <WIZCHIP_READ>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1f3      	bne.n	8003f7c <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	2201      	movs	r2, #1
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	b21b      	sxth	r3, r3
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	b21a      	sxth	r2, r3
 8003fa2:	4b22      	ldr	r3, [pc, #136]	; (800402c <socket+0x21c>)
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b21b      	sxth	r3, r3
 8003fa8:	4013      	ands	r3, r2
 8003faa:	b21b      	sxth	r3, r3
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	4b1f      	ldr	r3, [pc, #124]	; (800402c <socket+0x21c>)
 8003fb0:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	f003 0201 	and.w	r2, r3, #1
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	b21a      	sxth	r2, r3
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <socket+0x21c>)
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b21b      	sxth	r3, r3
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	b21b      	sxth	r3, r3
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	4b17      	ldr	r3, [pc, #92]	; (800402c <socket+0x21c>)
 8003fce:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	b21b      	sxth	r3, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	b21a      	sxth	r2, r3
 8003fde:	4b14      	ldr	r3, [pc, #80]	; (8004030 <socket+0x220>)
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b21b      	sxth	r3, r3
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	b21b      	sxth	r3, r3
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	4b11      	ldr	r3, [pc, #68]	; (8004030 <socket+0x220>)
 8003fec:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003fee:	79fb      	ldrb	r3, [r7, #7]
 8003ff0:	4a10      	ldr	r2, [pc, #64]	; (8004034 <socket+0x224>)
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	4a0f      	ldr	r2, [pc, #60]	; (8004038 <socket+0x228>)
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004000:	bf00      	nop
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	3301      	adds	r3, #1
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fc0e 	bl	8003830 <WIZCHIP_READ>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f3      	beq.n	8004002 <socket+0x1f2>
   return (int8_t)sn;
 800401a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	bd90      	pop	{r4, r7, pc}
 8004026:	bf00      	nop
 8004028:	2000000e 	.word	0x2000000e
 800402c:	200000bc 	.word	0x200000bc
 8004030:	200000be 	.word	0x200000be
 8004034:	200000c0 	.word	0x200000c0
 8004038:	200000d0 	.word	0x200000d0

0800403c <close>:

int8_t close(uint8_t sn)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d902      	bls.n	8004052 <close+0x16>
 800404c:	f04f 33ff 	mov.w	r3, #4294967295
 8004050:	e055      	b.n	80040fe <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	3301      	adds	r3, #1
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800405e:	2110      	movs	r1, #16
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fc31 	bl	80038c8 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004066:	bf00      	nop
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	3301      	adds	r3, #1
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fbdb 	bl	8003830 <WIZCHIP_READ>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f3      	bne.n	8004068 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	3301      	adds	r3, #1
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800408c:	211f      	movs	r1, #31
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fc1a 	bl	80038c8 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	2201      	movs	r2, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	b21b      	sxth	r3, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	b21a      	sxth	r2, r3
 80040a2:	4b19      	ldr	r3, [pc, #100]	; (8004108 <close+0xcc>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b21b      	sxth	r3, r3
 80040a8:	4013      	ands	r3, r2
 80040aa:	b21b      	sxth	r3, r3
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4b16      	ldr	r3, [pc, #88]	; (8004108 <close+0xcc>)
 80040b0:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	2201      	movs	r2, #1
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	b21b      	sxth	r3, r3
 80040bc:	43db      	mvns	r3, r3
 80040be:	b21a      	sxth	r2, r3
 80040c0:	4b12      	ldr	r3, [pc, #72]	; (800410c <close+0xd0>)
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b21b      	sxth	r3, r3
 80040c6:	4013      	ands	r3, r2
 80040c8:	b21b      	sxth	r3, r3
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <close+0xd0>)
 80040ce:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80040d0:	79fb      	ldrb	r3, [r7, #7]
 80040d2:	4a0f      	ldr	r2, [pc, #60]	; (8004110 <close+0xd4>)
 80040d4:	2100      	movs	r1, #0
 80040d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <close+0xd8>)
 80040de:	2100      	movs	r1, #0
 80040e0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80040e2:	bf00      	nop
 80040e4:	79fb      	ldrb	r3, [r7, #7]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3301      	adds	r3, #1
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff fb9d 	bl	8003830 <WIZCHIP_READ>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f3      	bne.n	80040e4 <close+0xa8>
	return SOCK_OK;
 80040fc:	2301      	movs	r3, #1
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	200000bc 	.word	0x200000bc
 800410c:	200000be 	.word	0x200000be
 8004110:	200000c0 	.word	0x200000c0
 8004114:	200000d0 	.word	0x200000d0

08004118 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	4603      	mov	r3, r0
 8004124:	73fb      	strb	r3, [r7, #15]
 8004126:	4613      	mov	r3, r2
 8004128:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d902      	bls.n	800413e <sendto+0x26>
 8004138:	f04f 33ff 	mov.w	r3, #4294967295
 800413c:	e11b      	b.n	8004376 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	3301      	adds	r3, #1
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4618      	mov	r0, r3
 8004148:	f7ff fb72 	bl	8003830 <WIZCHIP_READ>
 800414c:	4603      	mov	r3, r0
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	3b02      	subs	r3, #2
 8004154:	2b02      	cmp	r3, #2
 8004156:	d902      	bls.n	800415e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004158:	f06f 0304 	mvn.w	r3, #4
 800415c:	e10b      	b.n	8004376 <sendto+0x25e>
         break;
 800415e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8004160:	89bb      	ldrh	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d102      	bne.n	800416c <sendto+0x54>
 8004166:	f06f 030d 	mvn.w	r3, #13
 800416a:	e104      	b.n	8004376 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	3201      	adds	r2, #1
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	4413      	add	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	3202      	adds	r2, #2
 8004188:	7812      	ldrb	r2, [r2, #0]
 800418a:	4413      	add	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	3203      	adds	r2, #3
 8004196:	7812      	ldrb	r2, [r2, #0]
 8004198:	4413      	add	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10e      	bne.n	80041c0 <sendto+0xa8>
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	3301      	adds	r3, #1
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff fb40 	bl	8003830 <WIZCHIP_READ>
 80041b0:	4603      	mov	r3, r0
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d002      	beq.n	80041c0 <sendto+0xa8>
 80041ba:	f06f 030b 	mvn.w	r3, #11
 80041be:	e0da      	b.n	8004376 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80041c0:	8c3b      	ldrh	r3, [r7, #32]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10e      	bne.n	80041e4 <sendto+0xcc>
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	3301      	adds	r3, #1
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fb2e 	bl	8003830 <WIZCHIP_READ>
 80041d4:	4603      	mov	r3, r0
 80041d6:	f003 0304 	and.w	r3, r3, #4
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d002      	beq.n	80041e4 <sendto+0xcc>
 80041de:	f06f 030a 	mvn.w	r3, #10
 80041e2:	e0c8      	b.n	8004376 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	3301      	adds	r3, #1
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fb1d 	bl	8003830 <WIZCHIP_READ>
 80041f6:	4603      	mov	r3, r0
 80041f8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
 80041fc:	2b42      	cmp	r3, #66	; 0x42
 80041fe:	d008      	beq.n	8004212 <sendto+0xfa>
 8004200:	7dfb      	ldrb	r3, [r7, #23]
 8004202:	2b22      	cmp	r3, #34	; 0x22
 8004204:	d005      	beq.n	8004212 <sendto+0xfa>
 8004206:	7dfb      	ldrb	r3, [r7, #23]
 8004208:	2b32      	cmp	r3, #50	; 0x32
 800420a:	d002      	beq.n	8004212 <sendto+0xfa>
 800420c:	f06f 0306 	mvn.w	r3, #6
 8004210:	e0b1      	b.n	8004376 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	3301      	adds	r3, #1
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800421e:	2204      	movs	r2, #4
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff fbfe 	bl	8003a24 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	3301      	adds	r3, #1
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004234:	461a      	mov	r2, r3
 8004236:	8c3b      	ldrh	r3, [r7, #32]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	b29b      	uxth	r3, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f7ff fb41 	bl	80038c8 <WIZCHIP_WRITE>
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	3301      	adds	r3, #1
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004252:	461a      	mov	r2, r3
 8004254:	8c3b      	ldrh	r3, [r7, #32]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7ff fb34 	bl	80038c8 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	3301      	adds	r3, #1
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800426c:	4618      	mov	r0, r3
 800426e:	f7ff fadf 	bl	8003830 <WIZCHIP_READ>
 8004272:	4603      	mov	r3, r0
 8004274:	b29b      	uxth	r3, r3
 8004276:	029b      	lsls	r3, r3, #10
 8004278:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800427a:	89ba      	ldrh	r2, [r7, #12]
 800427c:	8abb      	ldrh	r3, [r7, #20]
 800427e:	429a      	cmp	r2, r3
 8004280:	d901      	bls.n	8004286 <sendto+0x16e>
 8004282:	8abb      	ldrh	r3, [r7, #20]
 8004284:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	4618      	mov	r0, r3
 800428a:	f7ff fc2b 	bl	8003ae4 <getSn_TX_FSR>
 800428e:	4603      	mov	r3, r0
 8004290:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	3301      	adds	r3, #1
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff fac6 	bl	8003830 <WIZCHIP_READ>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <sendto+0x198>
 80042aa:	f06f 0303 	mvn.w	r3, #3
 80042ae:	e062      	b.n	8004376 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80042b0:	4b33      	ldr	r3, [pc, #204]	; (8004380 <sendto+0x268>)
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	461a      	mov	r2, r3
 80042b6:	7bfb      	ldrb	r3, [r7, #15]
 80042b8:	fa42 f303 	asr.w	r3, r2, r3
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d005      	beq.n	80042d0 <sendto+0x1b8>
 80042c4:	89ba      	ldrh	r2, [r7, #12]
 80042c6:	8abb      	ldrh	r3, [r7, #20]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d901      	bls.n	80042d0 <sendto+0x1b8>
 80042cc:	2300      	movs	r3, #0
 80042ce:	e052      	b.n	8004376 <sendto+0x25e>
      if(len <= freesize) break;
 80042d0:	89ba      	ldrh	r2, [r7, #12]
 80042d2:	8abb      	ldrh	r3, [r7, #20]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d900      	bls.n	80042da <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80042d8:	e7d5      	b.n	8004286 <sendto+0x16e>
      if(len <= freesize) break;
 80042da:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80042dc:	89ba      	ldrh	r2, [r7, #12]
 80042de:	7bfb      	ldrb	r3, [r7, #15]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff fc94 	bl	8003c10 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	3301      	adds	r3, #1
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80042f4:	2120      	movs	r1, #32
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fae6 	bl	80038c8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80042fc:	bf00      	nop
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	3301      	adds	r3, #1
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff fa90 	bl	8003830 <WIZCHIP_READ>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1f3      	bne.n	80042fe <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	3301      	adds	r3, #1
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fa84 	bl	8003830 <WIZCHIP_READ>
 8004328:	4603      	mov	r3, r0
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	f003 0310 	and.w	r3, r3, #16
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00c      	beq.n	8004354 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800433a:	7bfb      	ldrb	r3, [r7, #15]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	3301      	adds	r3, #1
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004346:	2110      	movs	r1, #16
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fabd 	bl	80038c8 <WIZCHIP_WRITE>
         break;
 800434e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004350:	89bb      	ldrh	r3, [r7, #12]
 8004352:	e010      	b.n	8004376 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	f003 0308 	and.w	r3, r3, #8
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0db      	beq.n	8004316 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	3301      	adds	r3, #1
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800436a:	2108      	movs	r1, #8
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff faab 	bl	80038c8 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8004372:	f06f 030c 	mvn.w	r3, #12
}
 8004376:	4618      	mov	r0, r3
 8004378:	3718      	adds	r7, #24
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	200000bc 	.word	0x200000bc

08004384 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	4603      	mov	r3, r0
 8004390:	73fb      	strb	r3, [r7, #15]
 8004392:	4613      	mov	r3, r2
 8004394:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8004396:	2300      	movs	r3, #0
 8004398:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d902      	bls.n	80043a6 <recvfrom+0x22>
 80043a0:	f04f 33ff 	mov.w	r3, #4294967295
 80043a4:	e1d1      	b.n	800474a <recvfrom+0x3c6>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	3301      	adds	r3, #1
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fa3e 	bl	8003830 <WIZCHIP_READ>
 80043b4:	4603      	mov	r3, r0
 80043b6:	777b      	strb	r3, [r7, #29]
 80043b8:	7f7b      	ldrb	r3, [r7, #29]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	3b02      	subs	r3, #2
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d902      	bls.n	80043ca <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80043c4:	f06f 0304 	mvn.w	r3, #4
 80043c8:	e1bf      	b.n	800474a <recvfrom+0x3c6>
         break;
 80043ca:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80043cc:	89bb      	ldrh	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <recvfrom+0x54>
 80043d2:	f06f 030d 	mvn.w	r3, #13
 80043d6:	e1b8      	b.n	800474a <recvfrom+0x3c6>
   if(sock_remained_size[sn] == 0)
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	4ab1      	ldr	r2, [pc, #708]	; (80046a0 <recvfrom+0x31c>)
 80043dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d128      	bne.n	8004436 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff fbc7 	bl	8003b7a <getSn_RX_RSR>
 80043ec:	4603      	mov	r3, r0
 80043ee:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	3301      	adds	r3, #1
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7ff fa17 	bl	8003830 <WIZCHIP_READ>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <recvfrom+0x8a>
 8004408:	f06f 0303 	mvn.w	r3, #3
 800440c:	e19d      	b.n	800474a <recvfrom+0x3c6>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800440e:	4ba5      	ldr	r3, [pc, #660]	; (80046a4 <recvfrom+0x320>)
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	fa42 f303 	asr.w	r3, r2, r3
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <recvfrom+0xa8>
 8004422:	8bfb      	ldrh	r3, [r7, #30]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <recvfrom+0xa8>
 8004428:	2300      	movs	r3, #0
 800442a:	e18e      	b.n	800474a <recvfrom+0x3c6>
         if(pack_len != 0) break;
 800442c:	8bfb      	ldrh	r3, [r7, #30]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d100      	bne.n	8004434 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8004432:	e7d7      	b.n	80043e4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8004434:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8004436:	7f7b      	ldrb	r3, [r7, #29]
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	2b03      	cmp	r3, #3
 800443e:	f000 80d9 	beq.w	80045f4 <recvfrom+0x270>
 8004442:	2b04      	cmp	r3, #4
 8004444:	d073      	beq.n	800452e <recvfrom+0x1aa>
 8004446:	2b02      	cmp	r3, #2
 8004448:	f040 813c 	bne.w	80046c4 <recvfrom+0x340>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	4a94      	ldr	r2, [pc, #592]	; (80046a0 <recvfrom+0x31c>)
 8004450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d152      	bne.n	80044fe <recvfrom+0x17a>
	      {
   			wiz_recv_data(sn, head, 8);
 8004458:	f107 0114 	add.w	r1, r7, #20
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	2208      	movs	r2, #8
 8004460:	4618      	mov	r0, r3
 8004462:	f7ff fc31 	bl	8003cc8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	3301      	adds	r3, #1
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004472:	2140      	movs	r1, #64	; 0x40
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fa27 	bl	80038c8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800447a:	bf00      	nop
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	3301      	adds	r3, #1
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004488:	4618      	mov	r0, r3
 800448a:	f7ff f9d1 	bl	8003830 <WIZCHIP_READ>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1f3      	bne.n	800447c <recvfrom+0xf8>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8004494:	7d3a      	ldrb	r2, [r7, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3301      	adds	r3, #1
 800449e:	7d7a      	ldrb	r2, [r7, #21]
 80044a0:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3302      	adds	r3, #2
 80044a6:	7dba      	ldrb	r2, [r7, #22]
 80044a8:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3303      	adds	r3, #3
 80044ae:	7dfa      	ldrb	r2, [r7, #23]
 80044b0:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80044b2:	7e3b      	ldrb	r3, [r7, #24]
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	021b      	lsls	r3, r3, #8
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	7e7b      	ldrb	r3, [r7, #25]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	4413      	add	r3, r2
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80044ce:	7eba      	ldrb	r2, [r7, #26]
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	b291      	uxth	r1, r2
 80044d4:	4a72      	ldr	r2, [pc, #456]	; (80046a0 <recvfrom+0x31c>)
 80044d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	4a70      	ldr	r2, [pc, #448]	; (80046a0 <recvfrom+0x31c>)
 80044de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	b299      	uxth	r1, r3
 80044e6:	7efb      	ldrb	r3, [r7, #27]
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	440a      	add	r2, r1
 80044ee:	b291      	uxth	r1, r2
 80044f0:	4a6b      	ldr	r2, [pc, #428]	; (80046a0 <recvfrom+0x31c>)
 80044f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	4a6b      	ldr	r2, [pc, #428]	; (80046a8 <recvfrom+0x324>)
 80044fa:	2180      	movs	r1, #128	; 0x80
 80044fc:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	4a67      	ldr	r2, [pc, #412]	; (80046a0 <recvfrom+0x31c>)
 8004502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004506:	89ba      	ldrh	r2, [r7, #12]
 8004508:	429a      	cmp	r2, r3
 800450a:	d202      	bcs.n	8004512 <recvfrom+0x18e>
 800450c:	89bb      	ldrh	r3, [r7, #12]
 800450e:	83fb      	strh	r3, [r7, #30]
 8004510:	e004      	b.n	800451c <recvfrom+0x198>
			else pack_len = sock_remained_size[sn];
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	4a62      	ldr	r2, [pc, #392]	; (80046a0 <recvfrom+0x31c>)
 8004516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800451a:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800451c:	8bfb      	ldrh	r3, [r7, #30]
 800451e:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8004520:	8bfa      	ldrh	r2, [r7, #30]
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	68b9      	ldr	r1, [r7, #8]
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff fbce 	bl	8003cc8 <wiz_recv_data>
			break;
 800452c:	e0d6      	b.n	80046dc <recvfrom+0x358>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	4a5b      	ldr	r2, [pc, #364]	; (80046a0 <recvfrom+0x31c>)
 8004532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d146      	bne.n	80045c8 <recvfrom+0x244>
	      {
   			wiz_recv_data(sn, head, 2);
 800453a:	f107 0114 	add.w	r1, r7, #20
 800453e:	7bfb      	ldrb	r3, [r7, #15]
 8004540:	2202      	movs	r2, #2
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff fbc0 	bl	8003cc8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004548:	7bfb      	ldrb	r3, [r7, #15]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	3301      	adds	r3, #1
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004554:	2140      	movs	r1, #64	; 0x40
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff f9b6 	bl	80038c8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800455c:	bf00      	nop
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	3301      	adds	r3, #1
 8004564:	00db      	lsls	r3, r3, #3
 8004566:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff f960 	bl	8003830 <WIZCHIP_READ>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f3      	bne.n	800455e <recvfrom+0x1da>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8004576:	7d3a      	ldrb	r2, [r7, #20]
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	b291      	uxth	r1, r2
 800457c:	4a48      	ldr	r2, [pc, #288]	; (80046a0 <recvfrom+0x31c>)
 800457e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	4a46      	ldr	r2, [pc, #280]	; (80046a0 <recvfrom+0x31c>)
 8004586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	b29a      	uxth	r2, r3
 800458e:	7d7b      	ldrb	r3, [r7, #21]
 8004590:	b29b      	uxth	r3, r3
 8004592:	4413      	add	r3, r2
 8004594:	b29a      	uxth	r2, r3
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	3a02      	subs	r2, #2
 800459a:	b291      	uxth	r1, r2
 800459c:	4a40      	ldr	r2, [pc, #256]	; (80046a0 <recvfrom+0x31c>)
 800459e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	4a3e      	ldr	r2, [pc, #248]	; (80046a0 <recvfrom+0x31c>)
 80045a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045aa:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d906      	bls.n	80045c0 <recvfrom+0x23c>
   			{
   			   close(sn);
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fd41 	bl	800403c <close>
   			   return SOCKFATAL_PACKLEN;
 80045ba:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80045be:	e0c4      	b.n	800474a <recvfrom+0x3c6>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	4a39      	ldr	r2, [pc, #228]	; (80046a8 <recvfrom+0x324>)
 80045c4:	2180      	movs	r1, #128	; 0x80
 80045c6:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	4a35      	ldr	r2, [pc, #212]	; (80046a0 <recvfrom+0x31c>)
 80045cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045d0:	89ba      	ldrh	r2, [r7, #12]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d202      	bcs.n	80045dc <recvfrom+0x258>
 80045d6:	89bb      	ldrh	r3, [r7, #12]
 80045d8:	83fb      	strh	r3, [r7, #30]
 80045da:	e004      	b.n	80045e6 <recvfrom+0x262>
			else pack_len = sock_remained_size[sn];
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	4a30      	ldr	r2, [pc, #192]	; (80046a0 <recvfrom+0x31c>)
 80045e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045e4:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80045e6:	8bfa      	ldrh	r2, [r7, #30]
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	68b9      	ldr	r1, [r7, #8]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff fb6b 	bl	8003cc8 <wiz_recv_data>
		   break;
 80045f2:	e073      	b.n	80046dc <recvfrom+0x358>
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	4a2a      	ldr	r2, [pc, #168]	; (80046a0 <recvfrom+0x31c>)
 80045f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d144      	bne.n	800468a <recvfrom+0x306>
		   {
   			wiz_recv_data(sn, head, 6);
 8004600:	f107 0114 	add.w	r1, r7, #20
 8004604:	7bfb      	ldrb	r3, [r7, #15]
 8004606:	2206      	movs	r2, #6
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fb5d 	bl	8003cc8 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	3301      	adds	r3, #1
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800461a:	2140      	movs	r1, #64	; 0x40
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff f953 	bl	80038c8 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8004622:	bf00      	nop
 8004624:	7bfb      	ldrb	r3, [r7, #15]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	3301      	adds	r3, #1
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff f8fd 	bl	8003830 <WIZCHIP_READ>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f3      	bne.n	8004624 <recvfrom+0x2a0>
   			addr[0] = head[0];
 800463c:	7d3a      	ldrb	r2, [r7, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	3301      	adds	r3, #1
 8004646:	7d7a      	ldrb	r2, [r7, #21]
 8004648:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3302      	adds	r3, #2
 800464e:	7dba      	ldrb	r2, [r7, #22]
 8004650:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3303      	adds	r3, #3
 8004656:	7dfa      	ldrb	r2, [r7, #23]
 8004658:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800465a:	7e3a      	ldrb	r2, [r7, #24]
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	b291      	uxth	r1, r2
 8004660:	4a0f      	ldr	r2, [pc, #60]	; (80046a0 <recvfrom+0x31c>)
 8004662:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <recvfrom+0x31c>)
 800466a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	b299      	uxth	r1, r3
 8004672:	7e7b      	ldrb	r3, [r7, #25]
 8004674:	b29a      	uxth	r2, r3
 8004676:	7bfb      	ldrb	r3, [r7, #15]
 8004678:	440a      	add	r2, r1
 800467a:	b291      	uxth	r1, r2
 800467c:	4a08      	ldr	r2, [pc, #32]	; (80046a0 <recvfrom+0x31c>)
 800467e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	4a08      	ldr	r2, [pc, #32]	; (80046a8 <recvfrom+0x324>)
 8004686:	2180      	movs	r1, #128	; 0x80
 8004688:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <recvfrom+0x31c>)
 800468e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004692:	89ba      	ldrh	r2, [r7, #12]
 8004694:	429a      	cmp	r2, r3
 8004696:	d209      	bcs.n	80046ac <recvfrom+0x328>
 8004698:	89bb      	ldrh	r3, [r7, #12]
 800469a:	83fb      	strh	r3, [r7, #30]
 800469c:	e00b      	b.n	80046b6 <recvfrom+0x332>
 800469e:	bf00      	nop
 80046a0:	200000c0 	.word	0x200000c0
 80046a4:	200000bc 	.word	0x200000bc
 80046a8:	200000d0 	.word	0x200000d0
			else pack_len = sock_remained_size[sn];
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	4a29      	ldr	r2, [pc, #164]	; (8004754 <recvfrom+0x3d0>)
 80046b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046b4:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80046b6:	8bfa      	ldrh	r2, [r7, #30]
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fb03 	bl	8003cc8 <wiz_recv_data>
			break;
 80046c2:	e00b      	b.n	80046dc <recvfrom+0x358>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80046c4:	8bfa      	ldrh	r2, [r7, #30]
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff fb58 	bl	8003d80 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	4920      	ldr	r1, [pc, #128]	; (8004754 <recvfrom+0x3d0>)
 80046d4:	8bfa      	ldrh	r2, [r7, #30]
 80046d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80046da:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	3301      	adds	r3, #1
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80046e8:	2140      	movs	r1, #64	; 0x40
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff f8ec 	bl	80038c8 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80046f0:	bf00      	nop
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	3301      	adds	r3, #1
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff f896 	bl	8003830 <WIZCHIP_READ>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f3      	bne.n	80046f2 <recvfrom+0x36e>
	sock_remained_size[sn] -= pack_len;
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	4a11      	ldr	r2, [pc, #68]	; (8004754 <recvfrom+0x3d0>)
 800470e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004712:	7bfb      	ldrb	r3, [r7, #15]
 8004714:	8bfa      	ldrh	r2, [r7, #30]
 8004716:	1a8a      	subs	r2, r1, r2
 8004718:	b291      	uxth	r1, r2
 800471a:	4a0e      	ldr	r2, [pc, #56]	; (8004754 <recvfrom+0x3d0>)
 800471c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8004720:	7bfb      	ldrb	r3, [r7, #15]
 8004722:	4a0c      	ldr	r2, [pc, #48]	; (8004754 <recvfrom+0x3d0>)
 8004724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <recvfrom+0x3bc>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	4a0a      	ldr	r2, [pc, #40]	; (8004758 <recvfrom+0x3d4>)
 8004730:	5cd2      	ldrb	r2, [r2, r3]
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	b2d1      	uxtb	r1, r2
 800473a:	4a07      	ldr	r2, [pc, #28]	; (8004758 <recvfrom+0x3d4>)
 800473c:	54d1      	strb	r1, [r2, r3]
 800473e:	e003      	b.n	8004748 <recvfrom+0x3c4>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8004740:	7bfb      	ldrb	r3, [r7, #15]
 8004742:	4a05      	ldr	r2, [pc, #20]	; (8004758 <recvfrom+0x3d4>)
 8004744:	2100      	movs	r1, #0
 8004746:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8004748:	8bfb      	ldrh	r3, [r7, #30]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200000c0 	.word	0x200000c0
 8004758:	200000d0 	.word	0x200000d0

0800475c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0
 800476e:	bf00      	nop
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
 800478a:	bf00      	nop
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	4618      	mov	r0, r3
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	460b      	mov	r3, r1
 80047b8:	70fb      	strb	r3, [r7, #3]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	78fa      	ldrb	r2, [r7, #3]
 80047be:	701a      	strb	r2, [r3, #0]
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	2300      	movs	r3, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	807b      	strh	r3, [r7, #2]
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	460b      	mov	r3, r1
 8004814:	807b      	strh	r3, [r7, #2]
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <reg_wizchip_cs_cbfunc+0x16>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800483a:	4b09      	ldr	r3, [pc, #36]	; (8004860 <reg_wizchip_cs_cbfunc+0x3c>)
 800483c:	4a09      	ldr	r2, [pc, #36]	; (8004864 <reg_wizchip_cs_cbfunc+0x40>)
 800483e:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <reg_wizchip_cs_cbfunc+0x3c>)
 8004842:	4a09      	ldr	r2, [pc, #36]	; (8004868 <reg_wizchip_cs_cbfunc+0x44>)
 8004844:	615a      	str	r2, [r3, #20]
 8004846:	e005      	b.n	8004854 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004848:	4a05      	ldr	r2, [pc, #20]	; (8004860 <reg_wizchip_cs_cbfunc+0x3c>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 800484e:	4a04      	ldr	r2, [pc, #16]	; (8004860 <reg_wizchip_cs_cbfunc+0x3c>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6153      	str	r3, [r2, #20]
   }
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	20000010 	.word	0x20000010
 8004864:	08004779 	.word	0x08004779
 8004868:	08004787 	.word	0x08004787

0800486c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004876:	bf00      	nop
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <reg_wizchip_spi_cbfunc+0x4c>)
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f9      	beq.n	8004878 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <reg_wizchip_spi_cbfunc+0x24>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8004890:	4b09      	ldr	r3, [pc, #36]	; (80048b8 <reg_wizchip_spi_cbfunc+0x4c>)
 8004892:	4a0a      	ldr	r2, [pc, #40]	; (80048bc <reg_wizchip_spi_cbfunc+0x50>)
 8004894:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004896:	4b08      	ldr	r3, [pc, #32]	; (80048b8 <reg_wizchip_spi_cbfunc+0x4c>)
 8004898:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <reg_wizchip_spi_cbfunc+0x54>)
 800489a:	61da      	str	r2, [r3, #28]
 800489c:	e005      	b.n	80048aa <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800489e:	4a06      	ldr	r2, [pc, #24]	; (80048b8 <reg_wizchip_spi_cbfunc+0x4c>)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80048a4:	4a04      	ldr	r2, [pc, #16]	; (80048b8 <reg_wizchip_spi_cbfunc+0x4c>)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	61d3      	str	r3, [r2, #28]
   }
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000010 	.word	0x20000010
 80048bc:	080047cd 	.word	0x080047cd
 80048c0:	080047dd 	.word	0x080047dd

080048c4 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80048ce:	bf00      	nop
 80048d0:	4b0f      	ldr	r3, [pc, #60]	; (8004910 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f9      	beq.n	80048d0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <reg_wizchip_spiburst_cbfunc+0x24>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80048e8:	4b09      	ldr	r3, [pc, #36]	; (8004910 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80048ea:	4a0a      	ldr	r2, [pc, #40]	; (8004914 <reg_wizchip_spiburst_cbfunc+0x50>)
 80048ec:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80048ee:	4b08      	ldr	r3, [pc, #32]	; (8004910 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80048f0:	4a09      	ldr	r2, [pc, #36]	; (8004918 <reg_wizchip_spiburst_cbfunc+0x54>)
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24
 80048f4:	e005      	b.n	8004902 <reg_wizchip_spiburst_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80048f6:	4a06      	ldr	r2, [pc, #24]	; (8004910 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80048fc:	4a04      	ldr	r2, [pc, #16]	; (8004910 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000010 	.word	0x20000010
 8004914:	080047f3 	.word	0x080047f3
 8004918:	0800480b 	.word	0x0800480b

0800491c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8004922:	1d3b      	adds	r3, r7, #4
 8004924:	2206      	movs	r2, #6
 8004926:	4619      	mov	r1, r3
 8004928:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800492c:	f7ff f81a 	bl	8003964 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	2204      	movs	r2, #4
 8004936:	4619      	mov	r1, r3
 8004938:	f44f 7080 	mov.w	r0, #256	; 0x100
 800493c:	f7ff f812 	bl	8003964 <WIZCHIP_READ_BUF>
 8004940:	f107 0310 	add.w	r3, r7, #16
 8004944:	2204      	movs	r2, #4
 8004946:	4619      	mov	r1, r3
 8004948:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800494c:	f7ff f80a 	bl	8003964 <WIZCHIP_READ_BUF>
 8004950:	f107 030c 	add.w	r3, r7, #12
 8004954:	2204      	movs	r2, #4
 8004956:	4619      	mov	r1, r3
 8004958:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800495c:	f7ff f802 	bl	8003964 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004960:	2180      	movs	r1, #128	; 0x80
 8004962:	2000      	movs	r0, #0
 8004964:	f7fe ffb0 	bl	80038c8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004968:	2000      	movs	r0, #0
 800496a:	f7fe ff61 	bl	8003830 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800496e:	1d3b      	adds	r3, r7, #4
 8004970:	2206      	movs	r2, #6
 8004972:	4619      	mov	r1, r3
 8004974:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004978:	f7ff f854 	bl	8003a24 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800497c:	f107 0314 	add.w	r3, r7, #20
 8004980:	2204      	movs	r2, #4
 8004982:	4619      	mov	r1, r3
 8004984:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004988:	f7ff f84c 	bl	8003a24 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800498c:	f107 0310 	add.w	r3, r7, #16
 8004990:	2204      	movs	r2, #4
 8004992:	4619      	mov	r1, r3
 8004994:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004998:	f7ff f844 	bl	8003a24 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800499c:	f107 030c 	add.w	r3, r7, #12
 80049a0:	2204      	movs	r2, #4
 80049a2:	4619      	mov	r1, r3
 80049a4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80049a8:	f7ff f83c 	bl	8003a24 <WIZCHIP_WRITE_BUF>
}
 80049ac:	bf00      	nop
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80049c2:	f7ff ffab 	bl	800491c <wizchip_sw_reset>
   if(txsize)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d03b      	beq.n	8004a44 <wizchip_init+0x90>
   {
      tmp = 0;
 80049cc:	2300      	movs	r3, #0
 80049ce:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]
 80049d4:	e015      	b.n	8004a02 <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 80049d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	781a      	ldrb	r2, [r3, #0]
 80049e0:	7bbb      	ldrb	r3, [r7, #14]
 80049e2:	4413      	add	r3, r2
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 80049e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049ec:	2b10      	cmp	r3, #16
 80049ee:	dd02      	ble.n	80049f6 <wizchip_init+0x42>
 80049f0:	f04f 33ff 	mov.w	r3, #4294967295
 80049f4:	e066      	b.n	8004ac4 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80049f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	3301      	adds	r3, #1
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a06:	2b07      	cmp	r3, #7
 8004a08:	dde5      	ble.n	80049d6 <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e015      	b.n	8004a3c <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	3301      	adds	r3, #1
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	f7fe ff4c 	bl	80038c8 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	3301      	adds	r3, #1
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	73fb      	strb	r3, [r7, #15]
 8004a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a40:	2b07      	cmp	r3, #7
 8004a42:	dde5      	ble.n	8004a10 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d03b      	beq.n	8004ac2 <wizchip_init+0x10e>
   {
      tmp = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	e015      	b.n	8004a80 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8004a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	781a      	ldrb	r2, [r3, #0]
 8004a5e:	7bbb      	ldrb	r3, [r7, #14]
 8004a60:	4413      	add	r3, r2
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	dd02      	ble.n	8004a74 <wizchip_init+0xc0>
 8004a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a72:	e027      	b.n	8004ac4 <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	73fb      	strb	r3, [r7, #15]
 8004a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a84:	2b07      	cmp	r3, #7
 8004a86:	dde5      	ble.n	8004a54 <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a88:	2300      	movs	r3, #0
 8004a8a:	73fb      	strb	r3, [r7, #15]
 8004a8c:	e015      	b.n	8004aba <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8004a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	3301      	adds	r3, #1
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	f7fe ff0d 	bl	80038c8 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	73fb      	strb	r3, [r7, #15]
 8004aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004abe:	2b07      	cmp	r3, #7
 8004ac0:	dde5      	ble.n	8004a8e <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2206      	movs	r2, #6
 8004ad8:	4619      	mov	r1, r3
 8004ada:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004ade:	f7fe ffa1 	bl	8003a24 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	330e      	adds	r3, #14
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004aee:	f7fe ff99 	bl	8003a24 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	330a      	adds	r3, #10
 8004af6:	2204      	movs	r2, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004afe:	f7fe ff91 	bl	8003a24 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	3306      	adds	r3, #6
 8004b06:	2204      	movs	r2, #4
 8004b08:	4619      	mov	r1, r3
 8004b0a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004b0e:	f7fe ff89 	bl	8003a24 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	7c9a      	ldrb	r2, [r3, #18]
 8004b16:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <wizchip_setnetinfo+0x78>)
 8004b18:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	7cda      	ldrb	r2, [r3, #19]
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <wizchip_setnetinfo+0x78>)
 8004b20:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7d1a      	ldrb	r2, [r3, #20]
 8004b26:	4b07      	ldr	r3, [pc, #28]	; (8004b44 <wizchip_setnetinfo+0x78>)
 8004b28:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	7d5a      	ldrb	r2, [r3, #21]
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <wizchip_setnetinfo+0x78>)
 8004b30:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	7d9a      	ldrb	r2, [r3, #22]
 8004b36:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <wizchip_setnetinfo+0x7c>)
 8004b38:	701a      	strb	r2, [r3, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	200000d8 	.word	0x200000d8
 8004b48:	200000dc 	.word	0x200000dc

08004b4c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2206      	movs	r2, #6
 8004b58:	4619      	mov	r1, r3
 8004b5a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004b5e:	f7fe ff01 	bl	8003964 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	330e      	adds	r3, #14
 8004b66:	2204      	movs	r2, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004b6e:	f7fe fef9 	bl	8003964 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	330a      	adds	r3, #10
 8004b76:	2204      	movs	r2, #4
 8004b78:	4619      	mov	r1, r3
 8004b7a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004b7e:	f7fe fef1 	bl	8003964 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3306      	adds	r3, #6
 8004b86:	2204      	movs	r2, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004b8e:	f7fe fee9 	bl	8003964 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004b92:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <wizchip_getnetinfo+0x78>)
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <wizchip_getnetinfo+0x78>)
 8004b9c:	785a      	ldrb	r2, [r3, #1]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <wizchip_getnetinfo+0x78>)
 8004ba4:	789a      	ldrb	r2, [r3, #2]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004baa:	4b06      	ldr	r3, [pc, #24]	; (8004bc4 <wizchip_getnetinfo+0x78>)
 8004bac:	78da      	ldrb	r2, [r3, #3]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <wizchip_getnetinfo+0x7c>)
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	759a      	strb	r2, [r3, #22]
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	200000d8 	.word	0x200000d8
 8004bc8:	200000dc 	.word	0x200000dc

08004bcc <__errno>:
 8004bcc:	4b01      	ldr	r3, [pc, #4]	; (8004bd4 <__errno+0x8>)
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	20000038 	.word	0x20000038

08004bd8 <__libc_init_array>:
 8004bd8:	b570      	push	{r4, r5, r6, lr}
 8004bda:	4e0d      	ldr	r6, [pc, #52]	; (8004c10 <__libc_init_array+0x38>)
 8004bdc:	4c0d      	ldr	r4, [pc, #52]	; (8004c14 <__libc_init_array+0x3c>)
 8004bde:	1ba4      	subs	r4, r4, r6
 8004be0:	10a4      	asrs	r4, r4, #2
 8004be2:	2500      	movs	r5, #0
 8004be4:	42a5      	cmp	r5, r4
 8004be6:	d109      	bne.n	8004bfc <__libc_init_array+0x24>
 8004be8:	4e0b      	ldr	r6, [pc, #44]	; (8004c18 <__libc_init_array+0x40>)
 8004bea:	4c0c      	ldr	r4, [pc, #48]	; (8004c1c <__libc_init_array+0x44>)
 8004bec:	f000 fc28 	bl	8005440 <_init>
 8004bf0:	1ba4      	subs	r4, r4, r6
 8004bf2:	10a4      	asrs	r4, r4, #2
 8004bf4:	2500      	movs	r5, #0
 8004bf6:	42a5      	cmp	r5, r4
 8004bf8:	d105      	bne.n	8004c06 <__libc_init_array+0x2e>
 8004bfa:	bd70      	pop	{r4, r5, r6, pc}
 8004bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c00:	4798      	blx	r3
 8004c02:	3501      	adds	r5, #1
 8004c04:	e7ee      	b.n	8004be4 <__libc_init_array+0xc>
 8004c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c0a:	4798      	blx	r3
 8004c0c:	3501      	adds	r5, #1
 8004c0e:	e7f2      	b.n	8004bf6 <__libc_init_array+0x1e>
 8004c10:	08005798 	.word	0x08005798
 8004c14:	08005798 	.word	0x08005798
 8004c18:	08005798 	.word	0x08005798
 8004c1c:	0800579c 	.word	0x0800579c

08004c20 <memcpy>:
 8004c20:	b510      	push	{r4, lr}
 8004c22:	1e43      	subs	r3, r0, #1
 8004c24:	440a      	add	r2, r1
 8004c26:	4291      	cmp	r1, r2
 8004c28:	d100      	bne.n	8004c2c <memcpy+0xc>
 8004c2a:	bd10      	pop	{r4, pc}
 8004c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c34:	e7f7      	b.n	8004c26 <memcpy+0x6>

08004c36 <memset>:
 8004c36:	4402      	add	r2, r0
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d100      	bne.n	8004c40 <memset+0xa>
 8004c3e:	4770      	bx	lr
 8004c40:	f803 1b01 	strb.w	r1, [r3], #1
 8004c44:	e7f9      	b.n	8004c3a <memset+0x4>
	...

08004c48 <_free_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	d045      	beq.n	8004cdc <_free_r+0x94>
 8004c50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c54:	1f0c      	subs	r4, r1, #4
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bfb8      	it	lt
 8004c5a:	18e4      	addlt	r4, r4, r3
 8004c5c:	f000 f8cc 	bl	8004df8 <__malloc_lock>
 8004c60:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <_free_r+0x98>)
 8004c62:	6813      	ldr	r3, [r2, #0]
 8004c64:	4610      	mov	r0, r2
 8004c66:	b933      	cbnz	r3, 8004c76 <_free_r+0x2e>
 8004c68:	6063      	str	r3, [r4, #4]
 8004c6a:	6014      	str	r4, [r2, #0]
 8004c6c:	4628      	mov	r0, r5
 8004c6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c72:	f000 b8c2 	b.w	8004dfa <__malloc_unlock>
 8004c76:	42a3      	cmp	r3, r4
 8004c78:	d90c      	bls.n	8004c94 <_free_r+0x4c>
 8004c7a:	6821      	ldr	r1, [r4, #0]
 8004c7c:	1862      	adds	r2, r4, r1
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bf04      	itt	eq
 8004c82:	681a      	ldreq	r2, [r3, #0]
 8004c84:	685b      	ldreq	r3, [r3, #4]
 8004c86:	6063      	str	r3, [r4, #4]
 8004c88:	bf04      	itt	eq
 8004c8a:	1852      	addeq	r2, r2, r1
 8004c8c:	6022      	streq	r2, [r4, #0]
 8004c8e:	6004      	str	r4, [r0, #0]
 8004c90:	e7ec      	b.n	8004c6c <_free_r+0x24>
 8004c92:	4613      	mov	r3, r2
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	b10a      	cbz	r2, 8004c9c <_free_r+0x54>
 8004c98:	42a2      	cmp	r2, r4
 8004c9a:	d9fa      	bls.n	8004c92 <_free_r+0x4a>
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	1858      	adds	r0, r3, r1
 8004ca0:	42a0      	cmp	r0, r4
 8004ca2:	d10b      	bne.n	8004cbc <_free_r+0x74>
 8004ca4:	6820      	ldr	r0, [r4, #0]
 8004ca6:	4401      	add	r1, r0
 8004ca8:	1858      	adds	r0, r3, r1
 8004caa:	4282      	cmp	r2, r0
 8004cac:	6019      	str	r1, [r3, #0]
 8004cae:	d1dd      	bne.n	8004c6c <_free_r+0x24>
 8004cb0:	6810      	ldr	r0, [r2, #0]
 8004cb2:	6852      	ldr	r2, [r2, #4]
 8004cb4:	605a      	str	r2, [r3, #4]
 8004cb6:	4401      	add	r1, r0
 8004cb8:	6019      	str	r1, [r3, #0]
 8004cba:	e7d7      	b.n	8004c6c <_free_r+0x24>
 8004cbc:	d902      	bls.n	8004cc4 <_free_r+0x7c>
 8004cbe:	230c      	movs	r3, #12
 8004cc0:	602b      	str	r3, [r5, #0]
 8004cc2:	e7d3      	b.n	8004c6c <_free_r+0x24>
 8004cc4:	6820      	ldr	r0, [r4, #0]
 8004cc6:	1821      	adds	r1, r4, r0
 8004cc8:	428a      	cmp	r2, r1
 8004cca:	bf04      	itt	eq
 8004ccc:	6811      	ldreq	r1, [r2, #0]
 8004cce:	6852      	ldreq	r2, [r2, #4]
 8004cd0:	6062      	str	r2, [r4, #4]
 8004cd2:	bf04      	itt	eq
 8004cd4:	1809      	addeq	r1, r1, r0
 8004cd6:	6021      	streq	r1, [r4, #0]
 8004cd8:	605c      	str	r4, [r3, #4]
 8004cda:	e7c7      	b.n	8004c6c <_free_r+0x24>
 8004cdc:	bd38      	pop	{r3, r4, r5, pc}
 8004cde:	bf00      	nop
 8004ce0:	200000e0 	.word	0x200000e0

08004ce4 <_malloc_r>:
 8004ce4:	b570      	push	{r4, r5, r6, lr}
 8004ce6:	1ccd      	adds	r5, r1, #3
 8004ce8:	f025 0503 	bic.w	r5, r5, #3
 8004cec:	3508      	adds	r5, #8
 8004cee:	2d0c      	cmp	r5, #12
 8004cf0:	bf38      	it	cc
 8004cf2:	250c      	movcc	r5, #12
 8004cf4:	2d00      	cmp	r5, #0
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	db01      	blt.n	8004cfe <_malloc_r+0x1a>
 8004cfa:	42a9      	cmp	r1, r5
 8004cfc:	d903      	bls.n	8004d06 <_malloc_r+0x22>
 8004cfe:	230c      	movs	r3, #12
 8004d00:	6033      	str	r3, [r6, #0]
 8004d02:	2000      	movs	r0, #0
 8004d04:	bd70      	pop	{r4, r5, r6, pc}
 8004d06:	f000 f877 	bl	8004df8 <__malloc_lock>
 8004d0a:	4a21      	ldr	r2, [pc, #132]	; (8004d90 <_malloc_r+0xac>)
 8004d0c:	6814      	ldr	r4, [r2, #0]
 8004d0e:	4621      	mov	r1, r4
 8004d10:	b991      	cbnz	r1, 8004d38 <_malloc_r+0x54>
 8004d12:	4c20      	ldr	r4, [pc, #128]	; (8004d94 <_malloc_r+0xb0>)
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	b91b      	cbnz	r3, 8004d20 <_malloc_r+0x3c>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 f83d 	bl	8004d98 <_sbrk_r>
 8004d1e:	6020      	str	r0, [r4, #0]
 8004d20:	4629      	mov	r1, r5
 8004d22:	4630      	mov	r0, r6
 8004d24:	f000 f838 	bl	8004d98 <_sbrk_r>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d124      	bne.n	8004d76 <_malloc_r+0x92>
 8004d2c:	230c      	movs	r3, #12
 8004d2e:	6033      	str	r3, [r6, #0]
 8004d30:	4630      	mov	r0, r6
 8004d32:	f000 f862 	bl	8004dfa <__malloc_unlock>
 8004d36:	e7e4      	b.n	8004d02 <_malloc_r+0x1e>
 8004d38:	680b      	ldr	r3, [r1, #0]
 8004d3a:	1b5b      	subs	r3, r3, r5
 8004d3c:	d418      	bmi.n	8004d70 <_malloc_r+0x8c>
 8004d3e:	2b0b      	cmp	r3, #11
 8004d40:	d90f      	bls.n	8004d62 <_malloc_r+0x7e>
 8004d42:	600b      	str	r3, [r1, #0]
 8004d44:	50cd      	str	r5, [r1, r3]
 8004d46:	18cc      	adds	r4, r1, r3
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f000 f856 	bl	8004dfa <__malloc_unlock>
 8004d4e:	f104 000b 	add.w	r0, r4, #11
 8004d52:	1d23      	adds	r3, r4, #4
 8004d54:	f020 0007 	bic.w	r0, r0, #7
 8004d58:	1ac3      	subs	r3, r0, r3
 8004d5a:	d0d3      	beq.n	8004d04 <_malloc_r+0x20>
 8004d5c:	425a      	negs	r2, r3
 8004d5e:	50e2      	str	r2, [r4, r3]
 8004d60:	e7d0      	b.n	8004d04 <_malloc_r+0x20>
 8004d62:	428c      	cmp	r4, r1
 8004d64:	684b      	ldr	r3, [r1, #4]
 8004d66:	bf16      	itet	ne
 8004d68:	6063      	strne	r3, [r4, #4]
 8004d6a:	6013      	streq	r3, [r2, #0]
 8004d6c:	460c      	movne	r4, r1
 8004d6e:	e7eb      	b.n	8004d48 <_malloc_r+0x64>
 8004d70:	460c      	mov	r4, r1
 8004d72:	6849      	ldr	r1, [r1, #4]
 8004d74:	e7cc      	b.n	8004d10 <_malloc_r+0x2c>
 8004d76:	1cc4      	adds	r4, r0, #3
 8004d78:	f024 0403 	bic.w	r4, r4, #3
 8004d7c:	42a0      	cmp	r0, r4
 8004d7e:	d005      	beq.n	8004d8c <_malloc_r+0xa8>
 8004d80:	1a21      	subs	r1, r4, r0
 8004d82:	4630      	mov	r0, r6
 8004d84:	f000 f808 	bl	8004d98 <_sbrk_r>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	d0cf      	beq.n	8004d2c <_malloc_r+0x48>
 8004d8c:	6025      	str	r5, [r4, #0]
 8004d8e:	e7db      	b.n	8004d48 <_malloc_r+0x64>
 8004d90:	200000e0 	.word	0x200000e0
 8004d94:	200000e4 	.word	0x200000e4

08004d98 <_sbrk_r>:
 8004d98:	b538      	push	{r3, r4, r5, lr}
 8004d9a:	4c06      	ldr	r4, [pc, #24]	; (8004db4 <_sbrk_r+0x1c>)
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	4605      	mov	r5, r0
 8004da0:	4608      	mov	r0, r1
 8004da2:	6023      	str	r3, [r4, #0]
 8004da4:	f7fc f894 	bl	8000ed0 <_sbrk>
 8004da8:	1c43      	adds	r3, r0, #1
 8004daa:	d102      	bne.n	8004db2 <_sbrk_r+0x1a>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	b103      	cbz	r3, 8004db2 <_sbrk_r+0x1a>
 8004db0:	602b      	str	r3, [r5, #0]
 8004db2:	bd38      	pop	{r3, r4, r5, pc}
 8004db4:	200002b0 	.word	0x200002b0

08004db8 <siprintf>:
 8004db8:	b40e      	push	{r1, r2, r3}
 8004dba:	b500      	push	{lr}
 8004dbc:	b09c      	sub	sp, #112	; 0x70
 8004dbe:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc0:	9002      	str	r0, [sp, #8]
 8004dc2:	9006      	str	r0, [sp, #24]
 8004dc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dc8:	4809      	ldr	r0, [pc, #36]	; (8004df0 <siprintf+0x38>)
 8004dca:	9107      	str	r1, [sp, #28]
 8004dcc:	9104      	str	r1, [sp, #16]
 8004dce:	4909      	ldr	r1, [pc, #36]	; (8004df4 <siprintf+0x3c>)
 8004dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dd4:	9105      	str	r1, [sp, #20]
 8004dd6:	6800      	ldr	r0, [r0, #0]
 8004dd8:	9301      	str	r3, [sp, #4]
 8004dda:	a902      	add	r1, sp, #8
 8004ddc:	f000 f868 	bl	8004eb0 <_svfiprintf_r>
 8004de0:	9b02      	ldr	r3, [sp, #8]
 8004de2:	2200      	movs	r2, #0
 8004de4:	701a      	strb	r2, [r3, #0]
 8004de6:	b01c      	add	sp, #112	; 0x70
 8004de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dec:	b003      	add	sp, #12
 8004dee:	4770      	bx	lr
 8004df0:	20000038 	.word	0x20000038
 8004df4:	ffff0208 	.word	0xffff0208

08004df8 <__malloc_lock>:
 8004df8:	4770      	bx	lr

08004dfa <__malloc_unlock>:
 8004dfa:	4770      	bx	lr

08004dfc <__ssputs_r>:
 8004dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e00:	688e      	ldr	r6, [r1, #8]
 8004e02:	429e      	cmp	r6, r3
 8004e04:	4682      	mov	sl, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	4690      	mov	r8, r2
 8004e0a:	4699      	mov	r9, r3
 8004e0c:	d837      	bhi.n	8004e7e <__ssputs_r+0x82>
 8004e0e:	898a      	ldrh	r2, [r1, #12]
 8004e10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e14:	d031      	beq.n	8004e7a <__ssputs_r+0x7e>
 8004e16:	6825      	ldr	r5, [r4, #0]
 8004e18:	6909      	ldr	r1, [r1, #16]
 8004e1a:	1a6f      	subs	r7, r5, r1
 8004e1c:	6965      	ldr	r5, [r4, #20]
 8004e1e:	2302      	movs	r3, #2
 8004e20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e24:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e28:	f109 0301 	add.w	r3, r9, #1
 8004e2c:	443b      	add	r3, r7
 8004e2e:	429d      	cmp	r5, r3
 8004e30:	bf38      	it	cc
 8004e32:	461d      	movcc	r5, r3
 8004e34:	0553      	lsls	r3, r2, #21
 8004e36:	d530      	bpl.n	8004e9a <__ssputs_r+0x9e>
 8004e38:	4629      	mov	r1, r5
 8004e3a:	f7ff ff53 	bl	8004ce4 <_malloc_r>
 8004e3e:	4606      	mov	r6, r0
 8004e40:	b950      	cbnz	r0, 8004e58 <__ssputs_r+0x5c>
 8004e42:	230c      	movs	r3, #12
 8004e44:	f8ca 3000 	str.w	r3, [sl]
 8004e48:	89a3      	ldrh	r3, [r4, #12]
 8004e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e58:	463a      	mov	r2, r7
 8004e5a:	6921      	ldr	r1, [r4, #16]
 8004e5c:	f7ff fee0 	bl	8004c20 <memcpy>
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e6a:	81a3      	strh	r3, [r4, #12]
 8004e6c:	6126      	str	r6, [r4, #16]
 8004e6e:	6165      	str	r5, [r4, #20]
 8004e70:	443e      	add	r6, r7
 8004e72:	1bed      	subs	r5, r5, r7
 8004e74:	6026      	str	r6, [r4, #0]
 8004e76:	60a5      	str	r5, [r4, #8]
 8004e78:	464e      	mov	r6, r9
 8004e7a:	454e      	cmp	r6, r9
 8004e7c:	d900      	bls.n	8004e80 <__ssputs_r+0x84>
 8004e7e:	464e      	mov	r6, r9
 8004e80:	4632      	mov	r2, r6
 8004e82:	4641      	mov	r1, r8
 8004e84:	6820      	ldr	r0, [r4, #0]
 8004e86:	f000 fa93 	bl	80053b0 <memmove>
 8004e8a:	68a3      	ldr	r3, [r4, #8]
 8004e8c:	1b9b      	subs	r3, r3, r6
 8004e8e:	60a3      	str	r3, [r4, #8]
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	441e      	add	r6, r3
 8004e94:	6026      	str	r6, [r4, #0]
 8004e96:	2000      	movs	r0, #0
 8004e98:	e7dc      	b.n	8004e54 <__ssputs_r+0x58>
 8004e9a:	462a      	mov	r2, r5
 8004e9c:	f000 faa1 	bl	80053e2 <_realloc_r>
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d1e2      	bne.n	8004e6c <__ssputs_r+0x70>
 8004ea6:	6921      	ldr	r1, [r4, #16]
 8004ea8:	4650      	mov	r0, sl
 8004eaa:	f7ff fecd 	bl	8004c48 <_free_r>
 8004eae:	e7c8      	b.n	8004e42 <__ssputs_r+0x46>

08004eb0 <_svfiprintf_r>:
 8004eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	461d      	mov	r5, r3
 8004eb6:	898b      	ldrh	r3, [r1, #12]
 8004eb8:	061f      	lsls	r7, r3, #24
 8004eba:	b09d      	sub	sp, #116	; 0x74
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	4616      	mov	r6, r2
 8004ec2:	d50f      	bpl.n	8004ee4 <_svfiprintf_r+0x34>
 8004ec4:	690b      	ldr	r3, [r1, #16]
 8004ec6:	b96b      	cbnz	r3, 8004ee4 <_svfiprintf_r+0x34>
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	f7ff ff0b 	bl	8004ce4 <_malloc_r>
 8004ece:	6020      	str	r0, [r4, #0]
 8004ed0:	6120      	str	r0, [r4, #16]
 8004ed2:	b928      	cbnz	r0, 8004ee0 <_svfiprintf_r+0x30>
 8004ed4:	230c      	movs	r3, #12
 8004ed6:	f8c8 3000 	str.w	r3, [r8]
 8004eda:	f04f 30ff 	mov.w	r0, #4294967295
 8004ede:	e0c8      	b.n	8005072 <_svfiprintf_r+0x1c2>
 8004ee0:	2340      	movs	r3, #64	; 0x40
 8004ee2:	6163      	str	r3, [r4, #20]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee8:	2320      	movs	r3, #32
 8004eea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004eee:	2330      	movs	r3, #48	; 0x30
 8004ef0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ef4:	9503      	str	r5, [sp, #12]
 8004ef6:	f04f 0b01 	mov.w	fp, #1
 8004efa:	4637      	mov	r7, r6
 8004efc:	463d      	mov	r5, r7
 8004efe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f02:	b10b      	cbz	r3, 8004f08 <_svfiprintf_r+0x58>
 8004f04:	2b25      	cmp	r3, #37	; 0x25
 8004f06:	d13e      	bne.n	8004f86 <_svfiprintf_r+0xd6>
 8004f08:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f0c:	d00b      	beq.n	8004f26 <_svfiprintf_r+0x76>
 8004f0e:	4653      	mov	r3, sl
 8004f10:	4632      	mov	r2, r6
 8004f12:	4621      	mov	r1, r4
 8004f14:	4640      	mov	r0, r8
 8004f16:	f7ff ff71 	bl	8004dfc <__ssputs_r>
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	f000 80a4 	beq.w	8005068 <_svfiprintf_r+0x1b8>
 8004f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f22:	4453      	add	r3, sl
 8004f24:	9309      	str	r3, [sp, #36]	; 0x24
 8004f26:	783b      	ldrb	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 809d 	beq.w	8005068 <_svfiprintf_r+0x1b8>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f04f 32ff 	mov.w	r2, #4294967295
 8004f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f38:	9304      	str	r3, [sp, #16]
 8004f3a:	9307      	str	r3, [sp, #28]
 8004f3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f40:	931a      	str	r3, [sp, #104]	; 0x68
 8004f42:	462f      	mov	r7, r5
 8004f44:	2205      	movs	r2, #5
 8004f46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f4a:	4850      	ldr	r0, [pc, #320]	; (800508c <_svfiprintf_r+0x1dc>)
 8004f4c:	f7fb f948 	bl	80001e0 <memchr>
 8004f50:	9b04      	ldr	r3, [sp, #16]
 8004f52:	b9d0      	cbnz	r0, 8004f8a <_svfiprintf_r+0xda>
 8004f54:	06d9      	lsls	r1, r3, #27
 8004f56:	bf44      	itt	mi
 8004f58:	2220      	movmi	r2, #32
 8004f5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f5e:	071a      	lsls	r2, r3, #28
 8004f60:	bf44      	itt	mi
 8004f62:	222b      	movmi	r2, #43	; 0x2b
 8004f64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f68:	782a      	ldrb	r2, [r5, #0]
 8004f6a:	2a2a      	cmp	r2, #42	; 0x2a
 8004f6c:	d015      	beq.n	8004f9a <_svfiprintf_r+0xea>
 8004f6e:	9a07      	ldr	r2, [sp, #28]
 8004f70:	462f      	mov	r7, r5
 8004f72:	2000      	movs	r0, #0
 8004f74:	250a      	movs	r5, #10
 8004f76:	4639      	mov	r1, r7
 8004f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f7c:	3b30      	subs	r3, #48	; 0x30
 8004f7e:	2b09      	cmp	r3, #9
 8004f80:	d94d      	bls.n	800501e <_svfiprintf_r+0x16e>
 8004f82:	b1b8      	cbz	r0, 8004fb4 <_svfiprintf_r+0x104>
 8004f84:	e00f      	b.n	8004fa6 <_svfiprintf_r+0xf6>
 8004f86:	462f      	mov	r7, r5
 8004f88:	e7b8      	b.n	8004efc <_svfiprintf_r+0x4c>
 8004f8a:	4a40      	ldr	r2, [pc, #256]	; (800508c <_svfiprintf_r+0x1dc>)
 8004f8c:	1a80      	subs	r0, r0, r2
 8004f8e:	fa0b f000 	lsl.w	r0, fp, r0
 8004f92:	4318      	orrs	r0, r3
 8004f94:	9004      	str	r0, [sp, #16]
 8004f96:	463d      	mov	r5, r7
 8004f98:	e7d3      	b.n	8004f42 <_svfiprintf_r+0x92>
 8004f9a:	9a03      	ldr	r2, [sp, #12]
 8004f9c:	1d11      	adds	r1, r2, #4
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	9103      	str	r1, [sp, #12]
 8004fa2:	2a00      	cmp	r2, #0
 8004fa4:	db01      	blt.n	8004faa <_svfiprintf_r+0xfa>
 8004fa6:	9207      	str	r2, [sp, #28]
 8004fa8:	e004      	b.n	8004fb4 <_svfiprintf_r+0x104>
 8004faa:	4252      	negs	r2, r2
 8004fac:	f043 0302 	orr.w	r3, r3, #2
 8004fb0:	9207      	str	r2, [sp, #28]
 8004fb2:	9304      	str	r3, [sp, #16]
 8004fb4:	783b      	ldrb	r3, [r7, #0]
 8004fb6:	2b2e      	cmp	r3, #46	; 0x2e
 8004fb8:	d10c      	bne.n	8004fd4 <_svfiprintf_r+0x124>
 8004fba:	787b      	ldrb	r3, [r7, #1]
 8004fbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fbe:	d133      	bne.n	8005028 <_svfiprintf_r+0x178>
 8004fc0:	9b03      	ldr	r3, [sp, #12]
 8004fc2:	1d1a      	adds	r2, r3, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	9203      	str	r2, [sp, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	bfb8      	it	lt
 8004fcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fd0:	3702      	adds	r7, #2
 8004fd2:	9305      	str	r3, [sp, #20]
 8004fd4:	4d2e      	ldr	r5, [pc, #184]	; (8005090 <_svfiprintf_r+0x1e0>)
 8004fd6:	7839      	ldrb	r1, [r7, #0]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f7fb f900 	bl	80001e0 <memchr>
 8004fe0:	b138      	cbz	r0, 8004ff2 <_svfiprintf_r+0x142>
 8004fe2:	2340      	movs	r3, #64	; 0x40
 8004fe4:	1b40      	subs	r0, r0, r5
 8004fe6:	fa03 f000 	lsl.w	r0, r3, r0
 8004fea:	9b04      	ldr	r3, [sp, #16]
 8004fec:	4303      	orrs	r3, r0
 8004fee:	3701      	adds	r7, #1
 8004ff0:	9304      	str	r3, [sp, #16]
 8004ff2:	7839      	ldrb	r1, [r7, #0]
 8004ff4:	4827      	ldr	r0, [pc, #156]	; (8005094 <_svfiprintf_r+0x1e4>)
 8004ff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ffa:	2206      	movs	r2, #6
 8004ffc:	1c7e      	adds	r6, r7, #1
 8004ffe:	f7fb f8ef 	bl	80001e0 <memchr>
 8005002:	2800      	cmp	r0, #0
 8005004:	d038      	beq.n	8005078 <_svfiprintf_r+0x1c8>
 8005006:	4b24      	ldr	r3, [pc, #144]	; (8005098 <_svfiprintf_r+0x1e8>)
 8005008:	bb13      	cbnz	r3, 8005050 <_svfiprintf_r+0x1a0>
 800500a:	9b03      	ldr	r3, [sp, #12]
 800500c:	3307      	adds	r3, #7
 800500e:	f023 0307 	bic.w	r3, r3, #7
 8005012:	3308      	adds	r3, #8
 8005014:	9303      	str	r3, [sp, #12]
 8005016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005018:	444b      	add	r3, r9
 800501a:	9309      	str	r3, [sp, #36]	; 0x24
 800501c:	e76d      	b.n	8004efa <_svfiprintf_r+0x4a>
 800501e:	fb05 3202 	mla	r2, r5, r2, r3
 8005022:	2001      	movs	r0, #1
 8005024:	460f      	mov	r7, r1
 8005026:	e7a6      	b.n	8004f76 <_svfiprintf_r+0xc6>
 8005028:	2300      	movs	r3, #0
 800502a:	3701      	adds	r7, #1
 800502c:	9305      	str	r3, [sp, #20]
 800502e:	4619      	mov	r1, r3
 8005030:	250a      	movs	r5, #10
 8005032:	4638      	mov	r0, r7
 8005034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005038:	3a30      	subs	r2, #48	; 0x30
 800503a:	2a09      	cmp	r2, #9
 800503c:	d903      	bls.n	8005046 <_svfiprintf_r+0x196>
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0c8      	beq.n	8004fd4 <_svfiprintf_r+0x124>
 8005042:	9105      	str	r1, [sp, #20]
 8005044:	e7c6      	b.n	8004fd4 <_svfiprintf_r+0x124>
 8005046:	fb05 2101 	mla	r1, r5, r1, r2
 800504a:	2301      	movs	r3, #1
 800504c:	4607      	mov	r7, r0
 800504e:	e7f0      	b.n	8005032 <_svfiprintf_r+0x182>
 8005050:	ab03      	add	r3, sp, #12
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	4622      	mov	r2, r4
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <_svfiprintf_r+0x1ec>)
 8005058:	a904      	add	r1, sp, #16
 800505a:	4640      	mov	r0, r8
 800505c:	f3af 8000 	nop.w
 8005060:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005064:	4681      	mov	r9, r0
 8005066:	d1d6      	bne.n	8005016 <_svfiprintf_r+0x166>
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	065b      	lsls	r3, r3, #25
 800506c:	f53f af35 	bmi.w	8004eda <_svfiprintf_r+0x2a>
 8005070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005072:	b01d      	add	sp, #116	; 0x74
 8005074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005078:	ab03      	add	r3, sp, #12
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	4622      	mov	r2, r4
 800507e:	4b07      	ldr	r3, [pc, #28]	; (800509c <_svfiprintf_r+0x1ec>)
 8005080:	a904      	add	r1, sp, #16
 8005082:	4640      	mov	r0, r8
 8005084:	f000 f882 	bl	800518c <_printf_i>
 8005088:	e7ea      	b.n	8005060 <_svfiprintf_r+0x1b0>
 800508a:	bf00      	nop
 800508c:	0800575c 	.word	0x0800575c
 8005090:	08005762 	.word	0x08005762
 8005094:	08005766 	.word	0x08005766
 8005098:	00000000 	.word	0x00000000
 800509c:	08004dfd 	.word	0x08004dfd

080050a0 <_printf_common>:
 80050a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	4691      	mov	r9, r2
 80050a6:	461f      	mov	r7, r3
 80050a8:	688a      	ldr	r2, [r1, #8]
 80050aa:	690b      	ldr	r3, [r1, #16]
 80050ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050b0:	4293      	cmp	r3, r2
 80050b2:	bfb8      	it	lt
 80050b4:	4613      	movlt	r3, r2
 80050b6:	f8c9 3000 	str.w	r3, [r9]
 80050ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050be:	4606      	mov	r6, r0
 80050c0:	460c      	mov	r4, r1
 80050c2:	b112      	cbz	r2, 80050ca <_printf_common+0x2a>
 80050c4:	3301      	adds	r3, #1
 80050c6:	f8c9 3000 	str.w	r3, [r9]
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	0699      	lsls	r1, r3, #26
 80050ce:	bf42      	ittt	mi
 80050d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80050d4:	3302      	addmi	r3, #2
 80050d6:	f8c9 3000 	strmi.w	r3, [r9]
 80050da:	6825      	ldr	r5, [r4, #0]
 80050dc:	f015 0506 	ands.w	r5, r5, #6
 80050e0:	d107      	bne.n	80050f2 <_printf_common+0x52>
 80050e2:	f104 0a19 	add.w	sl, r4, #25
 80050e6:	68e3      	ldr	r3, [r4, #12]
 80050e8:	f8d9 2000 	ldr.w	r2, [r9]
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	42ab      	cmp	r3, r5
 80050f0:	dc28      	bgt.n	8005144 <_printf_common+0xa4>
 80050f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	3300      	adds	r3, #0
 80050fa:	bf18      	it	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	0692      	lsls	r2, r2, #26
 8005100:	d42d      	bmi.n	800515e <_printf_common+0xbe>
 8005102:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005106:	4639      	mov	r1, r7
 8005108:	4630      	mov	r0, r6
 800510a:	47c0      	blx	r8
 800510c:	3001      	adds	r0, #1
 800510e:	d020      	beq.n	8005152 <_printf_common+0xb2>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	68e5      	ldr	r5, [r4, #12]
 8005114:	f8d9 2000 	ldr.w	r2, [r9]
 8005118:	f003 0306 	and.w	r3, r3, #6
 800511c:	2b04      	cmp	r3, #4
 800511e:	bf08      	it	eq
 8005120:	1aad      	subeq	r5, r5, r2
 8005122:	68a3      	ldr	r3, [r4, #8]
 8005124:	6922      	ldr	r2, [r4, #16]
 8005126:	bf0c      	ite	eq
 8005128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800512c:	2500      	movne	r5, #0
 800512e:	4293      	cmp	r3, r2
 8005130:	bfc4      	itt	gt
 8005132:	1a9b      	subgt	r3, r3, r2
 8005134:	18ed      	addgt	r5, r5, r3
 8005136:	f04f 0900 	mov.w	r9, #0
 800513a:	341a      	adds	r4, #26
 800513c:	454d      	cmp	r5, r9
 800513e:	d11a      	bne.n	8005176 <_printf_common+0xd6>
 8005140:	2000      	movs	r0, #0
 8005142:	e008      	b.n	8005156 <_printf_common+0xb6>
 8005144:	2301      	movs	r3, #1
 8005146:	4652      	mov	r2, sl
 8005148:	4639      	mov	r1, r7
 800514a:	4630      	mov	r0, r6
 800514c:	47c0      	blx	r8
 800514e:	3001      	adds	r0, #1
 8005150:	d103      	bne.n	800515a <_printf_common+0xba>
 8005152:	f04f 30ff 	mov.w	r0, #4294967295
 8005156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800515a:	3501      	adds	r5, #1
 800515c:	e7c3      	b.n	80050e6 <_printf_common+0x46>
 800515e:	18e1      	adds	r1, r4, r3
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	2030      	movs	r0, #48	; 0x30
 8005164:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005168:	4422      	add	r2, r4
 800516a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800516e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005172:	3302      	adds	r3, #2
 8005174:	e7c5      	b.n	8005102 <_printf_common+0x62>
 8005176:	2301      	movs	r3, #1
 8005178:	4622      	mov	r2, r4
 800517a:	4639      	mov	r1, r7
 800517c:	4630      	mov	r0, r6
 800517e:	47c0      	blx	r8
 8005180:	3001      	adds	r0, #1
 8005182:	d0e6      	beq.n	8005152 <_printf_common+0xb2>
 8005184:	f109 0901 	add.w	r9, r9, #1
 8005188:	e7d8      	b.n	800513c <_printf_common+0x9c>
	...

0800518c <_printf_i>:
 800518c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005190:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005194:	460c      	mov	r4, r1
 8005196:	7e09      	ldrb	r1, [r1, #24]
 8005198:	b085      	sub	sp, #20
 800519a:	296e      	cmp	r1, #110	; 0x6e
 800519c:	4617      	mov	r7, r2
 800519e:	4606      	mov	r6, r0
 80051a0:	4698      	mov	r8, r3
 80051a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051a4:	f000 80b3 	beq.w	800530e <_printf_i+0x182>
 80051a8:	d822      	bhi.n	80051f0 <_printf_i+0x64>
 80051aa:	2963      	cmp	r1, #99	; 0x63
 80051ac:	d036      	beq.n	800521c <_printf_i+0x90>
 80051ae:	d80a      	bhi.n	80051c6 <_printf_i+0x3a>
 80051b0:	2900      	cmp	r1, #0
 80051b2:	f000 80b9 	beq.w	8005328 <_printf_i+0x19c>
 80051b6:	2958      	cmp	r1, #88	; 0x58
 80051b8:	f000 8083 	beq.w	80052c2 <_printf_i+0x136>
 80051bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051c4:	e032      	b.n	800522c <_printf_i+0xa0>
 80051c6:	2964      	cmp	r1, #100	; 0x64
 80051c8:	d001      	beq.n	80051ce <_printf_i+0x42>
 80051ca:	2969      	cmp	r1, #105	; 0x69
 80051cc:	d1f6      	bne.n	80051bc <_printf_i+0x30>
 80051ce:	6820      	ldr	r0, [r4, #0]
 80051d0:	6813      	ldr	r3, [r2, #0]
 80051d2:	0605      	lsls	r5, r0, #24
 80051d4:	f103 0104 	add.w	r1, r3, #4
 80051d8:	d52a      	bpl.n	8005230 <_printf_i+0xa4>
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6011      	str	r1, [r2, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da03      	bge.n	80051ea <_printf_i+0x5e>
 80051e2:	222d      	movs	r2, #45	; 0x2d
 80051e4:	425b      	negs	r3, r3
 80051e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80051ea:	486f      	ldr	r0, [pc, #444]	; (80053a8 <_printf_i+0x21c>)
 80051ec:	220a      	movs	r2, #10
 80051ee:	e039      	b.n	8005264 <_printf_i+0xd8>
 80051f0:	2973      	cmp	r1, #115	; 0x73
 80051f2:	f000 809d 	beq.w	8005330 <_printf_i+0x1a4>
 80051f6:	d808      	bhi.n	800520a <_printf_i+0x7e>
 80051f8:	296f      	cmp	r1, #111	; 0x6f
 80051fa:	d020      	beq.n	800523e <_printf_i+0xb2>
 80051fc:	2970      	cmp	r1, #112	; 0x70
 80051fe:	d1dd      	bne.n	80051bc <_printf_i+0x30>
 8005200:	6823      	ldr	r3, [r4, #0]
 8005202:	f043 0320 	orr.w	r3, r3, #32
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	e003      	b.n	8005212 <_printf_i+0x86>
 800520a:	2975      	cmp	r1, #117	; 0x75
 800520c:	d017      	beq.n	800523e <_printf_i+0xb2>
 800520e:	2978      	cmp	r1, #120	; 0x78
 8005210:	d1d4      	bne.n	80051bc <_printf_i+0x30>
 8005212:	2378      	movs	r3, #120	; 0x78
 8005214:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005218:	4864      	ldr	r0, [pc, #400]	; (80053ac <_printf_i+0x220>)
 800521a:	e055      	b.n	80052c8 <_printf_i+0x13c>
 800521c:	6813      	ldr	r3, [r2, #0]
 800521e:	1d19      	adds	r1, r3, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6011      	str	r1, [r2, #0]
 8005224:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005228:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800522c:	2301      	movs	r3, #1
 800522e:	e08c      	b.n	800534a <_printf_i+0x1be>
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6011      	str	r1, [r2, #0]
 8005234:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005238:	bf18      	it	ne
 800523a:	b21b      	sxthne	r3, r3
 800523c:	e7cf      	b.n	80051de <_printf_i+0x52>
 800523e:	6813      	ldr	r3, [r2, #0]
 8005240:	6825      	ldr	r5, [r4, #0]
 8005242:	1d18      	adds	r0, r3, #4
 8005244:	6010      	str	r0, [r2, #0]
 8005246:	0628      	lsls	r0, r5, #24
 8005248:	d501      	bpl.n	800524e <_printf_i+0xc2>
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	e002      	b.n	8005254 <_printf_i+0xc8>
 800524e:	0668      	lsls	r0, r5, #25
 8005250:	d5fb      	bpl.n	800524a <_printf_i+0xbe>
 8005252:	881b      	ldrh	r3, [r3, #0]
 8005254:	4854      	ldr	r0, [pc, #336]	; (80053a8 <_printf_i+0x21c>)
 8005256:	296f      	cmp	r1, #111	; 0x6f
 8005258:	bf14      	ite	ne
 800525a:	220a      	movne	r2, #10
 800525c:	2208      	moveq	r2, #8
 800525e:	2100      	movs	r1, #0
 8005260:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005264:	6865      	ldr	r5, [r4, #4]
 8005266:	60a5      	str	r5, [r4, #8]
 8005268:	2d00      	cmp	r5, #0
 800526a:	f2c0 8095 	blt.w	8005398 <_printf_i+0x20c>
 800526e:	6821      	ldr	r1, [r4, #0]
 8005270:	f021 0104 	bic.w	r1, r1, #4
 8005274:	6021      	str	r1, [r4, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d13d      	bne.n	80052f6 <_printf_i+0x16a>
 800527a:	2d00      	cmp	r5, #0
 800527c:	f040 808e 	bne.w	800539c <_printf_i+0x210>
 8005280:	4665      	mov	r5, ip
 8005282:	2a08      	cmp	r2, #8
 8005284:	d10b      	bne.n	800529e <_printf_i+0x112>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	07db      	lsls	r3, r3, #31
 800528a:	d508      	bpl.n	800529e <_printf_i+0x112>
 800528c:	6923      	ldr	r3, [r4, #16]
 800528e:	6862      	ldr	r2, [r4, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	bfde      	ittt	le
 8005294:	2330      	movle	r3, #48	; 0x30
 8005296:	f805 3c01 	strble.w	r3, [r5, #-1]
 800529a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800529e:	ebac 0305 	sub.w	r3, ip, r5
 80052a2:	6123      	str	r3, [r4, #16]
 80052a4:	f8cd 8000 	str.w	r8, [sp]
 80052a8:	463b      	mov	r3, r7
 80052aa:	aa03      	add	r2, sp, #12
 80052ac:	4621      	mov	r1, r4
 80052ae:	4630      	mov	r0, r6
 80052b0:	f7ff fef6 	bl	80050a0 <_printf_common>
 80052b4:	3001      	adds	r0, #1
 80052b6:	d14d      	bne.n	8005354 <_printf_i+0x1c8>
 80052b8:	f04f 30ff 	mov.w	r0, #4294967295
 80052bc:	b005      	add	sp, #20
 80052be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052c2:	4839      	ldr	r0, [pc, #228]	; (80053a8 <_printf_i+0x21c>)
 80052c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052c8:	6813      	ldr	r3, [r2, #0]
 80052ca:	6821      	ldr	r1, [r4, #0]
 80052cc:	1d1d      	adds	r5, r3, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6015      	str	r5, [r2, #0]
 80052d2:	060a      	lsls	r2, r1, #24
 80052d4:	d50b      	bpl.n	80052ee <_printf_i+0x162>
 80052d6:	07ca      	lsls	r2, r1, #31
 80052d8:	bf44      	itt	mi
 80052da:	f041 0120 	orrmi.w	r1, r1, #32
 80052de:	6021      	strmi	r1, [r4, #0]
 80052e0:	b91b      	cbnz	r3, 80052ea <_printf_i+0x15e>
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	f022 0220 	bic.w	r2, r2, #32
 80052e8:	6022      	str	r2, [r4, #0]
 80052ea:	2210      	movs	r2, #16
 80052ec:	e7b7      	b.n	800525e <_printf_i+0xd2>
 80052ee:	064d      	lsls	r5, r1, #25
 80052f0:	bf48      	it	mi
 80052f2:	b29b      	uxthmi	r3, r3
 80052f4:	e7ef      	b.n	80052d6 <_printf_i+0x14a>
 80052f6:	4665      	mov	r5, ip
 80052f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80052fc:	fb02 3311 	mls	r3, r2, r1, r3
 8005300:	5cc3      	ldrb	r3, [r0, r3]
 8005302:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005306:	460b      	mov	r3, r1
 8005308:	2900      	cmp	r1, #0
 800530a:	d1f5      	bne.n	80052f8 <_printf_i+0x16c>
 800530c:	e7b9      	b.n	8005282 <_printf_i+0xf6>
 800530e:	6813      	ldr	r3, [r2, #0]
 8005310:	6825      	ldr	r5, [r4, #0]
 8005312:	6961      	ldr	r1, [r4, #20]
 8005314:	1d18      	adds	r0, r3, #4
 8005316:	6010      	str	r0, [r2, #0]
 8005318:	0628      	lsls	r0, r5, #24
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	d501      	bpl.n	8005322 <_printf_i+0x196>
 800531e:	6019      	str	r1, [r3, #0]
 8005320:	e002      	b.n	8005328 <_printf_i+0x19c>
 8005322:	066a      	lsls	r2, r5, #25
 8005324:	d5fb      	bpl.n	800531e <_printf_i+0x192>
 8005326:	8019      	strh	r1, [r3, #0]
 8005328:	2300      	movs	r3, #0
 800532a:	6123      	str	r3, [r4, #16]
 800532c:	4665      	mov	r5, ip
 800532e:	e7b9      	b.n	80052a4 <_printf_i+0x118>
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	1d19      	adds	r1, r3, #4
 8005334:	6011      	str	r1, [r2, #0]
 8005336:	681d      	ldr	r5, [r3, #0]
 8005338:	6862      	ldr	r2, [r4, #4]
 800533a:	2100      	movs	r1, #0
 800533c:	4628      	mov	r0, r5
 800533e:	f7fa ff4f 	bl	80001e0 <memchr>
 8005342:	b108      	cbz	r0, 8005348 <_printf_i+0x1bc>
 8005344:	1b40      	subs	r0, r0, r5
 8005346:	6060      	str	r0, [r4, #4]
 8005348:	6863      	ldr	r3, [r4, #4]
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	2300      	movs	r3, #0
 800534e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005352:	e7a7      	b.n	80052a4 <_printf_i+0x118>
 8005354:	6923      	ldr	r3, [r4, #16]
 8005356:	462a      	mov	r2, r5
 8005358:	4639      	mov	r1, r7
 800535a:	4630      	mov	r0, r6
 800535c:	47c0      	blx	r8
 800535e:	3001      	adds	r0, #1
 8005360:	d0aa      	beq.n	80052b8 <_printf_i+0x12c>
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	079b      	lsls	r3, r3, #30
 8005366:	d413      	bmi.n	8005390 <_printf_i+0x204>
 8005368:	68e0      	ldr	r0, [r4, #12]
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	4298      	cmp	r0, r3
 800536e:	bfb8      	it	lt
 8005370:	4618      	movlt	r0, r3
 8005372:	e7a3      	b.n	80052bc <_printf_i+0x130>
 8005374:	2301      	movs	r3, #1
 8005376:	464a      	mov	r2, r9
 8005378:	4639      	mov	r1, r7
 800537a:	4630      	mov	r0, r6
 800537c:	47c0      	blx	r8
 800537e:	3001      	adds	r0, #1
 8005380:	d09a      	beq.n	80052b8 <_printf_i+0x12c>
 8005382:	3501      	adds	r5, #1
 8005384:	68e3      	ldr	r3, [r4, #12]
 8005386:	9a03      	ldr	r2, [sp, #12]
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	42ab      	cmp	r3, r5
 800538c:	dcf2      	bgt.n	8005374 <_printf_i+0x1e8>
 800538e:	e7eb      	b.n	8005368 <_printf_i+0x1dc>
 8005390:	2500      	movs	r5, #0
 8005392:	f104 0919 	add.w	r9, r4, #25
 8005396:	e7f5      	b.n	8005384 <_printf_i+0x1f8>
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1ac      	bne.n	80052f6 <_printf_i+0x16a>
 800539c:	7803      	ldrb	r3, [r0, #0]
 800539e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a6:	e76c      	b.n	8005282 <_printf_i+0xf6>
 80053a8:	0800576d 	.word	0x0800576d
 80053ac:	0800577e 	.word	0x0800577e

080053b0 <memmove>:
 80053b0:	4288      	cmp	r0, r1
 80053b2:	b510      	push	{r4, lr}
 80053b4:	eb01 0302 	add.w	r3, r1, r2
 80053b8:	d807      	bhi.n	80053ca <memmove+0x1a>
 80053ba:	1e42      	subs	r2, r0, #1
 80053bc:	4299      	cmp	r1, r3
 80053be:	d00a      	beq.n	80053d6 <memmove+0x26>
 80053c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80053c8:	e7f8      	b.n	80053bc <memmove+0xc>
 80053ca:	4283      	cmp	r3, r0
 80053cc:	d9f5      	bls.n	80053ba <memmove+0xa>
 80053ce:	1881      	adds	r1, r0, r2
 80053d0:	1ad2      	subs	r2, r2, r3
 80053d2:	42d3      	cmn	r3, r2
 80053d4:	d100      	bne.n	80053d8 <memmove+0x28>
 80053d6:	bd10      	pop	{r4, pc}
 80053d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80053e0:	e7f7      	b.n	80053d2 <memmove+0x22>

080053e2 <_realloc_r>:
 80053e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e4:	4607      	mov	r7, r0
 80053e6:	4614      	mov	r4, r2
 80053e8:	460e      	mov	r6, r1
 80053ea:	b921      	cbnz	r1, 80053f6 <_realloc_r+0x14>
 80053ec:	4611      	mov	r1, r2
 80053ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053f2:	f7ff bc77 	b.w	8004ce4 <_malloc_r>
 80053f6:	b922      	cbnz	r2, 8005402 <_realloc_r+0x20>
 80053f8:	f7ff fc26 	bl	8004c48 <_free_r>
 80053fc:	4625      	mov	r5, r4
 80053fe:	4628      	mov	r0, r5
 8005400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005402:	f000 f814 	bl	800542e <_malloc_usable_size_r>
 8005406:	42a0      	cmp	r0, r4
 8005408:	d20f      	bcs.n	800542a <_realloc_r+0x48>
 800540a:	4621      	mov	r1, r4
 800540c:	4638      	mov	r0, r7
 800540e:	f7ff fc69 	bl	8004ce4 <_malloc_r>
 8005412:	4605      	mov	r5, r0
 8005414:	2800      	cmp	r0, #0
 8005416:	d0f2      	beq.n	80053fe <_realloc_r+0x1c>
 8005418:	4631      	mov	r1, r6
 800541a:	4622      	mov	r2, r4
 800541c:	f7ff fc00 	bl	8004c20 <memcpy>
 8005420:	4631      	mov	r1, r6
 8005422:	4638      	mov	r0, r7
 8005424:	f7ff fc10 	bl	8004c48 <_free_r>
 8005428:	e7e9      	b.n	80053fe <_realloc_r+0x1c>
 800542a:	4635      	mov	r5, r6
 800542c:	e7e7      	b.n	80053fe <_realloc_r+0x1c>

0800542e <_malloc_usable_size_r>:
 800542e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005432:	1f18      	subs	r0, r3, #4
 8005434:	2b00      	cmp	r3, #0
 8005436:	bfbc      	itt	lt
 8005438:	580b      	ldrlt	r3, [r1, r0]
 800543a:	18c0      	addlt	r0, r0, r3
 800543c:	4770      	bx	lr
	...

08005440 <_init>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr

0800544c <_fini>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	bf00      	nop
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr
