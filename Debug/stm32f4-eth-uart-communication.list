
stm32f4-eth-uart-communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005334  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  080054c4  080054c4  000154c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005788  08005788  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005790  08005790  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005794  08005794  00015794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  2000009c  08005834  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009b4  08005834  000209b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b20a  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f29  00000000  00000000  0002b2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002d200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d8  00000000  00000000  0002dcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000211c7  00000000  00000000  0002e6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008a56  00000000  00000000  0004f86f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8050  00000000  00000000  000582c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120315  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff8  00000000  00000000  00120390  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054ac 	.word	0x080054ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	080054ac 	.word	0x080054ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <init_Connection>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_Connection() {
 8000580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000584:	b09e      	sub	sp, #120	; 0x78
 8000586:	af0e      	add	r7, sp, #56	; 0x38
    UART_Printf("\r\ninit () llamado!\r\n");
 8000588:	48b5      	ldr	r0, [pc, #724]	; (8000860 <init_Connection+0x2e0>)
 800058a:	f000 fb0f 	bl	8000bac <UART_Printf>

    UART_Printf("Registro de devoluciones de llamada del W5500...\r\n");
 800058e:	48b5      	ldr	r0, [pc, #724]	; (8000864 <init_Connection+0x2e4>)
 8000590:	f000 fb0c 	bl	8000bac <UART_Printf>
    reg_wizchip_cs_cbfunc(select_CS, unselect_CS);
 8000594:	49b4      	ldr	r1, [pc, #720]	; (8000868 <init_Connection+0x2e8>)
 8000596:	48b5      	ldr	r0, [pc, #724]	; (800086c <init_Connection+0x2ec>)
 8000598:	f004 f960 	bl	800485c <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(read_Byte, write_Byte);
 800059c:	49b4      	ldr	r1, [pc, #720]	; (8000870 <init_Connection+0x2f0>)
 800059e:	48b5      	ldr	r0, [pc, #724]	; (8000874 <init_Connection+0x2f4>)
 80005a0:	f004 f980 	bl	80048a4 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(read_Buff, write_Buff);
 80005a4:	49b4      	ldr	r1, [pc, #720]	; (8000878 <init_Connection+0x2f8>)
 80005a6:	48b5      	ldr	r0, [pc, #724]	; (800087c <init_Connection+0x2fc>)
 80005a8:	f004 f9a8 	bl	80048fc <reg_wizchip_spiburst_cbfunc>

    UART_Printf("Iniciando funcion wizchip_init ()\r\n");
 80005ac:	48b4      	ldr	r0, [pc, #720]	; (8000880 <init_Connection+0x300>)
 80005ae:	f000 fafd 	bl	8000bac <UART_Printf>
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80005b2:	4ab4      	ldr	r2, [pc, #720]	; (8000884 <init_Connection+0x304>)
 80005b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005bc:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80005c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80005c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005c8:	4611      	mov	r1, r2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fa0e 	bl	80049ec <wizchip_init>

    wiz_NetInfo net_info = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
 80005e0:	f8c3 2013 	str.w	r2, [r3, #19]
 80005e4:	2308      	movs	r3, #8
 80005e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80005ea:	23dc      	movs	r3, #220	; 0xdc
 80005ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80005f0:	23ab      	movs	r3, #171	; 0xab
 80005f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80005f6:	23cd      	movs	r3, #205	; 0xcd
 80005f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005fc:	23ef      	movs	r3, #239	; 0xef
 80005fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8000602:	23c0      	movs	r3, #192	; 0xc0
 8000604:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000608:	23a8      	movs	r3, #168	; 0xa8
 800060a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800060e:	2314      	movs	r3, #20
 8000610:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000614:	23ff      	movs	r3, #255	; 0xff
 8000616:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800061a:	23ff      	movs	r3, #255	; 0xff
 800061c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000620:	23ff      	movs	r3, #255	; 0xff
 8000622:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8000626:	23c0      	movs	r3, #192	; 0xc0
 8000628:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800062c:	23a8      	movs	r3, #168	; 0xa8
 800062e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000632:	2301      	movs	r3, #1
 8000634:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8000638:	2308      	movs	r3, #8
 800063a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800063e:	2308      	movs	r3, #8
 8000640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8000644:	2308      	movs	r3, #8
 8000646:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800064a:	2308      	movs	r3, #8
 800064c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                             .sn 	= {255, 255, 255, 0},					// Subnet mask
                             .gw 	= {192, 168, 0, 1},					// Gateway address
    						 .dns 	= {8, 8, 8, 8}};					// DNS


     UART_Printf("Iniciando funcion wizchip_setnetinfo ()\r\n");
 8000650:	488d      	ldr	r0, [pc, #564]	; (8000888 <init_Connection+0x308>)
 8000652:	f000 faab 	bl	8000bac <UART_Printf>
     wizchip_setnetinfo(&net_info);
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fa52 	bl	8004b04 <wizchip_setnetinfo>
     wizchip_getnetinfo(&net_info);
 8000660:	f107 0320 	add.w	r3, r7, #32
 8000664:	4618      	mov	r0, r3
 8000666:	f004 fa8d 	bl	8004b84 <wizchip_getnetinfo>

    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800066a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800066e:	469c      	mov	ip, r3
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8000670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8000674:	469e      	mov	lr, r3
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 8000676:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800067a:	4698      	mov	r8, r3
        net_info.ip[0], net_info.ip[1], net_info.ip[2], net_info.ip[3],
 800067c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8000680:	4618      	mov	r0, r3
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8000682:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8000686:	461c      	mov	r4, r3
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8000688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800068c:	461d      	mov	r5, r3
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 800068e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8000692:	461e      	mov	r6, r3
        net_info.gw[0], net_info.gw[1], net_info.gw[2], net_info.gw[3],
 8000694:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 8000698:	617b      	str	r3, [r7, #20]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 800069a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 800069e:	613b      	str	r3, [r7, #16]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80006a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006a4:	60fb      	str	r3, [r7, #12]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80006a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006aa:	60bb      	str	r3, [r7, #8]
        net_info.sn[0], net_info.sn[1], net_info.sn[2], net_info.sn[3],
 80006ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006b0:	607b      	str	r3, [r7, #4]
		net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]
 80006b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006b6:	603b      	str	r3, [r7, #0]
		net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]
 80006b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006bc:	4619      	mov	r1, r3
		net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]
 80006be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006c2:	461a      	mov	r2, r3
		net_info.dns[0], net_info.dns[1], net_info.dns[2], net_info.dns[3]
 80006c4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    UART_Printf("IP:  %d.%d.%d.%d\r\nGW:  %d.%d.%d.%d\r\nNet: %d.%d.%d.%d\r\nDNS: %d.%d.%d.%d\r\n",
 80006c8:	930c      	str	r3, [sp, #48]	; 0x30
 80006ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80006cc:	910a      	str	r1, [sp, #40]	; 0x28
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	9209      	str	r2, [sp, #36]	; 0x24
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	9208      	str	r2, [sp, #32]
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	9207      	str	r2, [sp, #28]
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	9206      	str	r2, [sp, #24]
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	9205      	str	r2, [sp, #20]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	9304      	str	r3, [sp, #16]
 80006e6:	9603      	str	r6, [sp, #12]
 80006e8:	9502      	str	r5, [sp, #8]
 80006ea:	9401      	str	r4, [sp, #4]
 80006ec:	9000      	str	r0, [sp, #0]
 80006ee:	4643      	mov	r3, r8
 80006f0:	4672      	mov	r2, lr
 80006f2:	4661      	mov	r1, ip
 80006f4:	4865      	ldr	r0, [pc, #404]	; (800088c <init_Connection+0x30c>)
 80006f6:	f000 fa59 	bl	8000bac <UART_Printf>
    );

    reconnect:
      /* Abra el socket 0 como TCP_SOCKET con el puerto 5000 */
      if((retVal = socket(0, Sn_MR_TCP, 5000, 0)) == 0) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000700:	2101      	movs	r1, #1
 8000702:	2000      	movs	r0, #0
 8000704:	f003 fb2e 	bl	8003d64 <socket>
 8000708:	4603      	mov	r3, r0
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b60      	ldr	r3, [pc, #384]	; (8000890 <init_Connection+0x310>)
 800070e:	701a      	strb	r2, [r3, #0]
 8000710:	4b5f      	ldr	r3, [pc, #380]	; (8000890 <init_Connection+0x310>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	f040 8096 	bne.w	8000846 <init_Connection+0x2c6>
    	  /* Ponga el Socket en modo ESCUCHAR. Esto significa que estamos creando un servidor TCP. */
    	  if((retVal = listen(0)) == SOCK_OK) {
 800071a:	2000      	movs	r0, #0
 800071c:	f003 fca6 	bl	800406c <listen>
 8000720:	4603      	mov	r3, r0
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b5a      	ldr	r3, [pc, #360]	; (8000890 <init_Connection+0x310>)
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	4b59      	ldr	r3, [pc, #356]	; (8000890 <init_Connection+0x310>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	f040 8086 	bne.w	800083e <init_Connection+0x2be>
    		  UART_Printf("Esperando conexion con el Socket...\r\n");
 8000732:	4858      	ldr	r0, [pc, #352]	; (8000894 <init_Connection+0x314>)
 8000734:	f000 fa3a 	bl	8000bac <UART_Printf>
    		  /* Mientras el socket está en modo ESCUCHAR, esperamos una conexión remota */
    		  while((sockStatus = getSn_SR(0)) == SOCK_LISTEN) HAL_Delay(500);
 8000738:	e003      	b.n	8000742 <init_Connection+0x1c2>
 800073a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800073e:	f000 fc97 	bl	8001070 <HAL_Delay>
 8000742:	f44f 7042 	mov.w	r0, #776	; 0x308
 8000746:	f003 f865 	bl	8003814 <WIZCHIP_READ>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	4b52      	ldr	r3, [pc, #328]	; (8000898 <init_Connection+0x318>)
 8000750:	701a      	strb	r2, [r3, #0]
 8000752:	4b51      	ldr	r3, [pc, #324]	; (8000898 <init_Connection+0x318>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b14      	cmp	r3, #20
 8000758:	d0ef      	beq.n	800073a <init_Connection+0x1ba>

    		  UART_Printf("Conexion con el Socket Exitosa!\r\n");
 800075a:	4850      	ldr	r0, [pc, #320]	; (800089c <init_Connection+0x31c>)
 800075c:	f000 fa26 	bl	8000bac <UART_Printf>
    		  okReceptionUart = 1;
 8000760:	4b4f      	ldr	r3, [pc, #316]	; (80008a0 <init_Connection+0x320>)
 8000762:	2201      	movs	r2, #1
 8000764:	701a      	strb	r2, [r3, #0]
    		  /* Si la conexión está ESTABLECIDA con peer remoto*/
    		  while(1) {
    			  /* If connection is ESTABLISHED with remote peer */
    			  if((sockStatus = getSn_SR(0)) == SOCK_ESTABLISHED) {
 8000766:	f44f 7042 	mov.w	r0, #776	; 0x308
 800076a:	f003 f853 	bl	8003814 <WIZCHIP_READ>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	4b49      	ldr	r3, [pc, #292]	; (8000898 <init_Connection+0x318>)
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	4b48      	ldr	r3, [pc, #288]	; (8000898 <init_Connection+0x318>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b17      	cmp	r3, #23
 800077c:	d158      	bne.n	8000830 <init_Connection+0x2b0>
    				  uint8_t remoteIP[4];
    				  uint16_t remotePort;
    				  /* Enviamos mensaje recibido de Uart */
//    				  Ok = HAL_UART_Receive(&huart2, recepcionUart2, 1, 100);
    				  if(!okReceptionUart){
 800077e:	4b48      	ldr	r3, [pc, #288]	; (80008a0 <init_Connection+0x320>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d136      	bne.n	80007f4 <init_Connection+0x274>
    					  okReceptionUart = 1;
 8000786:	4b46      	ldr	r3, [pc, #280]	; (80008a0 <init_Connection+0x320>)
 8000788:	2201      	movs	r2, #1
 800078a:	701a      	strb	r2, [r3, #0]
    					  /* Recuperación del número de puerto y la IP del par remoto */
    					  getsockopt(0, SO_DESTIP, remoteIP);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	461a      	mov	r2, r3
 8000792:	2104      	movs	r1, #4
 8000794:	2000      	movs	r0, #0
 8000796:	f003 fee5 	bl	8004564 <getsockopt>
    					  getsockopt(0, SO_DESTPORT, (uint8_t*)&remotePort);
 800079a:	f107 031a 	add.w	r3, r7, #26
 800079e:	461a      	mov	r2, r3
 80007a0:	2105      	movs	r1, #5
 80007a2:	2000      	movs	r0, #0
 80007a4:	f003 fede 	bl	8004564 <getsockopt>
    					  UART_Printf("Conexion establecida con IP remota: %d.%d.%d.%d: %d\r\n", remoteIP[0], remoteIP[1], remoteIP[2], remoteIP[3], remotePort);
 80007a8:	7f3b      	ldrb	r3, [r7, #28]
 80007aa:	4619      	mov	r1, r3
 80007ac:	7f7b      	ldrb	r3, [r7, #29]
 80007ae:	4618      	mov	r0, r3
 80007b0:	7fbb      	ldrb	r3, [r7, #30]
 80007b2:	461c      	mov	r4, r3
 80007b4:	7ffb      	ldrb	r3, [r7, #31]
 80007b6:	8b7a      	ldrh	r2, [r7, #26]
 80007b8:	9201      	str	r2, [sp, #4]
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	4623      	mov	r3, r4
 80007be:	4602      	mov	r2, r0
 80007c0:	4838      	ldr	r0, [pc, #224]	; (80008a4 <init_Connection+0x324>)
 80007c2:	f000 f9f3 	bl	8000bac <UART_Printf>
    					  retVal = send(0, recepcionUart, sizeof(recepcionUart));
 80007c6:	2210      	movs	r2, #16
 80007c8:	4937      	ldr	r1, [pc, #220]	; (80008a8 <init_Connection+0x328>)
 80007ca:	2000      	movs	r0, #0
 80007cc:	f003 fd1e 	bl	800420c <send>
 80007d0:	4603      	mov	r3, r0
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b2e      	ldr	r3, [pc, #184]	; (8000890 <init_Connection+0x310>)
 80007d6:	701a      	strb	r2, [r3, #0]

    					  if( retVal == (int16_t)sizeof(recepcionUart)) UART_Printf("Mensaje enviado\r\n");
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <init_Connection+0x310>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b10      	cmp	r3, #16
 80007de:	d103      	bne.n	80007e8 <init_Connection+0x268>
 80007e0:	4832      	ldr	r0, [pc, #200]	; (80008ac <init_Connection+0x32c>)
 80007e2:	f000 f9e3 	bl	8000bac <UART_Printf>
 80007e6:	e005      	b.n	80007f4 <init_Connection+0x274>
    					  else UART_Printf( "Algo salio mal; Return Value: %d\r\n", retVal);
 80007e8:	4b29      	ldr	r3, [pc, #164]	; (8000890 <init_Connection+0x310>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4830      	ldr	r0, [pc, #192]	; (80008b0 <init_Connection+0x330>)
 80007f0:	f000 f9dc 	bl	8000bac <UART_Printf>

    				  }

    				  /* Enviamos mensaje recibido de Socket */

    				  if( recv(0,recepcionSocket, RX_SOCKET_BUFFER_RECEPTION) > 0) {
 80007f4:	220f      	movs	r2, #15
 80007f6:	492f      	ldr	r1, [pc, #188]	; (80008b4 <init_Connection+0x334>)
 80007f8:	2000      	movs	r0, #0
 80007fa:	f003 fe01 	bl	8004400 <recv>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	dd10      	ble.n	8000826 <init_Connection+0x2a6>
    					  answerSocket++;
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <init_Connection+0x338>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	3301      	adds	r3, #1
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <init_Connection+0x338>)
 800080e:	701a      	strb	r2, [r3, #0]
    					  if(answerSocket > 2 ){
 8000810:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <init_Connection+0x338>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b02      	cmp	r3, #2
 8000816:	d906      	bls.n	8000826 <init_Connection+0x2a6>
    						  answerSocket = 3;
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <init_Connection+0x338>)
 800081a:	2203      	movs	r2, #3
 800081c:	701a      	strb	r2, [r3, #0]
    						  UART_Printf( "Dato Recibido: %s\r\n", recepcionSocket);
 800081e:	4925      	ldr	r1, [pc, #148]	; (80008b4 <init_Connection+0x334>)
 8000820:	4826      	ldr	r0, [pc, #152]	; (80008bc <init_Connection+0x33c>)
 8000822:	f000 f9c3 	bl	8000bac <UART_Printf>
    					  }
    				 }

    				  HAL_Delay(500);
 8000826:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082a:	f000 fc21 	bl	8001070 <HAL_Delay>
 800082e:	e79a      	b.n	8000766 <init_Connection+0x1e6>
    			  }else {
    				  UART_Printf( "Algo salio mal; Status: %d\r\n", sockStatus); /* Algo salió mal con el par remoto, tal vez la conexión se cerró inesperadamente */
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <init_Connection+0x318>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	4822      	ldr	r0, [pc, #136]	; (80008c0 <init_Connection+0x340>)
 8000838:	f000 f9b8 	bl	8000bac <UART_Printf>
    				  break;
 800083c:	e009      	b.n	8000852 <init_Connection+0x2d2>
    			  }
    		  }

    	  } else UART_Printf("LISTEN¡Error!\r\n"); /* Ops: el socket no está en modo ESCUCHAR. Algo salió mal */
 800083e:	4821      	ldr	r0, [pc, #132]	; (80008c4 <init_Connection+0x344>)
 8000840:	f000 f9b4 	bl	8000bac <UART_Printf>
 8000844:	e005      	b.n	8000852 <init_Connection+0x2d2>

      } else UART_Printf("Algo salió mal; Return Value:%d\r\n", retVal); /* No se puede abrir el Socket. Esto significa que algo está mal con la configuración del W5100: ¿tal vez un problema de SPI? */
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <init_Connection+0x310>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	4619      	mov	r1, r3
 800084c:	481e      	ldr	r0, [pc, #120]	; (80008c8 <init_Connection+0x348>)
 800084e:	f000 f9ad 	bl	8000bac <UART_Printf>

      /* Cerramos el socket y volvemos a iniciar una conexión. */
      disconnect(0);
 8000852:	2000      	movs	r0, #0
 8000854:	f003 fc64 	bl	8004120 <disconnect>
      close(0);
 8000858:	2000      	movs	r0, #0
 800085a:	f003 fb99 	bl	8003f90 <close>

      goto reconnect;
 800085e:	e74c      	b.n	80006fa <init_Connection+0x17a>
 8000860:	080054c4 	.word	0x080054c4
 8000864:	080054dc 	.word	0x080054dc
 8000868:	08000c19 	.word	0x08000c19
 800086c:	08000c01 	.word	0x08000c01
 8000870:	08000c9b 	.word	0x08000c9b
 8000874:	08000c81 	.word	0x08000c81
 8000878:	08000c59 	.word	0x08000c59
 800087c:	08000c31 	.word	0x08000c31
 8000880:	08005510 	.word	0x08005510
 8000884:	080056d4 	.word	0x080056d4
 8000888:	08005534 	.word	0x08005534
 800088c:	08005560 	.word	0x08005560
 8000890:	200004ec 	.word	0x200004ec
 8000894:	080055ac 	.word	0x080055ac
 8000898:	200005a8 	.word	0x200005a8
 800089c:	080055d4 	.word	0x080055d4
 80008a0:	20000000 	.word	0x20000000
 80008a4:	080055f8 	.word	0x080055f8
 80008a8:	200004f0 	.word	0x200004f0
 80008ac:	08005630 	.word	0x08005630
 80008b0:	08005644 	.word	0x08005644
 80008b4:	20000598 	.word	0x20000598
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	08005668 	.word	0x08005668
 80008c0:	0800567c 	.word	0x0800567c
 80008c4:	0800569c 	.word	0x0800569c
 80008c8:	080056b0 	.word	0x080056b0

080008cc <HAL_UART_RxCpltCallback>:

}

void HAL_UART_RxCpltCallback ( UART_HandleTypeDef *huart ){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_UART_RxCpltCallback+0x38>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d109      	bne.n	80008f2 <HAL_UART_RxCpltCallback+0x26>
		okReceptionUart = HAL_UART_Receive_IT(&huart2, recepcionUart, RX_UART_BUFFER_RECEPTION);
 80008de:	220f      	movs	r2, #15
 80008e0:	4909      	ldr	r1, [pc, #36]	; (8000908 <HAL_UART_RxCpltCallback+0x3c>)
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <HAL_UART_RxCpltCallback+0x40>)
 80008e4:	f002 f944 	bl	8002b70 <HAL_UART_Receive_IT>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_UART_RxCpltCallback+0x44>)
 80008ee:	701a      	strb	r2, [r3, #0]
	else
		HAL_UART_Receive_IT(&huart2, recepcionUart, RX_UART_BUFFER_RECEPTION);
}
 80008f0:	e004      	b.n	80008fc <HAL_UART_RxCpltCallback+0x30>
		HAL_UART_Receive_IT(&huart2, recepcionUart, RX_UART_BUFFER_RECEPTION);
 80008f2:	220f      	movs	r2, #15
 80008f4:	4904      	ldr	r1, [pc, #16]	; (8000908 <HAL_UART_RxCpltCallback+0x3c>)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <HAL_UART_RxCpltCallback+0x40>)
 80008f8:	f002 f93a 	bl	8002b70 <HAL_UART_Receive_IT>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40004400 	.word	0x40004400
 8000908:	200004f0 	.word	0x200004f0
 800090c:	20000558 	.word	0x20000558
 8000910:	20000000 	.word	0x20000000

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000918:	f000 fb38 	bl	8000f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091c:	f000 f812 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000920:	f000 f8ce 	bl	8000ac0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000924:	f000 f86c 	bl	8000a00 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000928:	f000 f8a0 	bl	8000a6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, recepcionUart, RX_UART_BUFFER_RECEPTION);
 800092c:	220f      	movs	r2, #15
 800092e:	4903      	ldr	r1, [pc, #12]	; (800093c <main+0x28>)
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <main+0x2c>)
 8000932:	f002 f91d 	bl	8002b70 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_Connection();
 8000936:	f7ff fe23 	bl	8000580 <init_Connection>

  while (1)
 800093a:	e7fe      	b.n	800093a <main+0x26>
 800093c:	200004f0 	.word	0x200004f0
 8000940:	20000558 	.word	0x20000558

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	; 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2230      	movs	r2, #48	; 0x30
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f004 f98b 	bl	8004c6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <SystemClock_Config+0xb4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <SystemClock_Config+0xb4>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <SystemClock_Config+0xb4>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2300      	movs	r3, #0
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <SystemClock_Config+0xb8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <SystemClock_Config+0xb8>)
 800098e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000992:	6013      	str	r3, [r2, #0]
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <SystemClock_Config+0xb8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	2310      	movs	r3, #16
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b0:	f107 0320 	add.w	r3, r7, #32
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fe65 	bl	8001684 <HAL_RCC_OscConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80009c0:	f000 f979 	bl	8000cb6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c4:	230f      	movs	r3, #15
 80009c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 f8c0 	bl	8001b64 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009ea:	f000 f964 	bl	8000cb6 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	; 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a04:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a06:	4a18      	ldr	r2, [pc, #96]	; (8000a68 <MX_SPI1_Init+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a4c:	220a      	movs	r2, #10
 8000a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_SPI1_Init+0x64>)
 8000a52:	f001 fa53 	bl	8001efc <HAL_SPI_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a5c:	f000 f92b 	bl	8000cb6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000500 	.word	0x20000500
 8000a68:	40013000 	.word	0x40013000

08000a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_USART2_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f001 ff7e 	bl	80029a4 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aae:	f000 f902 	bl	8000cb6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000558 	.word	0x20000558
 8000abc:	40004400 	.word	0x40004400

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a30      	ldr	r2, [pc, #192]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000ae0:	f043 0310 	orr.w	r3, r3, #16
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0310 	and.w	r3, r3, #16
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a29      	ldr	r2, [pc, #164]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b27      	ldr	r3, [pc, #156]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a22      	ldr	r2, [pc, #136]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b19      	ldr	r3, [pc, #100]	; (8000ba0 <MX_GPIO_Init+0xe0>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2120      	movs	r1, #32
 8000b4a:	4816      	ldr	r0, [pc, #88]	; (8000ba4 <MX_GPIO_Init+0xe4>)
 8000b4c:	f000 fd80 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led1_GPIO_Port, Led1_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b56:	4814      	ldr	r0, [pc, #80]	; (8000ba8 <MX_GPIO_Init+0xe8>)
 8000b58:	f000 fd7a 	bl	8001650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ETH_CS_Pin */
  GPIO_InitStruct.Pin = ETH_CS_Pin;
 8000b5c:	2320      	movs	r3, #32
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ETH_CS_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_GPIO_Init+0xe4>)
 8000b74:	f000 fbd2 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : Led1_Pin */
  GPIO_InitStruct.Pin = Led1_Pin;
 8000b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Led1_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_GPIO_Init+0xe8>)
 8000b92:	f000 fbc3 	bl	800131c <HAL_GPIO_Init>

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40020c00 	.word	0x40020c00

08000bac <UART_Printf>:

/* USER CODE BEGIN 4 */
void UART_Printf(const char* fmt, ...) {
 8000bac:	b40f      	push	{r0, r1, r2, r3}
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b0c2      	sub	sp, #264	; 0x108
 8000bb2:	af00      	add	r7, sp, #0
      char buff[256];
      va_list args;
      va_start(args, fmt);
 8000bb4:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	601a      	str	r2, [r3, #0]
      vsnprintf(buff, sizeof(buff), fmt, args);
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	f107 0008 	add.w	r0, r7, #8
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bcc:	f004 f93c 	bl	8004e48 <vsniprintf>
      HAL_UART_Transmit(&huart2, (uint8_t*)buff, strlen(buff), HAL_MAX_DELAY);
 8000bd0:	f107 0308 	add.w	r3, r7, #8
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fafb 	bl	80001d0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	f107 0108 	add.w	r1, r7, #8
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <UART_Printf+0x50>)
 8000be8:	f001 ff29 	bl	8002a3e <HAL_UART_Transmit>
      va_end(args);
}
 8000bec:	bf00      	nop
 8000bee:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr
 8000bfc:	20000558 	.word	0x20000558

08000c00 <select_CS>:


  void select_CS(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
      HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2120      	movs	r1, #32
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <select_CS+0x14>)
 8000c0a:	f000 fd21 	bl	8001650 <HAL_GPIO_WritePin>
  }
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <unselect_CS>:

  void unselect_CS(void) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
      HAL_GPIO_WritePin(ETH_CS_GPIO_Port, ETH_CS_Pin, GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2120      	movs	r1, #32
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <unselect_CS+0x14>)
 8000c22:	f000 fd15 	bl	8001650 <HAL_GPIO_WritePin>
  }
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40021000 	.word	0x40021000

08000c30 <read_Buff>:

  void read_Buff( uint8_t* buff, uint16_t len) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
      HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 8000c3c:	887a      	ldrh	r2, [r7, #2]
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4803      	ldr	r0, [pc, #12]	; (8000c54 <read_Buff+0x24>)
 8000c46:	f001 faf1 	bl	800222c <HAL_SPI_Receive>
  }
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000500 	.word	0x20000500

08000c58 <write_Buff>:

  void write_Buff(uint8_t* buff, uint16_t len) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	807b      	strh	r3, [r7, #2]
      HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8000c64:	887a      	ldrh	r2, [r7, #2]
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <write_Buff+0x24>)
 8000c6e:	f001 f9a9 	bl	8001fc4 <HAL_SPI_Transmit>
  }
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000500 	.word	0x20000500

08000c80 <read_Byte>:

  uint8_t read_Byte(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
      uint8_t byte;
      read_Buff(&byte, sizeof(byte));
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ffd0 	bl	8000c30 <read_Buff>
      return byte;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
  }
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <write_Byte>:

  void write_Byte(uint8_t byte) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	71fb      	strb	r3, [r7, #7]
      write_Buff(&byte, sizeof(byte));
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ffd5 	bl	8000c58 <write_Buff>
  }
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <HAL_SPI_MspInit+0x84>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d12b      	bne.n	8000d8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	4a17      	ldr	r2, [pc, #92]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d44:	6453      	str	r3, [r2, #68]	; 0x44
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_SPI_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d6e:	2338      	movs	r3, #56	; 0x38
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_SPI_MspInit+0x8c>)
 8000d8a:	f000 fac7 	bl	800131c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3728      	adds	r7, #40	; 0x28
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40013000 	.word	0x40013000
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	40020400 	.word	0x40020400

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <HAL_UART_MspInit+0x94>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d133      	bne.n	8000e2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a14      	ldr	r2, [pc, #80]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_UART_MspInit+0x98>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dfe:	230c      	movs	r3, #12
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e0e:	2307      	movs	r3, #7
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	4809      	ldr	r0, [pc, #36]	; (8000e40 <HAL_UART_MspInit+0x9c>)
 8000e1a:	f000 fa7f 	bl	800131c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2100      	movs	r1, #0
 8000e22:	2026      	movs	r0, #38	; 0x26
 8000e24:	f000 fa21 	bl	800126a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e28:	2026      	movs	r0, #38	; 0x26
 8000e2a:	f000 fa3a 	bl	80012a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	; 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40004400 	.word	0x40004400
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f8ca 	bl	8001030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea4:	4802      	ldr	r0, [pc, #8]	; (8000eb0 <USART2_IRQHandler+0x10>)
 8000ea6:	f001 feb9 	bl	8002c1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000558 	.word	0x20000558

08000eb4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <_sbrk+0x50>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d102      	bne.n	8000eca <_sbrk+0x16>
		heap_end = &end;
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <_sbrk+0x50>)
 8000ec6:	4a10      	ldr	r2, [pc, #64]	; (8000f08 <_sbrk+0x54>)
 8000ec8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <_sbrk+0x50>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <_sbrk+0x50>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	466a      	mov	r2, sp
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d907      	bls.n	8000eee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000ede:	f003 fe91 	bl	8004c04 <__errno>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	230c      	movs	r3, #12
 8000ee6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	e006      	b.n	8000efc <_sbrk+0x48>
	}

	heap_end += incr;
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <_sbrk+0x50>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	4a03      	ldr	r2, [pc, #12]	; (8000f04 <_sbrk+0x50>)
 8000ef8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200000bc 	.word	0x200000bc
 8000f08:	200009b8 	.word	0x200009b8

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <SystemInit+0x28>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <SystemInit+0x28>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SystemInit+0x28>)
 8000f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f26:	609a      	str	r2, [r3, #8]
#endif
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f3e:	e003      	b.n	8000f48 <LoopCopyDataInit>

08000f40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f46:	3104      	adds	r1, #4

08000f48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f50:	d3f6      	bcc.n	8000f40 <CopyDataInit>
  ldr  r2, =_sbss
 8000f52:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f54:	e002      	b.n	8000f5c <LoopFillZerobss>

08000f56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f58:	f842 3b04 	str.w	r3, [r2], #4

08000f5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f60:	d3f9      	bcc.n	8000f56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f62:	f7ff ffd3 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f66:	f003 fe53 	bl	8004c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6a:	f7ff fcd3 	bl	8000914 <main>
  bx  lr    
 8000f6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f74:	08005798 	.word	0x08005798
  ldr  r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f7c:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8000f80:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8000f84:	200009b4 	.word	0x200009b4

08000f88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f88:	e7fe      	b.n	8000f88 <ADC_IRQHandler>
	...

08000f8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HAL_Init+0x40>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_Init+0x40>)
 8000f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <HAL_Init+0x40>)
 8000fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x40>)
 8000fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 f94d 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fe80 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40023c00 	.word	0x40023c00

08000fd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 f965 	bl	80012be <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 f92d 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000004 	.word	0x20000004
 8001028:	2000000c 	.word	0x2000000c
 800102c:	20000008 	.word	0x20000008

08001030 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x20>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x24>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a04      	ldr	r2, [pc, #16]	; (8001054 <HAL_IncTick+0x24>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000000c 	.word	0x2000000c
 8001054:	200009ac 	.word	0x200009ac

08001058 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return uwTick;
 800105c:	4b03      	ldr	r3, [pc, #12]	; (800106c <HAL_GetTick+0x14>)
 800105e:	681b      	ldr	r3, [r3, #0]
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	200009ac 	.word	0x200009ac

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff ffee 	bl	8001058 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_Delay+0x40>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	461a      	mov	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001096:	bf00      	nop
 8001098:	f7ff ffde 	bl	8001058 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2000000c 	.word	0x2000000c

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db0b      	blt.n	8001142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <__NVIC_EnableIRQ+0x38>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000e100 	.word	0xe000e100

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	; (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	; (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff29 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff3e 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff31 	bl	8001118 <__NVIC_EnableIRQ>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffa2 	bl	8001210 <SysTick_Config>
 80012cc:	4603      	mov	r3, r0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00c      	b.n	800130e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2205      	movs	r2, #5
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	e16b      	b.n	8001610 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001338:	2201      	movs	r2, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	429a      	cmp	r2, r3
 8001352:	f040 815a 	bne.w	800160a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d00b      	beq.n	8001376 <HAL_GPIO_Init+0x5a>
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800136a:	2b11      	cmp	r3, #17
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	2b12      	cmp	r3, #18
 8001374:	d130      	bne.n	80013d8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 0201 	and.w	r2, r3, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0xfc>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b12      	cmp	r3, #18
 8001416:	d123      	bne.n	8001460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3208      	adds	r2, #8
 8001420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	69b9      	ldr	r1, [r7, #24]
 800145c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0203 	and.w	r2, r3, #3
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80b4 	beq.w	800160a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_GPIO_Init+0x308>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a5e      	ldr	r2, [pc, #376]	; (8001624 <HAL_GPIO_Init+0x308>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <HAL_GPIO_Init+0x308>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014be:	4a5a      	ldr	r2, [pc, #360]	; (8001628 <HAL_GPIO_Init+0x30c>)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a51      	ldr	r2, [pc, #324]	; (800162c <HAL_GPIO_Init+0x310>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d02b      	beq.n	8001542 <HAL_GPIO_Init+0x226>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a50      	ldr	r2, [pc, #320]	; (8001630 <HAL_GPIO_Init+0x314>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d025      	beq.n	800153e <HAL_GPIO_Init+0x222>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4f      	ldr	r2, [pc, #316]	; (8001634 <HAL_GPIO_Init+0x318>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d01f      	beq.n	800153a <HAL_GPIO_Init+0x21e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_GPIO_Init+0x31c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d019      	beq.n	8001536 <HAL_GPIO_Init+0x21a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4d      	ldr	r2, [pc, #308]	; (800163c <HAL_GPIO_Init+0x320>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d013      	beq.n	8001532 <HAL_GPIO_Init+0x216>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_GPIO_Init+0x324>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d00d      	beq.n	800152e <HAL_GPIO_Init+0x212>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4b      	ldr	r2, [pc, #300]	; (8001644 <HAL_GPIO_Init+0x328>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d007      	beq.n	800152a <HAL_GPIO_Init+0x20e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4a      	ldr	r2, [pc, #296]	; (8001648 <HAL_GPIO_Init+0x32c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d101      	bne.n	8001526 <HAL_GPIO_Init+0x20a>
 8001522:	2307      	movs	r3, #7
 8001524:	e00e      	b.n	8001544 <HAL_GPIO_Init+0x228>
 8001526:	2308      	movs	r3, #8
 8001528:	e00c      	b.n	8001544 <HAL_GPIO_Init+0x228>
 800152a:	2306      	movs	r3, #6
 800152c:	e00a      	b.n	8001544 <HAL_GPIO_Init+0x228>
 800152e:	2305      	movs	r3, #5
 8001530:	e008      	b.n	8001544 <HAL_GPIO_Init+0x228>
 8001532:	2304      	movs	r3, #4
 8001534:	e006      	b.n	8001544 <HAL_GPIO_Init+0x228>
 8001536:	2303      	movs	r3, #3
 8001538:	e004      	b.n	8001544 <HAL_GPIO_Init+0x228>
 800153a:	2302      	movs	r3, #2
 800153c:	e002      	b.n	8001544 <HAL_GPIO_Init+0x228>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <HAL_GPIO_Init+0x228>
 8001542:	2300      	movs	r3, #0
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	f002 0203 	and.w	r2, r2, #3
 800154a:	0092      	lsls	r2, r2, #2
 800154c:	4093      	lsls	r3, r2
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001554:	4934      	ldr	r1, [pc, #208]	; (8001628 <HAL_GPIO_Init+0x30c>)
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001562:	4b3a      	ldr	r3, [pc, #232]	; (800164c <HAL_GPIO_Init+0x330>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001586:	4a31      	ldr	r2, [pc, #196]	; (800164c <HAL_GPIO_Init+0x330>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_GPIO_Init+0x330>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015b0:	4a26      	ldr	r2, [pc, #152]	; (800164c <HAL_GPIO_Init+0x330>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_GPIO_Init+0x330>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <HAL_GPIO_Init+0x330>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	; (800164c <HAL_GPIO_Init+0x330>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001604:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_GPIO_Init+0x330>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3301      	adds	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	2b0f      	cmp	r3, #15
 8001614:	f67f ae90 	bls.w	8001338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001618:	bf00      	nop
 800161a:	3724      	adds	r7, #36	; 0x24
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40023800 	.word	0x40023800
 8001628:	40013800 	.word	0x40013800
 800162c:	40020000 	.word	0x40020000
 8001630:	40020400 	.word	0x40020400
 8001634:	40020800 	.word	0x40020800
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40021000 	.word	0x40021000
 8001640:	40021400 	.word	0x40021400
 8001644:	40021800 	.word	0x40021800
 8001648:	40021c00 	.word	0x40021c00
 800164c:	40013c00 	.word	0x40013c00

08001650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]
 800165c:	4613      	mov	r3, r2
 800165e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001660:	787b      	ldrb	r3, [r7, #1]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001666:	887a      	ldrh	r2, [r7, #2]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800166c:	e003      	b.n	8001676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	041a      	lsls	r2, r3, #16
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	619a      	str	r2, [r3, #24]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e25b      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d075      	beq.n	800178e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016a2:	4ba3      	ldr	r3, [pc, #652]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d00c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ae:	4ba0      	ldr	r3, [pc, #640]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d112      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ba:	4b9d      	ldr	r3, [pc, #628]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016c6:	d10b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	4b99      	ldr	r3, [pc, #612]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d05b      	beq.n	800178c <HAL_RCC_OscConfig+0x108>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d157      	bne.n	800178c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e236      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x74>
 80016ea:	4b91      	ldr	r3, [pc, #580]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a90      	ldr	r2, [pc, #576]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b8b      	ldr	r3, [pc, #556]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a8a      	ldr	r2, [pc, #552]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a87      	ldr	r2, [pc, #540]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 800171c:	4b84      	ldr	r3, [pc, #528]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a83      	ldr	r2, [pc, #524]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b81      	ldr	r3, [pc, #516]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a80      	ldr	r2, [pc, #512]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fc8c 	bl	8001058 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fc88 	bl	8001058 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e1fb      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b76      	ldr	r3, [pc, #472]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xc0>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fc78 	bl	8001058 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fc74 	bl	8001058 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1e7      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0xe8>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d063      	beq.n	8001862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800179a:	4b65      	ldr	r3, [pc, #404]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b62      	ldr	r3, [pc, #392]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d11c      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e1bb      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4952      	ldr	r1, [pc, #328]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	e03a      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f4:	4b4f      	ldr	r3, [pc, #316]	; (8001934 <HAL_RCC_OscConfig+0x2b0>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fc2d 	bl	8001058 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff fc29 	bl	8001058 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e19c      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	4b46      	ldr	r3, [pc, #280]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b43      	ldr	r3, [pc, #268]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4940      	ldr	r1, [pc, #256]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_OscConfig+0x2b0>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff fc0c 	bl	8001058 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff fc08 	bl	8001058 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e17b      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d030      	beq.n	80018d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d016      	beq.n	80018a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001876:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x2b4>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fbec 	bl	8001058 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff fbe8 	bl	8001058 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e15b      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x200>
 80018a2:	e015      	b.n	80018d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a4:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_OscConfig+0x2b4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fbd5 	bl	8001058 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff fbd1 	bl	8001058 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e144      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a0 	beq.w	8001a1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10f      	bne.n	800190e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	; 0x40
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_RCC_OscConfig+0x2ac>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800190a:	2301      	movs	r3, #1
 800190c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_OscConfig+0x2b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d121      	bne.n	800195e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_RCC_OscConfig+0x2b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_RCC_OscConfig+0x2b8>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001926:	f7ff fb97 	bl	8001058 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192c:	e011      	b.n	8001952 <HAL_RCC_OscConfig+0x2ce>
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	42470000 	.word	0x42470000
 8001938:	42470e80 	.word	0x42470e80
 800193c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001940:	f7ff fb8a 	bl	8001058 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0fd      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	4b81      	ldr	r3, [pc, #516]	; (8001b58 <HAL_RCC_OscConfig+0x4d4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d106      	bne.n	8001974 <HAL_RCC_OscConfig+0x2f0>
 8001966:	4b7d      	ldr	r3, [pc, #500]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196a:	4a7c      	ldr	r2, [pc, #496]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6713      	str	r3, [r2, #112]	; 0x70
 8001972:	e01c      	b.n	80019ae <HAL_RCC_OscConfig+0x32a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b05      	cmp	r3, #5
 800197a:	d10c      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 800197c:	4b77      	ldr	r3, [pc, #476]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 800197e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001980:	4a76      	ldr	r2, [pc, #472]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6713      	str	r3, [r2, #112]	; 0x70
 8001988:	4b74      	ldr	r3, [pc, #464]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	4a73      	ldr	r2, [pc, #460]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6713      	str	r3, [r2, #112]	; 0x70
 8001994:	e00b      	b.n	80019ae <HAL_RCC_OscConfig+0x32a>
 8001996:	4b71      	ldr	r3, [pc, #452]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199a:	4a70      	ldr	r2, [pc, #448]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70
 80019a2:	4b6e      	ldr	r3, [pc, #440]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a6d      	ldr	r2, [pc, #436]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d015      	beq.n	80019e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff fb4f 	bl	8001058 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7ff fb4b 	bl	8001058 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e0bc      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	4b61      	ldr	r3, [pc, #388]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d0ee      	beq.n	80019be <HAL_RCC_OscConfig+0x33a>
 80019e0:	e014      	b.n	8001a0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fb39 	bl	8001058 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff fb35 	bl	8001058 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e0a6      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	4b56      	ldr	r3, [pc, #344]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ee      	bne.n	80019ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a0c:	7dfb      	ldrb	r3, [r7, #23]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d105      	bne.n	8001a1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a12:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	4a51      	ldr	r2, [pc, #324]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	699b      	ldr	r3, [r3, #24]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 8092 	beq.w	8001b4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a28:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d05c      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d141      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3c:	4b48      	ldr	r3, [pc, #288]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fb09 	bl	8001058 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7ff fb05 	bl	8001058 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e078      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5c:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	019b      	lsls	r3, r3, #6
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	085b      	lsrs	r3, r3, #1
 8001a80:	3b01      	subs	r3, #1
 8001a82:	041b      	lsls	r3, r3, #16
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	061b      	lsls	r3, r3, #24
 8001a8c:	4933      	ldr	r1, [pc, #204]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a92:	4b33      	ldr	r3, [pc, #204]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fade 	bl	8001058 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff fada 	bl	8001058 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e04d      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
 8001abe:	e045      	b.n	8001b4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac0:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <HAL_RCC_OscConfig+0x4dc>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fac7 	bl	8001058 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ace:	f7ff fac3 	bl	8001058 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e036      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0x44a>
 8001aec:	e02e      	b.n	8001b4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e029      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <HAL_RCC_OscConfig+0x4d8>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d11c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d115      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d10d      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d106      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3718      	adds	r7, #24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40007000 	.word	0x40007000
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	42470060 	.word	0x42470060

08001b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0cc      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d90c      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b65      	ldr	r3, [pc, #404]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0b8      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb8:	4b59      	ldr	r3, [pc, #356]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd0:	4b53      	ldr	r3, [pc, #332]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b50      	ldr	r3, [pc, #320]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	494d      	ldr	r1, [pc, #308]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d044      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b47      	ldr	r3, [pc, #284]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d119      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e07f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d003      	beq.n	8001c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c22:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d109      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	4b3b      	ldr	r3, [pc, #236]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e067      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f023 0203 	bic.w	r2, r3, #3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4934      	ldr	r1, [pc, #208]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c54:	f7ff fa00 	bl	8001058 <HAL_GetTick>
 8001c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c5c:	f7ff f9fc 	bl	8001058 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e04f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c72:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 020c 	and.w	r2, r3, #12
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d1eb      	bne.n	8001c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c84:	4b25      	ldr	r3, [pc, #148]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d20c      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c92:	4b22      	ldr	r3, [pc, #136]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_RCC_ClockConfig+0x1b8>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e032      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4916      	ldr	r1, [pc, #88]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	490e      	ldr	r1, [pc, #56]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cea:	f000 f821 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cee:	4601      	mov	r1, r0
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	5cd3      	ldrb	r3, [r2, r3]
 8001cfe:	fa21 f303 	lsr.w	r3, r1, r3
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x1c8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff f960 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023c00 	.word	0x40023c00
 8001d20:	40023800 	.word	0x40023800
 8001d24:	080056dc 	.word	0x080056dc
 8001d28:	20000004 	.word	0x20000004
 8001d2c:	20000008 	.word	0x20000008

08001d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d46:	4b50      	ldr	r3, [pc, #320]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d007      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0x32>
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d008      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x38>
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 808d 	bne.w	8001e76 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d5e:	60bb      	str	r3, [r7, #8]
       break;
 8001d60:	e08c      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d62:	4b4b      	ldr	r3, [pc, #300]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d64:	60bb      	str	r3, [r7, #8]
      break;
 8001d66:	e089      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d68:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d72:	4b45      	ldr	r3, [pc, #276]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d023      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d7e:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	f04f 0400 	mov.w	r4, #0
 8001d88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	ea03 0501 	and.w	r5, r3, r1
 8001d94:	ea04 0602 	and.w	r6, r4, r2
 8001d98:	4a3d      	ldr	r2, [pc, #244]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d9a:	fb02 f106 	mul.w	r1, r2, r6
 8001d9e:	2200      	movs	r2, #0
 8001da0:	fb02 f205 	mul.w	r2, r2, r5
 8001da4:	440a      	add	r2, r1
 8001da6:	493a      	ldr	r1, [pc, #232]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x160>)
 8001da8:	fba5 0101 	umull	r0, r1, r5, r1
 8001dac:	1853      	adds	r3, r2, r1
 8001dae:	4619      	mov	r1, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f04f 0400 	mov.w	r4, #0
 8001db6:	461a      	mov	r2, r3
 8001db8:	4623      	mov	r3, r4
 8001dba:	f7fe fa61 	bl	8000280 <__aeabi_uldivmod>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460c      	mov	r4, r1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	e049      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x158>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	f04f 0400 	mov.w	r4, #0
 8001dd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	ea03 0501 	and.w	r5, r3, r1
 8001ddc:	ea04 0602 	and.w	r6, r4, r2
 8001de0:	4629      	mov	r1, r5
 8001de2:	4632      	mov	r2, r6
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	f04f 0400 	mov.w	r4, #0
 8001dec:	0154      	lsls	r4, r2, #5
 8001dee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001df2:	014b      	lsls	r3, r1, #5
 8001df4:	4619      	mov	r1, r3
 8001df6:	4622      	mov	r2, r4
 8001df8:	1b49      	subs	r1, r1, r5
 8001dfa:	eb62 0206 	sbc.w	r2, r2, r6
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	f04f 0400 	mov.w	r4, #0
 8001e06:	0194      	lsls	r4, r2, #6
 8001e08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e0c:	018b      	lsls	r3, r1, #6
 8001e0e:	1a5b      	subs	r3, r3, r1
 8001e10:	eb64 0402 	sbc.w	r4, r4, r2
 8001e14:	f04f 0100 	mov.w	r1, #0
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	00e2      	lsls	r2, r4, #3
 8001e1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e22:	00d9      	lsls	r1, r3, #3
 8001e24:	460b      	mov	r3, r1
 8001e26:	4614      	mov	r4, r2
 8001e28:	195b      	adds	r3, r3, r5
 8001e2a:	eb44 0406 	adc.w	r4, r4, r6
 8001e2e:	f04f 0100 	mov.w	r1, #0
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	02a2      	lsls	r2, r4, #10
 8001e38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001e3c:	0299      	lsls	r1, r3, #10
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4614      	mov	r4, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	4621      	mov	r1, r4
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f04f 0400 	mov.w	r4, #0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4623      	mov	r3, r4
 8001e50:	f7fe fa16 	bl	8000280 <__aeabi_uldivmod>
 8001e54:	4603      	mov	r3, r0
 8001e56:	460c      	mov	r4, r1
 8001e58:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x158>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	0c1b      	lsrs	r3, r3, #16
 8001e60:	f003 0303 	and.w	r3, r3, #3
 8001e64:	3301      	adds	r3, #1
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	60bb      	str	r3, [r7, #8]
      break;
 8001e74:	e002      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e78:	60bb      	str	r3, [r7, #8]
      break;
 8001e7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7c:	68bb      	ldr	r3, [r7, #8]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	017d7840 	.word	0x017d7840

08001e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4601      	mov	r1, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0a9b      	lsrs	r3, r3, #10
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4a03      	ldr	r2, [pc, #12]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	080056ec 	.word	0x080056ec

08001ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ed8:	f7ff ffdc 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001edc:	4601      	mov	r1, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0b5b      	lsrs	r3, r3, #13
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4a03      	ldr	r2, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	080056ec 	.word	0x080056ec

08001efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e056      	b.n	8001fbc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d106      	bne.n	8001f2e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7fe fef3 	bl	8000d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f44:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69db      	ldr	r3, [r3, #28]
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
 8001f76:	ea42 0103 	orr.w	r1, r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	0c1b      	lsrs	r3, r3, #16
 8001f8c:	f003 0104 	and.w	r1, r3, #4
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001faa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_SPI_Transmit+0x22>
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	e11e      	b.n	8002224 <HAL_SPI_Transmit+0x260>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fee:	f7ff f833 	bl	8001058 <HAL_GetTick>
 8001ff2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d002      	beq.n	800200a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002004:	2302      	movs	r3, #2
 8002006:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002008:	e103      	b.n	8002212 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_SPI_Transmit+0x52>
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	77fb      	strb	r3, [r7, #31]
    goto error;
 800201a:	e0fa      	b.n	8002212 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2203      	movs	r2, #3
 8002020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	88fa      	ldrh	r2, [r7, #6]
 8002034:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	88fa      	ldrh	r2, [r7, #6]
 800203a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002062:	d107      	bne.n	8002074 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002072:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800207e:	2b40      	cmp	r3, #64	; 0x40
 8002080:	d007      	beq.n	8002092 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002090:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800209a:	d14b      	bne.n	8002134 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d002      	beq.n	80020aa <HAL_SPI_Transmit+0xe6>
 80020a4:	8afb      	ldrh	r3, [r7, #22]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d13e      	bne.n	8002128 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	1c9a      	adds	r2, r3, #2
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020ce:	e02b      	b.n	8002128 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d112      	bne.n	8002104 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	881a      	ldrh	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	1c9a      	adds	r2, r3, #2
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	86da      	strh	r2, [r3, #54]	; 0x36
 8002102:	e011      	b.n	8002128 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002104:	f7fe ffa8 	bl	8001058 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d803      	bhi.n	800211c <HAL_SPI_Transmit+0x158>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211a:	d102      	bne.n	8002122 <HAL_SPI_Transmit+0x15e>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002126:	e074      	b.n	8002212 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1ce      	bne.n	80020d0 <HAL_SPI_Transmit+0x10c>
 8002132:	e04c      	b.n	80021ce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_SPI_Transmit+0x17e>
 800213c:	8afb      	ldrh	r3, [r7, #22]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d140      	bne.n	80021c4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	330c      	adds	r3, #12
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215e:	b29b      	uxth	r3, r3
 8002160:	3b01      	subs	r3, #1
 8002162:	b29a      	uxth	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002168:	e02c      	b.n	80021c4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	d113      	bne.n	80021a0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	7812      	ldrb	r2, [r2, #0]
 8002184:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	86da      	strh	r2, [r3, #54]	; 0x36
 800219e:	e011      	b.n	80021c4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021a0:	f7fe ff5a 	bl	8001058 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d803      	bhi.n	80021b8 <HAL_SPI_Transmit+0x1f4>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b6:	d102      	bne.n	80021be <HAL_SPI_Transmit+0x1fa>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021c2:	e026      	b.n	8002212 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1cd      	bne.n	800216a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f000 fba4 	bl	8002920 <SPI_EndRxTxTransaction>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d002      	beq.n	80021e4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021ec:	2300      	movs	r3, #0
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]
 800220e:	e000      	b.n	8002212 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002210:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002222:	7ffb      	ldrb	r3, [r7, #31]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002248:	d112      	bne.n	8002270 <HAL_SPI_Receive+0x44>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10e      	bne.n	8002270 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2204      	movs	r2, #4
 8002256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800225a:	88fa      	ldrh	r2, [r7, #6]
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	4613      	mov	r3, r2
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f8e9 	bl	800243e <HAL_SPI_TransmitReceive>
 800226c:	4603      	mov	r3, r0
 800226e:	e0e2      	b.n	8002436 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_SPI_Receive+0x52>
 800227a:	2302      	movs	r3, #2
 800227c:	e0db      	b.n	8002436 <HAL_SPI_Receive+0x20a>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002286:	f7fe fee7 	bl	8001058 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d002      	beq.n	800229e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002298:	2302      	movs	r3, #2
 800229a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800229c:	e0c2      	b.n	8002424 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d002      	beq.n	80022aa <HAL_SPI_Receive+0x7e>
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80022ae:	e0b9      	b.n	8002424 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2204      	movs	r2, #4
 80022b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	88fa      	ldrh	r2, [r7, #6]
 80022c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	88fa      	ldrh	r2, [r7, #6]
 80022ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022f6:	d107      	bne.n	8002308 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002306:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b40      	cmp	r3, #64	; 0x40
 8002314:	d007      	beq.n	8002326 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d162      	bne.n	80023f4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800232e:	e02e      	b.n	800238e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b01      	cmp	r3, #1
 800233c:	d115      	bne.n	800236a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f103 020c 	add.w	r2, r3, #12
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234a:	7812      	ldrb	r2, [r2, #0]
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235e:	b29b      	uxth	r3, r3
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002368:	e011      	b.n	800238e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800236a:	f7fe fe75 	bl	8001058 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d803      	bhi.n	8002382 <HAL_SPI_Receive+0x156>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002380:	d102      	bne.n	8002388 <HAL_SPI_Receive+0x15c>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800238c:	e04a      	b.n	8002424 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002392:	b29b      	uxth	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1cb      	bne.n	8002330 <HAL_SPI_Receive+0x104>
 8002398:	e031      	b.n	80023fe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d113      	bne.n	80023d0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	b292      	uxth	r2, r2
 80023b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ba:	1c9a      	adds	r2, r3, #2
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80023ce:	e011      	b.n	80023f4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023d0:	f7fe fe42 	bl	8001058 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d803      	bhi.n	80023e8 <HAL_SPI_Receive+0x1bc>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e6:	d102      	bne.n	80023ee <HAL_SPI_Receive+0x1c2>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80023f2:	e017      	b.n	8002424 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1cd      	bne.n	800239a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	6839      	ldr	r1, [r7, #0]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fa27 	bl	8002856 <SPI_EndRxTransaction>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2220      	movs	r2, #32
 8002412:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	75fb      	strb	r3, [r7, #23]
 8002420:	e000      	b.n	8002424 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002422:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002434:	7dfb      	ldrb	r3, [r7, #23]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b08c      	sub	sp, #48	; 0x30
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800244c:	2301      	movs	r3, #1
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_SPI_TransmitReceive+0x26>
 8002460:	2302      	movs	r3, #2
 8002462:	e18a      	b.n	800277a <HAL_SPI_TransmitReceive+0x33c>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800246c:	f7fe fdf4 	bl	8001058 <HAL_GetTick>
 8002470:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002486:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800248a:	2b01      	cmp	r3, #1
 800248c:	d00f      	beq.n	80024ae <HAL_SPI_TransmitReceive+0x70>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002494:	d107      	bne.n	80024a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d103      	bne.n	80024a6 <HAL_SPI_TransmitReceive+0x68>
 800249e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d003      	beq.n	80024ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024ac:	e15b      	b.n	8002766 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_SPI_TransmitReceive+0x82>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d002      	beq.n	80024c0 <HAL_SPI_TransmitReceive+0x82>
 80024ba:	887b      	ldrh	r3, [r7, #2]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80024c6:	e14e      	b.n	8002766 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d003      	beq.n	80024dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2205      	movs	r2, #5
 80024d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	887a      	ldrh	r2, [r7, #2]
 80024fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	887a      	ldrh	r2, [r7, #2]
 8002504:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d007      	beq.n	8002530 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800252e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002538:	d178      	bne.n	800262c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d002      	beq.n	8002548 <HAL_SPI_TransmitReceive+0x10a>
 8002542:	8b7b      	ldrh	r3, [r7, #26]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d166      	bne.n	8002616 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	881a      	ldrh	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	1c9a      	adds	r2, r3, #2
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800256c:	e053      	b.n	8002616 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b02      	cmp	r3, #2
 800257a:	d11b      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x176>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d016      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0x176>
 8002586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002588:	2b01      	cmp	r3, #1
 800258a:	d113      	bne.n	80025b4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002590:	881a      	ldrh	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	1c9a      	adds	r2, r3, #2
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	3b01      	subs	r3, #1
 80025aa:	b29a      	uxth	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d119      	bne.n	80025f6 <HAL_SPI_TransmitReceive+0x1b8>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d014      	beq.n	80025f6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	b292      	uxth	r2, r2
 80025d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025de:	1c9a      	adds	r2, r3, #2
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025f2:	2301      	movs	r3, #1
 80025f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025f6:	f7fe fd2f 	bl	8001058 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002602:	429a      	cmp	r2, r3
 8002604:	d807      	bhi.n	8002616 <HAL_SPI_TransmitReceive+0x1d8>
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d003      	beq.n	8002616 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002614:	e0a7      	b.n	8002766 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261a:	b29b      	uxth	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1a6      	bne.n	800256e <HAL_SPI_TransmitReceive+0x130>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002624:	b29b      	uxth	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1a1      	bne.n	800256e <HAL_SPI_TransmitReceive+0x130>
 800262a:	e07c      	b.n	8002726 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <HAL_SPI_TransmitReceive+0x1fc>
 8002634:	8b7b      	ldrh	r3, [r7, #26]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d16b      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	330c      	adds	r3, #12
 8002644:	7812      	ldrb	r2, [r2, #0]
 8002646:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002660:	e057      	b.n	8002712 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b02      	cmp	r3, #2
 800266e:	d11c      	bne.n	80026aa <HAL_SPI_TransmitReceive+0x26c>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d017      	beq.n	80026aa <HAL_SPI_TransmitReceive+0x26c>
 800267a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267c:	2b01      	cmp	r3, #1
 800267e:	d114      	bne.n	80026aa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	330c      	adds	r3, #12
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d119      	bne.n	80026ec <HAL_SPI_TransmitReceive+0x2ae>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d014      	beq.n	80026ec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026de:	b29b      	uxth	r3, r3
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026e8:	2301      	movs	r3, #1
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026ec:	f7fe fcb4 	bl	8001058 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d803      	bhi.n	8002704 <HAL_SPI_TransmitReceive+0x2c6>
 80026fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002702:	d102      	bne.n	800270a <HAL_SPI_TransmitReceive+0x2cc>
 8002704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002710:	e029      	b.n	8002766 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002716:	b29b      	uxth	r3, r3
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1a2      	bne.n	8002662 <HAL_SPI_TransmitReceive+0x224>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d19d      	bne.n	8002662 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 f8f8 	bl	8002920 <SPI_EndRxTxTransaction>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002742:	e010      	b.n	8002766 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	e000      	b.n	8002766 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002764:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002776:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800277a:	4618      	mov	r0, r3
 800277c:	3730      	adds	r7, #48	; 0x30
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b084      	sub	sp, #16
 8002786:	af00      	add	r7, sp, #0
 8002788:	60f8      	str	r0, [r7, #12]
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	603b      	str	r3, [r7, #0]
 800278e:	4613      	mov	r3, r2
 8002790:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002792:	e04c      	b.n	800282e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d048      	beq.n	800282e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800279c:	f7fe fc5c 	bl	8001058 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d902      	bls.n	80027b2 <SPI_WaitFlagStateUntilTimeout+0x30>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d13d      	bne.n	800282e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027ca:	d111      	bne.n	80027f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027d4:	d004      	beq.n	80027e0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027de:	d107      	bne.n	80027f0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f8:	d10f      	bne.n	800281a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002818:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e00f      	b.n	800284e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4013      	ands	r3, r2
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	bf0c      	ite	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	2300      	movne	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	461a      	mov	r2, r3
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	429a      	cmp	r2, r3
 800284a:	d1a3      	bne.n	8002794 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af02      	add	r7, sp, #8
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800286a:	d111      	bne.n	8002890 <SPI_EndRxTransaction+0x3a>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002874:	d004      	beq.n	8002880 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287e:	d107      	bne.n	8002890 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002898:	d12a      	bne.n	80028f0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028a2:	d012      	beq.n	80028ca <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2200      	movs	r2, #0
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f7ff ff67 	bl	8002782 <SPI_WaitFlagStateUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d02d      	beq.n	8002916 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	f043 0220 	orr.w	r2, r3, #32
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e026      	b.n	8002918 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	9300      	str	r3, [sp, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2200      	movs	r2, #0
 80028d2:	2101      	movs	r1, #1
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f7ff ff54 	bl	8002782 <SPI_WaitFlagStateUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d01a      	beq.n	8002916 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	f043 0220 	orr.w	r2, r3, #32
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e013      	b.n	8002918 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2200      	movs	r2, #0
 80028f8:	2101      	movs	r1, #1
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7ff ff41 	bl	8002782 <SPI_WaitFlagStateUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d007      	beq.n	8002916 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290a:	f043 0220 	orr.w	r2, r3, #32
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e000      	b.n	8002918 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <SPI_EndRxTxTransaction+0x7c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <SPI_EndRxTxTransaction+0x80>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0d5b      	lsrs	r3, r3, #21
 8002938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800293c:	fb02 f303 	mul.w	r3, r2, r3
 8002940:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800294a:	d112      	bne.n	8002972 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f7ff ff13 	bl	8002782 <SPI_WaitFlagStateUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f043 0220 	orr.w	r2, r3, #32
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e00f      	b.n	8002992 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3b01      	subs	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002988:	2b80      	cmp	r3, #128	; 0x80
 800298a:	d0f2      	beq.n	8002972 <SPI_EndRxTxTransaction+0x52>
 800298c:	e000      	b.n	8002990 <SPI_EndRxTxTransaction+0x70>
        break;
 800298e:	bf00      	nop
  }

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000004 	.word	0x20000004
 80029a0:	165e9f81 	.word	0x165e9f81

080029a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e03f      	b.n	8002a36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe f9ea 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2224      	movs	r2, #36	; 0x24
 80029d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68da      	ldr	r2, [r3, #12]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 fb97 	bl	800311c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691a      	ldr	r2, [r3, #16]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b088      	sub	sp, #32
 8002a42:	af02      	add	r7, sp, #8
 8002a44:	60f8      	str	r0, [r7, #12]
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	603b      	str	r3, [r7, #0]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b20      	cmp	r3, #32
 8002a5c:	f040 8083 	bne.w	8002b66 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <HAL_UART_Transmit+0x2e>
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e07b      	b.n	8002b68 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_UART_Transmit+0x40>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e074      	b.n	8002b68 <HAL_UART_Transmit+0x12a>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2221      	movs	r2, #33	; 0x21
 8002a90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002a94:	f7fe fae0 	bl	8001058 <HAL_GetTick>
 8002a98:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	88fa      	ldrh	r2, [r7, #6]
 8002a9e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002aae:	e042      	b.n	8002b36 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac6:	d122      	bne.n	8002b0e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	2180      	movs	r1, #128	; 0x80
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f9b6 	bl	8002e44 <UART_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e042      	b.n	8002b68 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	881b      	ldrh	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d103      	bne.n	8002b06 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3302      	adds	r3, #2
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	e017      	b.n	8002b36 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
 8002b0c:	e013      	b.n	8002b36 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2200      	movs	r2, #0
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 f993 	bl	8002e44 <UART_WaitOnFlagUntilTimeout>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e01f      	b.n	8002b68 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	60ba      	str	r2, [r7, #8]
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1b7      	bne.n	8002ab0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2200      	movs	r2, #0
 8002b48:	2140      	movs	r1, #64	; 0x40
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f97a 	bl	8002e44 <UART_WaitOnFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e006      	b.n	8002b68 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e000      	b.n	8002b68 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002b66:	2302      	movs	r3, #2
  }
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d140      	bne.n	8002c0c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <HAL_UART_Receive_IT+0x26>
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e039      	b.n	8002c0e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_UART_Receive_IT+0x38>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e032      	b.n	8002c0e <HAL_UART_Receive_IT+0x9e>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	88fa      	ldrh	r2, [r7, #6]
 8002bc0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2222      	movs	r2, #34	; 0x22
 8002bcc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0220 	orr.w	r2, r2, #32
 8002c06:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10d      	bne.n	8002c6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f003 0320 	and.w	r3, r3, #32
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_UART_IRQHandler+0x52>
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f003 0320 	and.w	r3, r3, #32
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f9d6 	bl	8003018 <UART_Receive_IT>
      return;
 8002c6c:	e0d1      	b.n	8002e12 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80b0 	beq.w	8002dd6 <HAL_UART_IRQHandler+0x1ba>
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_UART_IRQHandler+0x70>
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f000 80a5 	beq.w	8002dd6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HAL_UART_IRQHandler+0x90>
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_UART_IRQHandler+0xb0>
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 0301 	and.w	r3, r3, #1
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	f043 0202 	orr.w	r2, r3, #2
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_UART_IRQHandler+0xd0>
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00f      	beq.n	8002d16 <HAL_UART_IRQHandler+0xfa>
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d104      	bne.n	8002d0a <HAL_UART_IRQHandler+0xee>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	f043 0208 	orr.w	r2, r3, #8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d078      	beq.n	8002e10 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0320 	and.w	r3, r3, #32
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <HAL_UART_IRQHandler+0x11c>
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	f003 0320 	and.w	r3, r3, #32
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f970 	bl	8003018 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	bf0c      	ite	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	2300      	movne	r3, #0
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <HAL_UART_IRQHandler+0x144>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d031      	beq.n	8002dc4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8b9 	bl	8002ed8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d70:	2b40      	cmp	r3, #64	; 0x40
 8002d72:	d123      	bne.n	8002dbc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d82:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d90:	4a21      	ldr	r2, [pc, #132]	; (8002e18 <HAL_UART_IRQHandler+0x1fc>)
 8002d92:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fe fa9c 	bl	80012d6 <HAL_DMA_Abort_IT>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d016      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dae:	4610      	mov	r0, r2
 8002db0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db2:	e00e      	b.n	8002dd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f83b 	bl	8002e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dba:	e00a      	b.n	8002dd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f837 	bl	8002e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc2:	e006      	b.n	8002dd2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f833 	bl	8002e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002dd0:	e01e      	b.n	8002e10 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd2:	bf00      	nop
    return;
 8002dd4:	e01c      	b.n	8002e10 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_UART_IRQHandler+0x1d6>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f8a6 	bl	8002f3c <UART_Transmit_IT>
    return;
 8002df0:	e00f      	b.n	8002e12 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_UART_IRQHandler+0x1f6>
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 f8ee 	bl	8002fe8 <UART_EndTransmit_IT>
    return;
 8002e0c:	bf00      	nop
 8002e0e:	e000      	b.n	8002e12 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002e10:	bf00      	nop
  }
}
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	08002f15 	.word	0x08002f15

08002e1c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e54:	e02c      	b.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e56:	69bb      	ldr	r3, [r7, #24]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d028      	beq.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d007      	beq.n	8002e74 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e64:	f7fe f8f8 	bl	8001058 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d21d      	bcs.n	8002eb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e00f      	b.n	8002ed0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d0c3      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002eee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0201 	bic.w	r2, r2, #1
 8002efe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff ff7e 	bl	8002e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b21      	cmp	r3, #33	; 0x21
 8002f4e:	d144      	bne.n	8002fda <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f58:	d11a      	bne.n	8002f90 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f6e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	621a      	str	r2, [r3, #32]
 8002f82:	e00e      	b.n	8002fa2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	621a      	str	r2, [r3, #32]
 8002f8e:	e008      	b.n	8002fa2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	1c59      	adds	r1, r3, #1
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6211      	str	r1, [r2, #32]
 8002f9a:	781a      	ldrb	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	4619      	mov	r1, r3
 8002fb0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10f      	bne.n	8002fd6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e000      	b.n	8002fdc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
  }
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ff07 	bl	8002e1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b22      	cmp	r3, #34	; 0x22
 800302a:	d171      	bne.n	8003110 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003034:	d123      	bne.n	800307e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10e      	bne.n	8003062 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	b29b      	uxth	r3, r3
 800304c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	1c9a      	adds	r2, r3, #2
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
 8003060:	e029      	b.n	80030b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	b29b      	uxth	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	b29a      	uxth	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
 800307c:	e01b      	b.n	80030b6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10a      	bne.n	800309c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6858      	ldr	r0, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	1c59      	adds	r1, r3, #1
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6291      	str	r1, [r2, #40]	; 0x28
 8003096:	b2c2      	uxtb	r2, r0
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e00c      	b.n	80030b6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a8:	1c58      	adds	r0, r3, #1
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	6288      	str	r0, [r1, #40]	; 0x28
 80030ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29b      	uxth	r3, r3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4619      	mov	r1, r3
 80030c4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d120      	bne.n	800310c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0220 	bic.w	r2, r2, #32
 80030d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695a      	ldr	r2, [r3, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fbe2 	bl	80008cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003108:	2300      	movs	r3, #0
 800310a:	e002      	b.n	8003112 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	e000      	b.n	8003112 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800315e:	f023 030c 	bic.w	r3, r3, #12
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	430b      	orrs	r3, r1
 800316a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800318a:	f040 818b 	bne.w	80034a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4ac1      	ldr	r2, [pc, #772]	; (8003498 <UART_SetConfig+0x37c>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d005      	beq.n	80031a4 <UART_SetConfig+0x88>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4abf      	ldr	r2, [pc, #764]	; (800349c <UART_SetConfig+0x380>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	f040 80bd 	bne.w	800331e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031a4:	f7fe fe96 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 80031a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	461d      	mov	r5, r3
 80031ae:	f04f 0600 	mov.w	r6, #0
 80031b2:	46a8      	mov	r8, r5
 80031b4:	46b1      	mov	r9, r6
 80031b6:	eb18 0308 	adds.w	r3, r8, r8
 80031ba:	eb49 0409 	adc.w	r4, r9, r9
 80031be:	4698      	mov	r8, r3
 80031c0:	46a1      	mov	r9, r4
 80031c2:	eb18 0805 	adds.w	r8, r8, r5
 80031c6:	eb49 0906 	adc.w	r9, r9, r6
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031de:	4688      	mov	r8, r1
 80031e0:	4691      	mov	r9, r2
 80031e2:	eb18 0005 	adds.w	r0, r8, r5
 80031e6:	eb49 0106 	adc.w	r1, r9, r6
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	461d      	mov	r5, r3
 80031f0:	f04f 0600 	mov.w	r6, #0
 80031f4:	196b      	adds	r3, r5, r5
 80031f6:	eb46 0406 	adc.w	r4, r6, r6
 80031fa:	461a      	mov	r2, r3
 80031fc:	4623      	mov	r3, r4
 80031fe:	f7fd f83f 	bl	8000280 <__aeabi_uldivmod>
 8003202:	4603      	mov	r3, r0
 8003204:	460c      	mov	r4, r1
 8003206:	461a      	mov	r2, r3
 8003208:	4ba5      	ldr	r3, [pc, #660]	; (80034a0 <UART_SetConfig+0x384>)
 800320a:	fba3 2302 	umull	r2, r3, r3, r2
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	461d      	mov	r5, r3
 8003218:	f04f 0600 	mov.w	r6, #0
 800321c:	46a9      	mov	r9, r5
 800321e:	46b2      	mov	sl, r6
 8003220:	eb19 0309 	adds.w	r3, r9, r9
 8003224:	eb4a 040a 	adc.w	r4, sl, sl
 8003228:	4699      	mov	r9, r3
 800322a:	46a2      	mov	sl, r4
 800322c:	eb19 0905 	adds.w	r9, r9, r5
 8003230:	eb4a 0a06 	adc.w	sl, sl, r6
 8003234:	f04f 0100 	mov.w	r1, #0
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003240:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003244:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003248:	4689      	mov	r9, r1
 800324a:	4692      	mov	sl, r2
 800324c:	eb19 0005 	adds.w	r0, r9, r5
 8003250:	eb4a 0106 	adc.w	r1, sl, r6
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	461d      	mov	r5, r3
 800325a:	f04f 0600 	mov.w	r6, #0
 800325e:	196b      	adds	r3, r5, r5
 8003260:	eb46 0406 	adc.w	r4, r6, r6
 8003264:	461a      	mov	r2, r3
 8003266:	4623      	mov	r3, r4
 8003268:	f7fd f80a 	bl	8000280 <__aeabi_uldivmod>
 800326c:	4603      	mov	r3, r0
 800326e:	460c      	mov	r4, r1
 8003270:	461a      	mov	r2, r3
 8003272:	4b8b      	ldr	r3, [pc, #556]	; (80034a0 <UART_SetConfig+0x384>)
 8003274:	fba3 1302 	umull	r1, r3, r3, r2
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	2164      	movs	r1, #100	; 0x64
 800327c:	fb01 f303 	mul.w	r3, r1, r3
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	3332      	adds	r3, #50	; 0x32
 8003286:	4a86      	ldr	r2, [pc, #536]	; (80034a0 <UART_SetConfig+0x384>)
 8003288:	fba2 2303 	umull	r2, r3, r2, r3
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003294:	4498      	add	r8, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	461d      	mov	r5, r3
 800329a:	f04f 0600 	mov.w	r6, #0
 800329e:	46a9      	mov	r9, r5
 80032a0:	46b2      	mov	sl, r6
 80032a2:	eb19 0309 	adds.w	r3, r9, r9
 80032a6:	eb4a 040a 	adc.w	r4, sl, sl
 80032aa:	4699      	mov	r9, r3
 80032ac:	46a2      	mov	sl, r4
 80032ae:	eb19 0905 	adds.w	r9, r9, r5
 80032b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80032b6:	f04f 0100 	mov.w	r1, #0
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032ca:	4689      	mov	r9, r1
 80032cc:	4692      	mov	sl, r2
 80032ce:	eb19 0005 	adds.w	r0, r9, r5
 80032d2:	eb4a 0106 	adc.w	r1, sl, r6
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	461d      	mov	r5, r3
 80032dc:	f04f 0600 	mov.w	r6, #0
 80032e0:	196b      	adds	r3, r5, r5
 80032e2:	eb46 0406 	adc.w	r4, r6, r6
 80032e6:	461a      	mov	r2, r3
 80032e8:	4623      	mov	r3, r4
 80032ea:	f7fc ffc9 	bl	8000280 <__aeabi_uldivmod>
 80032ee:	4603      	mov	r3, r0
 80032f0:	460c      	mov	r4, r1
 80032f2:	461a      	mov	r2, r3
 80032f4:	4b6a      	ldr	r3, [pc, #424]	; (80034a0 <UART_SetConfig+0x384>)
 80032f6:	fba3 1302 	umull	r1, r3, r3, r2
 80032fa:	095b      	lsrs	r3, r3, #5
 80032fc:	2164      	movs	r1, #100	; 0x64
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	3332      	adds	r3, #50	; 0x32
 8003308:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <UART_SetConfig+0x384>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	f003 0207 	and.w	r2, r3, #7
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4442      	add	r2, r8
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	e26f      	b.n	80037fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800331e:	f7fe fdc5 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003322:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	461d      	mov	r5, r3
 8003328:	f04f 0600 	mov.w	r6, #0
 800332c:	46a8      	mov	r8, r5
 800332e:	46b1      	mov	r9, r6
 8003330:	eb18 0308 	adds.w	r3, r8, r8
 8003334:	eb49 0409 	adc.w	r4, r9, r9
 8003338:	4698      	mov	r8, r3
 800333a:	46a1      	mov	r9, r4
 800333c:	eb18 0805 	adds.w	r8, r8, r5
 8003340:	eb49 0906 	adc.w	r9, r9, r6
 8003344:	f04f 0100 	mov.w	r1, #0
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003350:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003354:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003358:	4688      	mov	r8, r1
 800335a:	4691      	mov	r9, r2
 800335c:	eb18 0005 	adds.w	r0, r8, r5
 8003360:	eb49 0106 	adc.w	r1, r9, r6
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	461d      	mov	r5, r3
 800336a:	f04f 0600 	mov.w	r6, #0
 800336e:	196b      	adds	r3, r5, r5
 8003370:	eb46 0406 	adc.w	r4, r6, r6
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	f7fc ff82 	bl	8000280 <__aeabi_uldivmod>
 800337c:	4603      	mov	r3, r0
 800337e:	460c      	mov	r4, r1
 8003380:	461a      	mov	r2, r3
 8003382:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <UART_SetConfig+0x384>)
 8003384:	fba3 2302 	umull	r2, r3, r3, r2
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	461d      	mov	r5, r3
 8003392:	f04f 0600 	mov.w	r6, #0
 8003396:	46a9      	mov	r9, r5
 8003398:	46b2      	mov	sl, r6
 800339a:	eb19 0309 	adds.w	r3, r9, r9
 800339e:	eb4a 040a 	adc.w	r4, sl, sl
 80033a2:	4699      	mov	r9, r3
 80033a4:	46a2      	mov	sl, r4
 80033a6:	eb19 0905 	adds.w	r9, r9, r5
 80033aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80033ae:	f04f 0100 	mov.w	r1, #0
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033c2:	4689      	mov	r9, r1
 80033c4:	4692      	mov	sl, r2
 80033c6:	eb19 0005 	adds.w	r0, r9, r5
 80033ca:	eb4a 0106 	adc.w	r1, sl, r6
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	461d      	mov	r5, r3
 80033d4:	f04f 0600 	mov.w	r6, #0
 80033d8:	196b      	adds	r3, r5, r5
 80033da:	eb46 0406 	adc.w	r4, r6, r6
 80033de:	461a      	mov	r2, r3
 80033e0:	4623      	mov	r3, r4
 80033e2:	f7fc ff4d 	bl	8000280 <__aeabi_uldivmod>
 80033e6:	4603      	mov	r3, r0
 80033e8:	460c      	mov	r4, r1
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b2c      	ldr	r3, [pc, #176]	; (80034a0 <UART_SetConfig+0x384>)
 80033ee:	fba3 1302 	umull	r1, r3, r3, r2
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2164      	movs	r1, #100	; 0x64
 80033f6:	fb01 f303 	mul.w	r3, r1, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	3332      	adds	r3, #50	; 0x32
 8003400:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <UART_SetConfig+0x384>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800340e:	4498      	add	r8, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	461d      	mov	r5, r3
 8003414:	f04f 0600 	mov.w	r6, #0
 8003418:	46a9      	mov	r9, r5
 800341a:	46b2      	mov	sl, r6
 800341c:	eb19 0309 	adds.w	r3, r9, r9
 8003420:	eb4a 040a 	adc.w	r4, sl, sl
 8003424:	4699      	mov	r9, r3
 8003426:	46a2      	mov	sl, r4
 8003428:	eb19 0905 	adds.w	r9, r9, r5
 800342c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800343c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003440:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003444:	4689      	mov	r9, r1
 8003446:	4692      	mov	sl, r2
 8003448:	eb19 0005 	adds.w	r0, r9, r5
 800344c:	eb4a 0106 	adc.w	r1, sl, r6
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	461d      	mov	r5, r3
 8003456:	f04f 0600 	mov.w	r6, #0
 800345a:	196b      	adds	r3, r5, r5
 800345c:	eb46 0406 	adc.w	r4, r6, r6
 8003460:	461a      	mov	r2, r3
 8003462:	4623      	mov	r3, r4
 8003464:	f7fc ff0c 	bl	8000280 <__aeabi_uldivmod>
 8003468:	4603      	mov	r3, r0
 800346a:	460c      	mov	r4, r1
 800346c:	461a      	mov	r2, r3
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <UART_SetConfig+0x384>)
 8003470:	fba3 1302 	umull	r1, r3, r3, r2
 8003474:	095b      	lsrs	r3, r3, #5
 8003476:	2164      	movs	r1, #100	; 0x64
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	3332      	adds	r3, #50	; 0x32
 8003482:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <UART_SetConfig+0x384>)
 8003484:	fba2 2303 	umull	r2, r3, r2, r3
 8003488:	095b      	lsrs	r3, r3, #5
 800348a:	f003 0207 	and.w	r2, r3, #7
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4442      	add	r2, r8
 8003494:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003496:	e1b2      	b.n	80037fe <UART_SetConfig+0x6e2>
 8003498:	40011000 	.word	0x40011000
 800349c:	40011400 	.word	0x40011400
 80034a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4ad7      	ldr	r2, [pc, #860]	; (8003808 <UART_SetConfig+0x6ec>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d005      	beq.n	80034ba <UART_SetConfig+0x39e>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4ad6      	ldr	r2, [pc, #856]	; (800380c <UART_SetConfig+0x6f0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	f040 80d1 	bne.w	800365c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80034ba:	f7fe fd0b 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 80034be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	469a      	mov	sl, r3
 80034c4:	f04f 0b00 	mov.w	fp, #0
 80034c8:	46d0      	mov	r8, sl
 80034ca:	46d9      	mov	r9, fp
 80034cc:	eb18 0308 	adds.w	r3, r8, r8
 80034d0:	eb49 0409 	adc.w	r4, r9, r9
 80034d4:	4698      	mov	r8, r3
 80034d6:	46a1      	mov	r9, r4
 80034d8:	eb18 080a 	adds.w	r8, r8, sl
 80034dc:	eb49 090b 	adc.w	r9, r9, fp
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034f4:	4688      	mov	r8, r1
 80034f6:	4691      	mov	r9, r2
 80034f8:	eb1a 0508 	adds.w	r5, sl, r8
 80034fc:	eb4b 0609 	adc.w	r6, fp, r9
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4619      	mov	r1, r3
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	f04f 0400 	mov.w	r4, #0
 8003512:	0094      	lsls	r4, r2, #2
 8003514:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003518:	008b      	lsls	r3, r1, #2
 800351a:	461a      	mov	r2, r3
 800351c:	4623      	mov	r3, r4
 800351e:	4628      	mov	r0, r5
 8003520:	4631      	mov	r1, r6
 8003522:	f7fc fead 	bl	8000280 <__aeabi_uldivmod>
 8003526:	4603      	mov	r3, r0
 8003528:	460c      	mov	r4, r1
 800352a:	461a      	mov	r2, r3
 800352c:	4bb8      	ldr	r3, [pc, #736]	; (8003810 <UART_SetConfig+0x6f4>)
 800352e:	fba3 2302 	umull	r2, r3, r3, r2
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	469b      	mov	fp, r3
 800353c:	f04f 0c00 	mov.w	ip, #0
 8003540:	46d9      	mov	r9, fp
 8003542:	46e2      	mov	sl, ip
 8003544:	eb19 0309 	adds.w	r3, r9, r9
 8003548:	eb4a 040a 	adc.w	r4, sl, sl
 800354c:	4699      	mov	r9, r3
 800354e:	46a2      	mov	sl, r4
 8003550:	eb19 090b 	adds.w	r9, r9, fp
 8003554:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003564:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003568:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800356c:	4689      	mov	r9, r1
 800356e:	4692      	mov	sl, r2
 8003570:	eb1b 0509 	adds.w	r5, fp, r9
 8003574:	eb4c 060a 	adc.w	r6, ip, sl
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4619      	mov	r1, r3
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	f04f 0400 	mov.w	r4, #0
 800358a:	0094      	lsls	r4, r2, #2
 800358c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003590:	008b      	lsls	r3, r1, #2
 8003592:	461a      	mov	r2, r3
 8003594:	4623      	mov	r3, r4
 8003596:	4628      	mov	r0, r5
 8003598:	4631      	mov	r1, r6
 800359a:	f7fc fe71 	bl	8000280 <__aeabi_uldivmod>
 800359e:	4603      	mov	r3, r0
 80035a0:	460c      	mov	r4, r1
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b9a      	ldr	r3, [pc, #616]	; (8003810 <UART_SetConfig+0x6f4>)
 80035a6:	fba3 1302 	umull	r1, r3, r3, r2
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2164      	movs	r1, #100	; 0x64
 80035ae:	fb01 f303 	mul.w	r3, r1, r3
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	3332      	adds	r3, #50	; 0x32
 80035b8:	4a95      	ldr	r2, [pc, #596]	; (8003810 <UART_SetConfig+0x6f4>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c4:	4498      	add	r8, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	469b      	mov	fp, r3
 80035ca:	f04f 0c00 	mov.w	ip, #0
 80035ce:	46d9      	mov	r9, fp
 80035d0:	46e2      	mov	sl, ip
 80035d2:	eb19 0309 	adds.w	r3, r9, r9
 80035d6:	eb4a 040a 	adc.w	r4, sl, sl
 80035da:	4699      	mov	r9, r3
 80035dc:	46a2      	mov	sl, r4
 80035de:	eb19 090b 	adds.w	r9, r9, fp
 80035e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035fa:	4689      	mov	r9, r1
 80035fc:	4692      	mov	sl, r2
 80035fe:	eb1b 0509 	adds.w	r5, fp, r9
 8003602:	eb4c 060a 	adc.w	r6, ip, sl
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4619      	mov	r1, r3
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	f04f 0400 	mov.w	r4, #0
 8003618:	0094      	lsls	r4, r2, #2
 800361a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800361e:	008b      	lsls	r3, r1, #2
 8003620:	461a      	mov	r2, r3
 8003622:	4623      	mov	r3, r4
 8003624:	4628      	mov	r0, r5
 8003626:	4631      	mov	r1, r6
 8003628:	f7fc fe2a 	bl	8000280 <__aeabi_uldivmod>
 800362c:	4603      	mov	r3, r0
 800362e:	460c      	mov	r4, r1
 8003630:	461a      	mov	r2, r3
 8003632:	4b77      	ldr	r3, [pc, #476]	; (8003810 <UART_SetConfig+0x6f4>)
 8003634:	fba3 1302 	umull	r1, r3, r3, r2
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	2164      	movs	r1, #100	; 0x64
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	3332      	adds	r3, #50	; 0x32
 8003646:	4a72      	ldr	r2, [pc, #456]	; (8003810 <UART_SetConfig+0x6f4>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	f003 020f 	and.w	r2, r3, #15
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4442      	add	r2, r8
 8003658:	609a      	str	r2, [r3, #8]
 800365a:	e0d0      	b.n	80037fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800365c:	f7fe fc26 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003660:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	469a      	mov	sl, r3
 8003666:	f04f 0b00 	mov.w	fp, #0
 800366a:	46d0      	mov	r8, sl
 800366c:	46d9      	mov	r9, fp
 800366e:	eb18 0308 	adds.w	r3, r8, r8
 8003672:	eb49 0409 	adc.w	r4, r9, r9
 8003676:	4698      	mov	r8, r3
 8003678:	46a1      	mov	r9, r4
 800367a:	eb18 080a 	adds.w	r8, r8, sl
 800367e:	eb49 090b 	adc.w	r9, r9, fp
 8003682:	f04f 0100 	mov.w	r1, #0
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800368e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003692:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003696:	4688      	mov	r8, r1
 8003698:	4691      	mov	r9, r2
 800369a:	eb1a 0508 	adds.w	r5, sl, r8
 800369e:	eb4b 0609 	adc.w	r6, fp, r9
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4619      	mov	r1, r3
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	f04f 0400 	mov.w	r4, #0
 80036b4:	0094      	lsls	r4, r2, #2
 80036b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036ba:	008b      	lsls	r3, r1, #2
 80036bc:	461a      	mov	r2, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	4628      	mov	r0, r5
 80036c2:	4631      	mov	r1, r6
 80036c4:	f7fc fddc 	bl	8000280 <__aeabi_uldivmod>
 80036c8:	4603      	mov	r3, r0
 80036ca:	460c      	mov	r4, r1
 80036cc:	461a      	mov	r2, r3
 80036ce:	4b50      	ldr	r3, [pc, #320]	; (8003810 <UART_SetConfig+0x6f4>)
 80036d0:	fba3 2302 	umull	r2, r3, r3, r2
 80036d4:	095b      	lsrs	r3, r3, #5
 80036d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	469b      	mov	fp, r3
 80036de:	f04f 0c00 	mov.w	ip, #0
 80036e2:	46d9      	mov	r9, fp
 80036e4:	46e2      	mov	sl, ip
 80036e6:	eb19 0309 	adds.w	r3, r9, r9
 80036ea:	eb4a 040a 	adc.w	r4, sl, sl
 80036ee:	4699      	mov	r9, r3
 80036f0:	46a2      	mov	sl, r4
 80036f2:	eb19 090b 	adds.w	r9, r9, fp
 80036f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003706:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800370a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800370e:	4689      	mov	r9, r1
 8003710:	4692      	mov	sl, r2
 8003712:	eb1b 0509 	adds.w	r5, fp, r9
 8003716:	eb4c 060a 	adc.w	r6, ip, sl
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	4619      	mov	r1, r3
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	f04f 0400 	mov.w	r4, #0
 800372c:	0094      	lsls	r4, r2, #2
 800372e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003732:	008b      	lsls	r3, r1, #2
 8003734:	461a      	mov	r2, r3
 8003736:	4623      	mov	r3, r4
 8003738:	4628      	mov	r0, r5
 800373a:	4631      	mov	r1, r6
 800373c:	f7fc fda0 	bl	8000280 <__aeabi_uldivmod>
 8003740:	4603      	mov	r3, r0
 8003742:	460c      	mov	r4, r1
 8003744:	461a      	mov	r2, r3
 8003746:	4b32      	ldr	r3, [pc, #200]	; (8003810 <UART_SetConfig+0x6f4>)
 8003748:	fba3 1302 	umull	r1, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	2164      	movs	r1, #100	; 0x64
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	3332      	adds	r3, #50	; 0x32
 800375a:	4a2d      	ldr	r2, [pc, #180]	; (8003810 <UART_SetConfig+0x6f4>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003766:	4498      	add	r8, r3
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	469b      	mov	fp, r3
 800376c:	f04f 0c00 	mov.w	ip, #0
 8003770:	46d9      	mov	r9, fp
 8003772:	46e2      	mov	sl, ip
 8003774:	eb19 0309 	adds.w	r3, r9, r9
 8003778:	eb4a 040a 	adc.w	r4, sl, sl
 800377c:	4699      	mov	r9, r3
 800377e:	46a2      	mov	sl, r4
 8003780:	eb19 090b 	adds.w	r9, r9, fp
 8003784:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003788:	f04f 0100 	mov.w	r1, #0
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003794:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003798:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800379c:	4689      	mov	r9, r1
 800379e:	4692      	mov	sl, r2
 80037a0:	eb1b 0509 	adds.w	r5, fp, r9
 80037a4:	eb4c 060a 	adc.w	r6, ip, sl
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4619      	mov	r1, r3
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	f04f 0400 	mov.w	r4, #0
 80037ba:	0094      	lsls	r4, r2, #2
 80037bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037c0:	008b      	lsls	r3, r1, #2
 80037c2:	461a      	mov	r2, r3
 80037c4:	4623      	mov	r3, r4
 80037c6:	4628      	mov	r0, r5
 80037c8:	4631      	mov	r1, r6
 80037ca:	f7fc fd59 	bl	8000280 <__aeabi_uldivmod>
 80037ce:	4603      	mov	r3, r0
 80037d0:	460c      	mov	r4, r1
 80037d2:	461a      	mov	r2, r3
 80037d4:	4b0e      	ldr	r3, [pc, #56]	; (8003810 <UART_SetConfig+0x6f4>)
 80037d6:	fba3 1302 	umull	r1, r3, r3, r2
 80037da:	095b      	lsrs	r3, r3, #5
 80037dc:	2164      	movs	r1, #100	; 0x64
 80037de:	fb01 f303 	mul.w	r3, r1, r3
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	3332      	adds	r3, #50	; 0x32
 80037e8:	4a09      	ldr	r2, [pc, #36]	; (8003810 <UART_SetConfig+0x6f4>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	f003 020f 	and.w	r2, r3, #15
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4442      	add	r2, r8
 80037fa:	609a      	str	r2, [r3, #8]
}
 80037fc:	e7ff      	b.n	80037fe <UART_SetConfig+0x6e2>
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003808:	40011000 	.word	0x40011000
 800380c:	40011400 	.word	0x40011400
 8003810:	51eb851f 	.word	0x51eb851f

08003814 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800381c:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <WIZCHIP_READ+0x94>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003822:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <WIZCHIP_READ+0x94>)
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003828:	4b1f      	ldr	r3, [pc, #124]	; (80038a8 <WIZCHIP_READ+0x94>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <WIZCHIP_READ+0x24>
 8003830:	4b1d      	ldr	r3, [pc, #116]	; (80038a8 <WIZCHIP_READ+0x94>)
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	2b00      	cmp	r3, #0
 8003836:	d114      	bne.n	8003862 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003838:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <WIZCHIP_READ+0x94>)
 800383a:	69db      	ldr	r3, [r3, #28]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	0c12      	lsrs	r2, r2, #16
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	4610      	mov	r0, r2
 8003844:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <WIZCHIP_READ+0x94>)
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	0a12      	lsrs	r2, r2, #8
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	4610      	mov	r0, r2
 8003852:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003854:	4b14      	ldr	r3, [pc, #80]	; (80038a8 <WIZCHIP_READ+0x94>)
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	4610      	mov	r0, r2
 800385e:	4798      	blx	r3
 8003860:	e011      	b.n	8003886 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	b2db      	uxtb	r3, r3
 8003868:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0a1b      	lsrs	r3, r3, #8
 800386e:	b2db      	uxtb	r3, r3
 8003870:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <WIZCHIP_READ+0x94>)
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	f107 020c 	add.w	r2, r7, #12
 8003880:	2103      	movs	r1, #3
 8003882:	4610      	mov	r0, r2
 8003884:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <WIZCHIP_READ+0x94>)
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	4798      	blx	r3
 800388c:	4603      	mov	r3, r0
 800388e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <WIZCHIP_READ+0x94>)
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003896:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <WIZCHIP_READ+0x94>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	4798      	blx	r3
   return ret;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000010 	.word	0x20000010

080038ac <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80038b8:	4b22      	ldr	r3, [pc, #136]	; (8003944 <WIZCHIP_WRITE+0x98>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80038be:	4b21      	ldr	r3, [pc, #132]	; (8003944 <WIZCHIP_WRITE+0x98>)
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80038cc:	4b1d      	ldr	r3, [pc, #116]	; (8003944 <WIZCHIP_WRITE+0x98>)
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d119      	bne.n	8003908 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80038d4:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <WIZCHIP_WRITE+0x98>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	0c12      	lsrs	r2, r2, #16
 80038dc:	b2d2      	uxtb	r2, r2
 80038de:	4610      	mov	r0, r2
 80038e0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80038e2:	4b18      	ldr	r3, [pc, #96]	; (8003944 <WIZCHIP_WRITE+0x98>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	0a12      	lsrs	r2, r2, #8
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	4610      	mov	r0, r2
 80038ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80038f0:	4b14      	ldr	r3, [pc, #80]	; (8003944 <WIZCHIP_WRITE+0x98>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	4610      	mov	r0, r2
 80038fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <WIZCHIP_WRITE+0x98>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	4610      	mov	r0, r2
 8003904:	4798      	blx	r3
 8003906:	e013      	b.n	8003930 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	0c1b      	lsrs	r3, r3, #16
 800390c:	b2db      	uxtb	r3, r3
 800390e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	b2db      	uxtb	r3, r3
 8003916:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	b2db      	uxtb	r3, r3
 800391c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003922:	4b08      	ldr	r3, [pc, #32]	; (8003944 <WIZCHIP_WRITE+0x98>)
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	f107 020c 	add.w	r2, r7, #12
 800392a:	2104      	movs	r1, #4
 800392c:	4610      	mov	r0, r2
 800392e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003930:	4b04      	ldr	r3, [pc, #16]	; (8003944 <WIZCHIP_WRITE+0x98>)
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003936:	4b03      	ldr	r3, [pc, #12]	; (8003944 <WIZCHIP_WRITE+0x98>)
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	4798      	blx	r3
}
 800393c:	bf00      	nop
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000010 	.word	0x20000010

08003948 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b087      	sub	sp, #28
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003956:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800395c:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003962:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <WIZCHIP_READ_BUF+0x2a>
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	2b00      	cmp	r3, #0
 8003970:	d126      	bne.n	80039c0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	0c12      	lsrs	r2, r2, #16
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	4610      	mov	r0, r2
 800397e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003980:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	0a12      	lsrs	r2, r2, #8
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	4610      	mov	r0, r2
 800398c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800398e:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 8003990:	69db      	ldr	r3, [r3, #28]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	4610      	mov	r0, r2
 8003998:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800399a:	2300      	movs	r3, #0
 800399c:	82fb      	strh	r3, [r7, #22]
 800399e:	e00a      	b.n	80039b6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80039a0:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	8afa      	ldrh	r2, [r7, #22]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	188c      	adds	r4, r1, r2
 80039aa:	4798      	blx	r3
 80039ac:	4603      	mov	r3, r0
 80039ae:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80039b0:	8afb      	ldrh	r3, [r7, #22]
 80039b2:	3301      	adds	r3, #1
 80039b4:	82fb      	strh	r3, [r7, #22]
 80039b6:	8afa      	ldrh	r2, [r7, #22]
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3f0      	bcc.n	80039a0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80039be:	e017      	b.n	80039f0 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	0c1b      	lsrs	r3, r3, #16
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80039d6:	4b0b      	ldr	r3, [pc, #44]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	f107 0210 	add.w	r2, r7, #16
 80039de:	2103      	movs	r1, #3
 80039e0:	4610      	mov	r0, r2
 80039e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80039e4:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	88fa      	ldrh	r2, [r7, #6]
 80039ea:	4611      	mov	r1, r2
 80039ec:	68b8      	ldr	r0, [r7, #8]
 80039ee:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80039f6:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <WIZCHIP_READ_BUF+0xbc>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	4798      	blx	r3
}
 80039fc:	bf00      	nop
 80039fe:	371c      	adds	r7, #28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd90      	pop	{r4, r7, pc}
 8003a04:	20000010 	.word	0x20000010

08003a08 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003a1c:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f043 0304 	orr.w	r3, r3, #4
 8003a28:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003a2a:	4b26      	ldr	r3, [pc, #152]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d126      	bne.n	8003a80 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	0c12      	lsrs	r2, r2, #16
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	4610      	mov	r0, r2
 8003a3e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003a40:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a42:	69db      	ldr	r3, [r3, #28]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	0a12      	lsrs	r2, r2, #8
 8003a48:	b2d2      	uxtb	r2, r2
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	4610      	mov	r0, r2
 8003a58:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	82fb      	strh	r3, [r7, #22]
 8003a5e:	e00a      	b.n	8003a76 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003a60:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	8afa      	ldrh	r2, [r7, #22]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	440a      	add	r2, r1
 8003a6a:	7812      	ldrb	r2, [r2, #0]
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003a70:	8afb      	ldrh	r3, [r7, #22]
 8003a72:	3301      	adds	r3, #1
 8003a74:	82fb      	strh	r3, [r7, #22]
 8003a76:	8afa      	ldrh	r2, [r7, #22]
 8003a78:	88fb      	ldrh	r3, [r7, #6]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d3f0      	bcc.n	8003a60 <WIZCHIP_WRITE_BUF+0x58>
 8003a7e:	e017      	b.n	8003ab0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	0c1b      	lsrs	r3, r3, #16
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	0a1b      	lsrs	r3, r3, #8
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	f107 0210 	add.w	r2, r7, #16
 8003a9e:	2103      	movs	r1, #3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	88fa      	ldrh	r2, [r7, #6]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	68b8      	ldr	r0, [r7, #8]
 8003aae:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003ab6:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <WIZCHIP_WRITE_BUF+0xbc>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	4798      	blx	r3
}
 8003abc:	bf00      	nop
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	20000010 	.word	0x20000010

08003ac8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003ac8:	b590      	push	{r4, r7, lr}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	81fb      	strh	r3, [r7, #14]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	3301      	adds	r3, #1
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fe94 	bl	8003814 <WIZCHIP_READ>
 8003aec:	4603      	mov	r3, r0
 8003aee:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003af0:	89bb      	ldrh	r3, [r7, #12]
 8003af2:	021b      	lsls	r3, r3, #8
 8003af4:	b29c      	uxth	r4, r3
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	3301      	adds	r3, #1
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff fe86 	bl	8003814 <WIZCHIP_READ>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	4423      	add	r3, r4
 8003b0e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003b10:	89bb      	ldrh	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01a      	beq.n	8003b4c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003b16:	79fb      	ldrb	r3, [r7, #7]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	00db      	lsls	r3, r3, #3
 8003b1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff fe76 	bl	8003814 <WIZCHIP_READ>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003b2c:	89fb      	ldrh	r3, [r7, #14]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	b29c      	uxth	r4, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	3301      	adds	r3, #1
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fe68 	bl	8003814 <WIZCHIP_READ>
 8003b44:	4603      	mov	r3, r0
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	4423      	add	r3, r4
 8003b4a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003b4c:	89fa      	ldrh	r2, [r7, #14]
 8003b4e:	89bb      	ldrh	r3, [r7, #12]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1c2      	bne.n	8003ada <getSn_TX_FSR+0x12>
   return val;
 8003b54:	89fb      	ldrh	r3, [r7, #14]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}

08003b5e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003b5e:	b590      	push	{r4, r7, lr}
 8003b60:	b085      	sub	sp, #20
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	4603      	mov	r3, r0
 8003b66:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	81fb      	strh	r3, [r7, #14]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003b70:	79fb      	ldrb	r3, [r7, #7]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	3301      	adds	r3, #1
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7ff fe49 	bl	8003814 <WIZCHIP_READ>
 8003b82:	4603      	mov	r3, r0
 8003b84:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003b86:	89bb      	ldrh	r3, [r7, #12]
 8003b88:	021b      	lsls	r3, r3, #8
 8003b8a:	b29c      	uxth	r4, r3
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	3301      	adds	r3, #1
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7ff fe3b 	bl	8003814 <WIZCHIP_READ>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	4423      	add	r3, r4
 8003ba4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003ba6:	89bb      	ldrh	r3, [r7, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d01a      	beq.n	8003be2 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fe2b 	bl	8003814 <WIZCHIP_READ>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003bc2:	89fb      	ldrh	r3, [r7, #14]
 8003bc4:	021b      	lsls	r3, r3, #8
 8003bc6:	b29c      	uxth	r4, r3
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	3301      	adds	r3, #1
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fe1d 	bl	8003814 <WIZCHIP_READ>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	4423      	add	r3, r4
 8003be0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003be2:	89fa      	ldrh	r2, [r7, #14]
 8003be4:	89bb      	ldrh	r3, [r7, #12]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d1c2      	bne.n	8003b70 <getSn_RX_RSR+0x12>
   return val;
 8003bea:	89fb      	ldrh	r3, [r7, #14]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd90      	pop	{r4, r7, pc}

08003bf4 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003bf4:	b590      	push	{r4, r7, lr}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	71fb      	strb	r3, [r7, #7]
 8003c00:	4613      	mov	r3, r2
 8003c02:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003c0c:	88bb      	ldrh	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d048      	beq.n	8003ca4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	3301      	adds	r3, #1
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7ff fdf8 	bl	8003814 <WIZCHIP_READ>
 8003c24:	4603      	mov	r3, r0
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	b29c      	uxth	r4, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	3301      	adds	r3, #1
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fdeb 	bl	8003814 <WIZCHIP_READ>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	4423      	add	r3, r4
 8003c44:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003c46:	89fb      	ldrh	r3, [r7, #14]
 8003c48:	021b      	lsls	r3, r3, #8
 8003c4a:	79fa      	ldrb	r2, [r7, #7]
 8003c4c:	0092      	lsls	r2, r2, #2
 8003c4e:	3202      	adds	r2, #2
 8003c50:	00d2      	lsls	r2, r2, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003c56:	88bb      	ldrh	r3, [r7, #4]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	6839      	ldr	r1, [r7, #0]
 8003c5c:	68b8      	ldr	r0, [r7, #8]
 8003c5e:	f7ff fed3 	bl	8003a08 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003c62:	89fa      	ldrh	r2, [r7, #14]
 8003c64:	88bb      	ldrh	r3, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	3301      	adds	r3, #1
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003c76:	461a      	mov	r2, r3
 8003c78:	89fb      	ldrh	r3, [r7, #14]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f7ff fe12 	bl	80038ac <WIZCHIP_WRITE>
 8003c88:	79fb      	ldrb	r3, [r7, #7]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003c94:	461a      	mov	r2, r3
 8003c96:	89fb      	ldrh	r3, [r7, #14]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f7ff fe05 	bl	80038ac <WIZCHIP_WRITE>
 8003ca2:	e000      	b.n	8003ca6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003ca4:	bf00      	nop
}
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd90      	pop	{r4, r7, pc}

08003cac <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003cac:	b590      	push	{r4, r7, lr}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	6039      	str	r1, [r7, #0]
 8003cb6:	71fb      	strb	r3, [r7, #7]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003cc4:	88bb      	ldrh	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d048      	beq.n	8003d5c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	3301      	adds	r3, #1
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff fd9c 	bl	8003814 <WIZCHIP_READ>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	021b      	lsls	r3, r3, #8
 8003ce2:	b29c      	uxth	r4, r3
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	3301      	adds	r3, #1
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fd8f 	bl	8003814 <WIZCHIP_READ>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4423      	add	r3, r4
 8003cfc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003cfe:	89fb      	ldrh	r3, [r7, #14]
 8003d00:	021b      	lsls	r3, r3, #8
 8003d02:	79fa      	ldrb	r2, [r7, #7]
 8003d04:	0092      	lsls	r2, r2, #2
 8003d06:	3203      	adds	r2, #3
 8003d08:	00d2      	lsls	r2, r2, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003d0e:	88bb      	ldrh	r3, [r7, #4]
 8003d10:	461a      	mov	r2, r3
 8003d12:	6839      	ldr	r1, [r7, #0]
 8003d14:	68b8      	ldr	r0, [r7, #8]
 8003d16:	f7ff fe17 	bl	8003948 <WIZCHIP_READ_BUF>
   ptr += len;
 8003d1a:	89fa      	ldrh	r2, [r7, #14]
 8003d1c:	88bb      	ldrh	r3, [r7, #4]
 8003d1e:	4413      	add	r3, r2
 8003d20:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	3301      	adds	r3, #1
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003d2e:	461a      	mov	r2, r3
 8003d30:	89fb      	ldrh	r3, [r7, #14]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f7ff fdb6 	bl	80038ac <WIZCHIP_WRITE>
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	3301      	adds	r3, #1
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	89fb      	ldrh	r3, [r7, #14]
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	4610      	mov	r0, r2
 8003d56:	f7ff fda9 	bl	80038ac <WIZCHIP_WRITE>
 8003d5a:	e000      	b.n	8003d5e <wiz_recv_data+0xb2>
   if(len == 0) return;
 8003d5c:	bf00      	nop
}
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd90      	pop	{r4, r7, pc}

08003d64 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	4608      	mov	r0, r1
 8003d6e:	4611      	mov	r1, r2
 8003d70:	461a      	mov	r2, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	71fb      	strb	r3, [r7, #7]
 8003d76:	4603      	mov	r3, r0
 8003d78:	71bb      	strb	r3, [r7, #6]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	80bb      	strh	r3, [r7, #4]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d902      	bls.n	8003d8e <socket+0x2a>
 8003d88:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8c:	e0f1      	b.n	8003f72 <socket+0x20e>
	switch(protocol)
 8003d8e:	79bb      	ldrb	r3, [r7, #6]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d004      	beq.n	8003d9e <socket+0x3a>
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	db10      	blt.n	8003dba <socket+0x56>
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	dc0e      	bgt.n	8003dba <socket+0x56>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8003d9c:	e010      	b.n	8003dc0 <socket+0x5c>
            getSIPR((uint8_t*)&taddr);
 8003d9e:	f107 030c 	add.w	r3, r7, #12
 8003da2:	2204      	movs	r2, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003daa:	f7ff fdcd 	bl	8003948 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d105      	bne.n	8003dc0 <socket+0x5c>
 8003db4:	f06f 0302 	mvn.w	r3, #2
 8003db8:	e0db      	b.n	8003f72 <socket+0x20e>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003dba:	f06f 0304 	mvn.w	r3, #4
 8003dbe:	e0d8      	b.n	8003f72 <socket+0x20e>
         break;
 8003dc0:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <socket+0x6e>
 8003dcc:	f06f 0305 	mvn.w	r3, #5
 8003dd0:	e0cf      	b.n	8003f72 <socket+0x20e>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d025      	beq.n	8003e24 <socket+0xc0>
	{
   	switch(protocol)
 8003dd8:	79bb      	ldrb	r3, [r7, #6]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d002      	beq.n	8003de4 <socket+0x80>
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d008      	beq.n	8003df4 <socket+0x90>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8003de2:	e024      	b.n	8003e2e <socket+0xca>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d11c      	bne.n	8003e28 <socket+0xc4>
 8003dee:	f06f 0305 	mvn.w	r3, #5
 8003df2:	e0be      	b.n	8003f72 <socket+0x20e>
   	      if(flag & SF_IGMP_VER2)
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d006      	beq.n	8003e0c <socket+0xa8>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8003dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	db02      	blt.n	8003e0c <socket+0xa8>
 8003e06:	f06f 0305 	mvn.w	r3, #5
 8003e0a:	e0b2      	b.n	8003f72 <socket+0x20e>
      	      if(flag & SF_UNI_BLOCK)
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8003e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	db06      	blt.n	8003e2c <socket+0xc8>
 8003e1e:	f06f 0305 	mvn.w	r3, #5
 8003e22:	e0a6      	b.n	8003f72 <socket+0x20e>
   	}
   }
 8003e24:	bf00      	nop
 8003e26:	e002      	b.n	8003e2e <socket+0xca>
   	      break;
 8003e28:	bf00      	nop
 8003e2a:	e000      	b.n	8003e2e <socket+0xca>
   	      break;
 8003e2c:	bf00      	nop
	close(sn);
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f8ad 	bl	8003f90 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e44:	f023 030f 	bic.w	r3, r3, #15
 8003e48:	b25a      	sxtb	r2, r3
 8003e4a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	b25b      	sxtb	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	4619      	mov	r1, r3
 8003e56:	f7ff fd29 	bl	80038ac <WIZCHIP_WRITE>
    #endif
	if(!port)
 8003e5a:	88bb      	ldrh	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d110      	bne.n	8003e82 <socket+0x11e>
	{
	   port = sock_any_port++;
 8003e60:	4b46      	ldr	r3, [pc, #280]	; (8003f7c <socket+0x218>)
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	b291      	uxth	r1, r2
 8003e68:	4a44      	ldr	r2, [pc, #272]	; (8003f7c <socket+0x218>)
 8003e6a:	8011      	strh	r1, [r2, #0]
 8003e6c:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8003e6e:	4b43      	ldr	r3, [pc, #268]	; (8003f7c <socket+0x218>)
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d103      	bne.n	8003e82 <socket+0x11e>
 8003e7a:	4b40      	ldr	r3, [pc, #256]	; (8003f7c <socket+0x218>)
 8003e7c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8003e80:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3301      	adds	r3, #1
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e8e:	461a      	mov	r2, r3
 8003e90:	88bb      	ldrh	r3, [r7, #4]
 8003e92:	0a1b      	lsrs	r3, r3, #8
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f7ff fd06 	bl	80038ac <WIZCHIP_WRITE>
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eac:	461a      	mov	r2, r3
 8003eae:	88bb      	ldrh	r3, [r7, #4]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f7ff fcf9 	bl	80038ac <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fcef 	bl	80038ac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003ece:	bf00      	nop
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff fc99 	bl	8003814 <WIZCHIP_READ>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f3      	bne.n	8003ed0 <socket+0x16c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	2201      	movs	r2, #1
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	b21b      	sxth	r3, r3
 8003ef2:	43db      	mvns	r3, r3
 8003ef4:	b21a      	sxth	r2, r3
 8003ef6:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <socket+0x21c>)
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	4013      	ands	r3, r2
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	4b1f      	ldr	r3, [pc, #124]	; (8003f80 <socket+0x21c>)
 8003f04:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 0201 	and.w	r2, r3, #1
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	b21a      	sxth	r2, r3
 8003f14:	4b1a      	ldr	r3, [pc, #104]	; (8003f80 <socket+0x21c>)
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b21b      	sxth	r3, r3
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	b21b      	sxth	r3, r3
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <socket+0x21c>)
 8003f22:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	2201      	movs	r2, #1
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	b21b      	sxth	r3, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	b21a      	sxth	r2, r3
 8003f32:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <socket+0x220>)
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b21b      	sxth	r3, r3
 8003f38:	4013      	ands	r3, r2
 8003f3a:	b21b      	sxth	r3, r3
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <socket+0x220>)
 8003f40:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003f42:	79fb      	ldrb	r3, [r7, #7]
 8003f44:	4a10      	ldr	r2, [pc, #64]	; (8003f88 <socket+0x224>)
 8003f46:	2100      	movs	r1, #0
 8003f48:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	4a0f      	ldr	r2, [pc, #60]	; (8003f8c <socket+0x228>)
 8003f50:	2100      	movs	r1, #0
 8003f52:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003f54:	bf00      	nop
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fc56 	bl	8003814 <WIZCHIP_READ>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0f3      	beq.n	8003f56 <socket+0x1f2>
   return (int8_t)sn;
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd90      	pop	{r4, r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000000e 	.word	0x2000000e
 8003f80:	200000c0 	.word	0x200000c0
 8003f84:	200000c2 	.word	0x200000c2
 8003f88:	200000c4 	.word	0x200000c4
 8003f8c:	200000d4 	.word	0x200000d4

08003f90 <close>:

int8_t close(uint8_t sn)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d902      	bls.n	8003fa6 <close+0x16>
 8003fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa4:	e055      	b.n	8004052 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8003fa6:	79fb      	ldrb	r3, [r7, #7]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	3301      	adds	r3, #1
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003fb2:	2110      	movs	r1, #16
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fc79 	bl	80038ac <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003fba:	bf00      	nop
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fc23 	bl	8003814 <WIZCHIP_READ>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1f3      	bne.n	8003fbc <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	3301      	adds	r3, #1
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003fe0:	211f      	movs	r1, #31
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fc62 	bl	80038ac <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	2201      	movs	r2, #1
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	b21b      	sxth	r3, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	b21a      	sxth	r2, r3
 8003ff6:	4b19      	ldr	r3, [pc, #100]	; (800405c <close+0xcc>)
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	b21b      	sxth	r3, r3
 8004000:	b29a      	uxth	r2, r3
 8004002:	4b16      	ldr	r3, [pc, #88]	; (800405c <close+0xcc>)
 8004004:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004006:	79fb      	ldrb	r3, [r7, #7]
 8004008:	2201      	movs	r2, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	b21b      	sxth	r3, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	b21a      	sxth	r2, r3
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <close+0xd0>)
 8004016:	881b      	ldrh	r3, [r3, #0]
 8004018:	b21b      	sxth	r3, r3
 800401a:	4013      	ands	r3, r2
 800401c:	b21b      	sxth	r3, r3
 800401e:	b29a      	uxth	r2, r3
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <close+0xd0>)
 8004022:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	4a0f      	ldr	r2, [pc, #60]	; (8004064 <close+0xd4>)
 8004028:	2100      	movs	r1, #0
 800402a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	4a0d      	ldr	r2, [pc, #52]	; (8004068 <close+0xd8>)
 8004032:	2100      	movs	r1, #0
 8004034:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004036:	bf00      	nop
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	3301      	adds	r3, #1
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fbe5 	bl	8003814 <WIZCHIP_READ>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f3      	bne.n	8004038 <close+0xa8>
	return SOCK_OK;
 8004050:	2301      	movs	r3, #1
}
 8004052:	4618      	mov	r0, r3
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200000c0 	.word	0x200000c0
 8004060:	200000c2 	.word	0x200000c2
 8004064:	200000c4 	.word	0x200000c4
 8004068:	200000d4 	.word	0x200000d4

0800406c <listen>:

int8_t listen(uint8_t sn)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004076:	79fb      	ldrb	r3, [r7, #7]
 8004078:	2b08      	cmp	r3, #8
 800407a:	d902      	bls.n	8004082 <listen+0x16>
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	e049      	b.n	8004116 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004082:	79fb      	ldrb	r3, [r7, #7]
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	3301      	adds	r3, #1
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fbc2 	bl	8003814 <WIZCHIP_READ>
 8004090:	4603      	mov	r3, r0
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	2b01      	cmp	r3, #1
 8004098:	d002      	beq.n	80040a0 <listen+0x34>
 800409a:	f06f 0304 	mvn.w	r3, #4
 800409e:	e03a      	b.n	8004116 <listen+0xaa>
	CHECK_SOCKINIT();
 80040a0:	79fb      	ldrb	r3, [r7, #7]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	3301      	adds	r3, #1
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fbb1 	bl	8003814 <WIZCHIP_READ>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b13      	cmp	r3, #19
 80040b6:	d002      	beq.n	80040be <listen+0x52>
 80040b8:	f06f 0302 	mvn.w	r3, #2
 80040bc:	e02b      	b.n	8004116 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	3301      	adds	r3, #1
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040ca:	2102      	movs	r1, #2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fbed 	bl	80038ac <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80040d2:	bf00      	nop
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	3301      	adds	r3, #1
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fb97 	bl	8003814 <WIZCHIP_READ>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1f3      	bne.n	80040d4 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80040ec:	e006      	b.n	80040fc <listen+0x90>
   {
         close(sn);
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ff4d 	bl	8003f90 <close>
         return SOCKERR_SOCKCLOSED;
 80040f6:	f06f 0303 	mvn.w	r3, #3
 80040fa:	e00c      	b.n	8004116 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 80040fc:	79fb      	ldrb	r3, [r7, #7]
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	3301      	adds	r3, #1
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fb83 	bl	8003814 <WIZCHIP_READ>
 800410e:	4603      	mov	r3, r0
 8004110:	2b14      	cmp	r3, #20
 8004112:	d1ec      	bne.n	80040ee <listen+0x82>
   }
   return SOCK_OK;
 8004114:	2301      	movs	r3, #1
}
 8004116:	4618      	mov	r0, r3
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <disconnect>:
   
   return SOCK_OK;
}

int8_t disconnect(uint8_t sn)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	4603      	mov	r3, r0
 8004128:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d902      	bls.n	8004136 <disconnect+0x16>
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
 8004134:	e062      	b.n	80041fc <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	3301      	adds	r3, #1
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fb68 	bl	8003814 <WIZCHIP_READ>
 8004144:	4603      	mov	r3, r0
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	2b01      	cmp	r3, #1
 800414c:	d002      	beq.n	8004154 <disconnect+0x34>
 800414e:	f06f 0304 	mvn.w	r3, #4
 8004152:	e053      	b.n	80041fc <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	3301      	adds	r3, #1
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004160:	2108      	movs	r1, #8
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fba2 	bl	80038ac <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004168:	bf00      	nop
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	3301      	adds	r3, #1
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fb4c 	bl	8003814 <WIZCHIP_READ>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f3      	bne.n	800416a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8004182:	79fb      	ldrb	r3, [r7, #7]
 8004184:	2201      	movs	r2, #1
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	b21b      	sxth	r3, r3
 800418c:	43db      	mvns	r3, r3
 800418e:	b21a      	sxth	r2, r3
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <disconnect+0xe4>)
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b21b      	sxth	r3, r3
 8004196:	4013      	ands	r3, r2
 8004198:	b21b      	sxth	r3, r3
 800419a:	b29a      	uxth	r2, r3
 800419c:	4b19      	ldr	r3, [pc, #100]	; (8004204 <disconnect+0xe4>)
 800419e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <disconnect+0xe8>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	461a      	mov	r2, r3
 80041a6:	79fb      	ldrb	r3, [r7, #7]
 80041a8:	fa42 f303 	asr.w	r3, r2, r3
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d016      	beq.n	80041e2 <disconnect+0xc2>
 80041b4:	2300      	movs	r3, #0
 80041b6:	e021      	b.n	80041fc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	3301      	adds	r3, #1
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fb25 	bl	8003814 <WIZCHIP_READ>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f003 0308 	and.w	r3, r3, #8
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d006      	beq.n	80041e2 <disconnect+0xc2>
	   {
	      close(sn);
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff feda 	bl	8003f90 <close>
	      return SOCKERR_TIMEOUT;
 80041dc:	f06f 030c 	mvn.w	r3, #12
 80041e0:	e00c      	b.n	80041fc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80041e2:	79fb      	ldrb	r3, [r7, #7]
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	3301      	adds	r3, #1
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fb10 	bl	8003814 <WIZCHIP_READ>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1de      	bne.n	80041b8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80041fa:	2301      	movs	r3, #1
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	200000c2 	.word	0x200000c2
 8004208:	200000c0 	.word	0x200000c0

0800420c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	71fb      	strb	r3, [r7, #7]
 8004218:	4613      	mov	r3, r2
 800421a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 800421c:	2300      	movs	r3, #0
 800421e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8004220:	2300      	movs	r3, #0
 8004222:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	2b08      	cmp	r3, #8
 8004228:	d902      	bls.n	8004230 <send+0x24>
 800422a:	f04f 33ff 	mov.w	r3, #4294967295
 800422e:	e0de      	b.n	80043ee <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	3301      	adds	r3, #1
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff faeb 	bl	8003814 <WIZCHIP_READ>
 800423e:	4603      	mov	r3, r0
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	2b01      	cmp	r3, #1
 8004246:	d002      	beq.n	800424e <send+0x42>
 8004248:	f06f 0304 	mvn.w	r3, #4
 800424c:	e0cf      	b.n	80043ee <send+0x1e2>
   CHECK_SOCKDATA();
 800424e:	88bb      	ldrh	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <send+0x4e>
 8004254:	f06f 030d 	mvn.w	r3, #13
 8004258:	e0c9      	b.n	80043ee <send+0x1e2>
   tmp = getSn_SR(sn);
 800425a:	79fb      	ldrb	r3, [r7, #7]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	3301      	adds	r3, #1
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004266:	4618      	mov	r0, r3
 8004268:	f7ff fad4 	bl	8003814 <WIZCHIP_READ>
 800426c:	4603      	mov	r3, r0
 800426e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b17      	cmp	r3, #23
 8004274:	d005      	beq.n	8004282 <send+0x76>
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b1c      	cmp	r3, #28
 800427a:	d002      	beq.n	8004282 <send+0x76>
 800427c:	f06f 0306 	mvn.w	r3, #6
 8004280:	e0b5      	b.n	80043ee <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8004282:	4b5d      	ldr	r3, [pc, #372]	; (80043f8 <send+0x1ec>)
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	fa42 f303 	asr.w	r3, r2, r3
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	d039      	beq.n	800430a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	3301      	adds	r3, #1
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fab6 	bl	8003814 <WIZCHIP_READ>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d019      	beq.n	80042ee <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	3301      	adds	r3, #1
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80042c6:	2110      	movs	r1, #16
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff faef 	bl	80038ac <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	2201      	movs	r2, #1
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	b21b      	sxth	r3, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	b21a      	sxth	r2, r3
 80042dc:	4b46      	ldr	r3, [pc, #280]	; (80043f8 <send+0x1ec>)
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b21b      	sxth	r3, r3
 80042e2:	4013      	ands	r3, r2
 80042e4:	b21b      	sxth	r3, r3
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	4b43      	ldr	r3, [pc, #268]	; (80043f8 <send+0x1ec>)
 80042ea:	801a      	strh	r2, [r3, #0]
 80042ec:	e00d      	b.n	800430a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d006      	beq.n	8004306 <send+0xfa>
      {
         close(sn);
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff fe48 	bl	8003f90 <close>
         return SOCKERR_TIMEOUT;
 8004300:	f06f 030c 	mvn.w	r3, #12
 8004304:	e073      	b.n	80043ee <send+0x1e2>
      }
      else return SOCK_BUSY;
 8004306:	2300      	movs	r3, #0
 8004308:	e071      	b.n	80043ee <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 800430a:	79fb      	ldrb	r3, [r7, #7]
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	3301      	adds	r3, #1
 8004310:	00db      	lsls	r3, r3, #3
 8004312:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff fa7c 	bl	8003814 <WIZCHIP_READ>
 800431c:	4603      	mov	r3, r0
 800431e:	b29b      	uxth	r3, r3
 8004320:	029b      	lsls	r3, r3, #10
 8004322:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8004324:	88ba      	ldrh	r2, [r7, #4]
 8004326:	89bb      	ldrh	r3, [r7, #12]
 8004328:	429a      	cmp	r2, r3
 800432a:	d901      	bls.n	8004330 <send+0x124>
 800432c:	89bb      	ldrh	r3, [r7, #12]
 800432e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8004330:	79fb      	ldrb	r3, [r7, #7]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff fbc8 	bl	8003ac8 <getSn_TX_FSR>
 8004338:	4603      	mov	r3, r0
 800433a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	3301      	adds	r3, #1
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fa63 	bl	8003814 <WIZCHIP_READ>
 800434e:	4603      	mov	r3, r0
 8004350:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b17      	cmp	r3, #23
 8004356:	d009      	beq.n	800436c <send+0x160>
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b1c      	cmp	r3, #28
 800435c:	d006      	beq.n	800436c <send+0x160>
      {
         close(sn);
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fe15 	bl	8003f90 <close>
         return SOCKERR_SOCKSTATUS;
 8004366:	f06f 0306 	mvn.w	r3, #6
 800436a:	e040      	b.n	80043ee <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800436c:	4b23      	ldr	r3, [pc, #140]	; (80043fc <send+0x1f0>)
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	461a      	mov	r2, r3
 8004372:	79fb      	ldrb	r3, [r7, #7]
 8004374:	fa42 f303 	asr.w	r3, r2, r3
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <send+0x180>
 8004380:	88ba      	ldrh	r2, [r7, #4]
 8004382:	89bb      	ldrh	r3, [r7, #12]
 8004384:	429a      	cmp	r2, r3
 8004386:	d901      	bls.n	800438c <send+0x180>
 8004388:	2300      	movs	r3, #0
 800438a:	e030      	b.n	80043ee <send+0x1e2>
      if(len <= freesize) break;
 800438c:	88ba      	ldrh	r2, [r7, #4]
 800438e:	89bb      	ldrh	r3, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d900      	bls.n	8004396 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8004394:	e7cc      	b.n	8004330 <send+0x124>
      if(len <= freesize) break;
 8004396:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8004398:	88ba      	ldrh	r2, [r7, #4]
 800439a:	79fb      	ldrb	r3, [r7, #7]
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7ff fc28 	bl	8003bf4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80043a4:	79fb      	ldrb	r3, [r7, #7]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	3301      	adds	r3, #1
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80043b0:	2120      	movs	r1, #32
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fa7a 	bl	80038ac <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80043b8:	bf00      	nop
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	3301      	adds	r3, #1
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7ff fa24 	bl	8003814 <WIZCHIP_READ>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1f3      	bne.n	80043ba <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	2201      	movs	r2, #1
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	b21a      	sxth	r2, r3
 80043dc:	4b06      	ldr	r3, [pc, #24]	; (80043f8 <send+0x1ec>)
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b21b      	sxth	r3, r3
 80043e2:	4313      	orrs	r3, r2
 80043e4:	b21b      	sxth	r3, r3
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	4b03      	ldr	r3, [pc, #12]	; (80043f8 <send+0x1ec>)
 80043ea:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80043ec:	88bb      	ldrh	r3, [r7, #4]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	200000c2 	.word	0x200000c2
 80043fc:	200000c0 	.word	0x200000c0

08004400 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8004400:	b590      	push	{r4, r7, lr}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	4603      	mov	r3, r0
 8004408:	6039      	str	r1, [r7, #0]
 800440a:	71fb      	strb	r3, [r7, #7]
 800440c:	4613      	mov	r3, r2
 800440e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8004418:	79fb      	ldrb	r3, [r7, #7]
 800441a:	2b08      	cmp	r3, #8
 800441c:	d902      	bls.n	8004424 <recv+0x24>
 800441e:	f04f 33ff 	mov.w	r3, #4294967295
 8004422:	e098      	b.n	8004556 <recv+0x156>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	3301      	adds	r3, #1
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff f9f1 	bl	8003814 <WIZCHIP_READ>
 8004432:	4603      	mov	r3, r0
 8004434:	f003 030f 	and.w	r3, r3, #15
 8004438:	2b01      	cmp	r3, #1
 800443a:	d002      	beq.n	8004442 <recv+0x42>
 800443c:	f06f 0304 	mvn.w	r3, #4
 8004440:	e089      	b.n	8004556 <recv+0x156>
   CHECK_SOCKDATA();
 8004442:	88bb      	ldrh	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d102      	bne.n	800444e <recv+0x4e>
 8004448:	f06f 030d 	mvn.w	r3, #13
 800444c:	e083      	b.n	8004556 <recv+0x156>
   
   recvsize = getSn_RxMAX(sn);
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	3301      	adds	r3, #1
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff f9da 	bl	8003814 <WIZCHIP_READ>
 8004460:	4603      	mov	r3, r0
 8004462:	b29b      	uxth	r3, r3
 8004464:	029b      	lsls	r3, r3, #10
 8004466:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8004468:	89ba      	ldrh	r2, [r7, #12]
 800446a:	88bb      	ldrh	r3, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d201      	bcs.n	8004474 <recv+0x74>
 8004470:	89bb      	ldrh	r3, [r7, #12]
 8004472:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fb71 	bl	8003b5e <getSn_RX_RSR>
 800447c:	4603      	mov	r3, r0
 800447e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	3301      	adds	r3, #1
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800448c:	4618      	mov	r0, r3
 800448e:	f7ff f9c1 	bl	8003814 <WIZCHIP_READ>
 8004492:	4603      	mov	r3, r0
 8004494:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8004496:	7bfb      	ldrb	r3, [r7, #15]
 8004498:	2b17      	cmp	r3, #23
 800449a:	d026      	beq.n	80044ea <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	2b1c      	cmp	r3, #28
 80044a0:	d11c      	bne.n	80044dc <recv+0xdc>
            {
               if(recvsize != 0) break;
 80044a2:	89bb      	ldrh	r3, [r7, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d12f      	bne.n	8004508 <recv+0x108>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fb0c 	bl	8003ac8 <getSn_TX_FSR>
 80044b0:	4603      	mov	r3, r0
 80044b2:	461c      	mov	r4, r3
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	3301      	adds	r3, #1
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff f9a7 	bl	8003814 <WIZCHIP_READ>
 80044c6:	4603      	mov	r3, r0
 80044c8:	029b      	lsls	r3, r3, #10
 80044ca:	429c      	cmp	r4, r3
 80044cc:	d10d      	bne.n	80044ea <recv+0xea>
               {
                  close(sn);
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f7ff fd5d 	bl	8003f90 <close>
                  return SOCKERR_SOCKSTATUS;
 80044d6:	f06f 0306 	mvn.w	r3, #6
 80044da:	e03c      	b.n	8004556 <recv+0x156>
               }
            }
            else
            {
               close(sn);
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fd56 	bl	8003f90 <close>
               return SOCKERR_SOCKSTATUS;
 80044e4:	f06f 0306 	mvn.w	r3, #6
 80044e8:	e035      	b.n	8004556 <recv+0x156>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80044ea:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <recv+0x160>)
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	461a      	mov	r2, r3
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	fa42 f303 	asr.w	r3, r2, r3
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d006      	beq.n	800450c <recv+0x10c>
 80044fe:	89bb      	ldrh	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d103      	bne.n	800450c <recv+0x10c>
 8004504:	2300      	movs	r3, #0
 8004506:	e026      	b.n	8004556 <recv+0x156>
               if(recvsize != 0) break;
 8004508:	bf00      	nop
 800450a:	e000      	b.n	800450e <recv+0x10e>
         if(recvsize >= 0) break;
 800450c:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 800450e:	89ba      	ldrh	r2, [r7, #12]
 8004510:	88bb      	ldrh	r3, [r7, #4]
 8004512:	429a      	cmp	r2, r3
 8004514:	d201      	bcs.n	800451a <recv+0x11a>
 8004516:	89bb      	ldrh	r3, [r7, #12]
 8004518:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800451a:	88ba      	ldrh	r2, [r7, #4]
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	6839      	ldr	r1, [r7, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff fbc3 	bl	8003cac <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8004526:	79fb      	ldrb	r3, [r7, #7]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	3301      	adds	r3, #1
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004532:	2140      	movs	r1, #64	; 0x40
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff f9b9 	bl	80038ac <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800453a:	bf00      	nop
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	3301      	adds	r3, #1
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff f963 	bl	8003814 <WIZCHIP_READ>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1f3      	bne.n	800453c <recv+0x13c>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8004554:	88bb      	ldrh	r3, [r7, #4]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bd90      	pop	{r4, r7, pc}
 800455e:	bf00      	nop
 8004560:	200000c0 	.word	0x200000c0

08004564 <getsockopt>:
   }   
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
 8004564:	b590      	push	{r4, r7, lr}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	603a      	str	r2, [r7, #0]
 800456e:	71fb      	strb	r3, [r7, #7]
 8004570:	460b      	mov	r3, r1
 8004572:	71bb      	strb	r3, [r7, #6]
   CHECK_SOCKNUM();
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	2b08      	cmp	r3, #8
 8004578:	d902      	bls.n	8004580 <getsockopt+0x1c>
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	e101      	b.n	8004784 <getsockopt+0x220>
   switch(sotype)
 8004580:	79bb      	ldrb	r3, [r7, #6]
 8004582:	2b0c      	cmp	r3, #12
 8004584:	f200 80fa 	bhi.w	800477c <getsockopt+0x218>
 8004588:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <getsockopt+0x2c>)
 800458a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458e:	bf00      	nop
 8004590:	080045c5 	.word	0x080045c5
 8004594:	080045e1 	.word	0x080045e1
 8004598:	080045fd 	.word	0x080045fd
 800459c:	08004619 	.word	0x08004619
 80045a0:	08004653 	.word	0x08004653
 80045a4:	0800466b 	.word	0x0800466b
 80045a8:	0800477d 	.word	0x0800477d
 80045ac:	080046a5 	.word	0x080046a5
 80045b0:	080046df 	.word	0x080046df
 80045b4:	080046f1 	.word	0x080046f1
 80045b8:	08004703 	.word	0x08004703
 80045bc:	0800471f 	.word	0x0800471f
 80045c0:	08004757 	.word	0x08004757
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	3301      	adds	r3, #1
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7ff f921 	bl	8003814 <WIZCHIP_READ>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f023 030f 	bic.w	r3, r3, #15
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	701a      	strb	r2, [r3, #0]
         break;
 80045de:	e0d0      	b.n	8004782 <getsockopt+0x21e>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	3301      	adds	r3, #1
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	f503 53b0 	add.w	r3, r3, #5632	; 0x1600
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff f911 	bl	8003814 <WIZCHIP_READ>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	701a      	strb	r2, [r3, #0]
         break;
 80045fa:	e0c2      	b.n	8004782 <getsockopt+0x21e>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	3301      	adds	r3, #1
 8004602:	00db      	lsls	r3, r3, #3
 8004604:	f503 53a8 	add.w	r3, r3, #5376	; 0x1500
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff f903 	bl	8003814 <WIZCHIP_READ>
 800460e:	4603      	mov	r3, r0
 8004610:	461a      	mov	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	701a      	strb	r2, [r3, #0]
         break;
 8004616:	e0b4      	b.n	8004782 <getsockopt+0x21e>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	3301      	adds	r3, #1
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff f8f5 	bl	8003814 <WIZCHIP_READ>
 800462a:	4603      	mov	r3, r0
 800462c:	b29b      	uxth	r3, r3
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	b29c      	uxth	r4, r3
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	3301      	adds	r3, #1
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff f8e8 	bl	8003814 <WIZCHIP_READ>
 8004644:	4603      	mov	r3, r0
 8004646:	b29b      	uxth	r3, r3
 8004648:	4423      	add	r3, r4
 800464a:	b29a      	uxth	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	801a      	strh	r2, [r3, #0]
         break;
 8004650:	e097      	b.n	8004782 <getsockopt+0x21e>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
 8004652:	79fb      	ldrb	r3, [r7, #7]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	3301      	adds	r3, #1
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800465e:	2204      	movs	r2, #4
 8004660:	6839      	ldr	r1, [r7, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff f970 	bl	8003948 <WIZCHIP_READ_BUF>
         break;
 8004668:	e08b      	b.n	8004782 <getsockopt+0x21e>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	3301      	adds	r3, #1
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff f8cc 	bl	8003814 <WIZCHIP_READ>
 800467c:	4603      	mov	r3, r0
 800467e:	b29b      	uxth	r3, r3
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	b29c      	uxth	r4, r3
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	3301      	adds	r3, #1
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff f8bf 	bl	8003814 <WIZCHIP_READ>
 8004696:	4603      	mov	r3, r0
 8004698:	b29b      	uxth	r3, r3
 800469a:	4423      	add	r3, r4
 800469c:	b29a      	uxth	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	801a      	strh	r2, [r3, #0]
         break;
 80046a2:	e06e      	b.n	8004782 <getsockopt+0x21e>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	3301      	adds	r3, #1
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff f8b1 	bl	8003814 <WIZCHIP_READ>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d002      	beq.n	80046c2 <getsockopt+0x15e>
 80046bc:	f06f 0304 	mvn.w	r3, #4
 80046c0:	e060      	b.n	8004784 <getsockopt+0x220>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	3301      	adds	r3, #1
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff f8a0 	bl	8003814 <WIZCHIP_READ>
 80046d4:	4603      	mov	r3, r0
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	801a      	strh	r2, [r3, #0]
         break;
 80046dc:	e051      	b.n	8004782 <getsockopt+0x21e>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff f9f1 	bl	8003ac8 <getSn_TX_FSR>
 80046e6:	4603      	mov	r3, r0
 80046e8:	461a      	mov	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	801a      	strh	r2, [r3, #0]
         break;
 80046ee:	e048      	b.n	8004782 <getsockopt+0x21e>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fa33 	bl	8003b5e <getSn_RX_RSR>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	801a      	strh	r2, [r3, #0]
         break;
 8004700:	e03f      	b.n	8004782 <getsockopt+0x21e>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	3301      	adds	r3, #1
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff f880 	bl	8003814 <WIZCHIP_READ>
 8004714:	4603      	mov	r3, r0
 8004716:	461a      	mov	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	701a      	strb	r2, [r3, #0]
         break;
 800471c:	e031      	b.n	8004782 <getsockopt+0x21e>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	3301      	adds	r3, #1
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff f874 	bl	8003814 <WIZCHIP_READ>
 800472c:	4603      	mov	r3, r0
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d008      	beq.n	8004748 <getsockopt+0x1e4>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fa10 	bl	8003b5e <getSn_RX_RSR>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	801a      	strh	r2, [r3, #0]
         else
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
 8004746:	e01c      	b.n	8004782 <getsockopt+0x21e>
            *(uint16_t*)arg = sock_remained_size[sn];
 8004748:	79fb      	ldrb	r3, [r7, #7]
 800474a:	4a10      	ldr	r2, [pc, #64]	; (800478c <getsockopt+0x228>)
 800474c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	801a      	strh	r2, [r3, #0]
         break;
 8004754:	e015      	b.n	8004782 <getsockopt+0x21e>
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	3301      	adds	r3, #1
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff f858 	bl	8003814 <WIZCHIP_READ>
 8004764:	4603      	mov	r3, r0
 8004766:	2b01      	cmp	r3, #1
 8004768:	d102      	bne.n	8004770 <getsockopt+0x20c>
             return SOCKERR_SOCKMODE;
 800476a:	f06f 0304 	mvn.w	r3, #4
 800476e:	e009      	b.n	8004784 <getsockopt+0x220>
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	4a07      	ldr	r2, [pc, #28]	; (8004790 <getsockopt+0x22c>)
 8004774:	5cd2      	ldrb	r2, [r2, r3]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	701a      	strb	r2, [r3, #0]
         break;
 800477a:	e002      	b.n	8004782 <getsockopt+0x21e>
      default:
         return SOCKERR_SOCKOPT;
 800477c:	f06f 0301 	mvn.w	r3, #1
 8004780:	e000      	b.n	8004784 <getsockopt+0x220>
   }
   return SOCK_OK;
 8004782:	2301      	movs	r3, #1
}
 8004784:	4618      	mov	r0, r3
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bd90      	pop	{r4, r7, pc}
 800478c:	200000c4 	.word	0x200000c4
 8004790:	200000d4 	.word	0x200000d4

08004794 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
 8004798:	bf00      	nop
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 80047a2:	b480      	push	{r7}
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	bf00      	nop
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	bf00      	nop
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 80047be:	b480      	push	{r7}
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	bf00      	nop
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	460b      	mov	r3, r1
 80047f0:	70fb      	strb	r3, [r7, #3]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
 8004808:	2300      	movs	r3, #0
 800480a:	4618      	mov	r0, r3
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	71fb      	strb	r3, [r7, #7]
 800481e:	bf00      	nop
 8004820:	370c      	adds	r7, #12
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	807b      	strh	r3, [r7, #2]
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	460b      	mov	r3, r1
 800484c:	807b      	strh	r3, [r7, #2]
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <reg_wizchip_cs_cbfunc+0x16>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d106      	bne.n	8004880 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8004872:	4b09      	ldr	r3, [pc, #36]	; (8004898 <reg_wizchip_cs_cbfunc+0x3c>)
 8004874:	4a09      	ldr	r2, [pc, #36]	; (800489c <reg_wizchip_cs_cbfunc+0x40>)
 8004876:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8004878:	4b07      	ldr	r3, [pc, #28]	; (8004898 <reg_wizchip_cs_cbfunc+0x3c>)
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <reg_wizchip_cs_cbfunc+0x44>)
 800487c:	615a      	str	r2, [r3, #20]
 800487e:	e005      	b.n	800488c <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8004880:	4a05      	ldr	r2, [pc, #20]	; (8004898 <reg_wizchip_cs_cbfunc+0x3c>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6113      	str	r3, [r2, #16]
      WIZCHIP.CS._deselect = cs_desel;
 8004886:	4a04      	ldr	r2, [pc, #16]	; (8004898 <reg_wizchip_cs_cbfunc+0x3c>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	6153      	str	r3, [r2, #20]
   }
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	20000010 	.word	0x20000010
 800489c:	080047b1 	.word	0x080047b1
 80048a0:	080047bf 	.word	0x080047bf

080048a4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80048ae:	bf00      	nop
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0f9      	beq.n	80048b0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <reg_wizchip_spi_cbfunc+0x24>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d106      	bne.n	80048d6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80048c8:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80048ca:	4a0a      	ldr	r2, [pc, #40]	; (80048f4 <reg_wizchip_spi_cbfunc+0x50>)
 80048cc:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80048ce:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80048d0:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <reg_wizchip_spi_cbfunc+0x54>)
 80048d2:	61da      	str	r2, [r3, #28]
 80048d4:	e005      	b.n	80048e2 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80048d6:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6193      	str	r3, [r2, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80048dc:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <reg_wizchip_spi_cbfunc+0x4c>)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	61d3      	str	r3, [r2, #28]
   }
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000010 	.word	0x20000010
 80048f4:	08004805 	.word	0x08004805
 80048f8:	08004815 	.word	0x08004815

080048fc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8004906:	bf00      	nop
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f9      	beq.n	8004908 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <reg_wizchip_spiburst_cbfunc+0x24>
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004922:	4a0a      	ldr	r2, [pc, #40]	; (800494c <reg_wizchip_spiburst_cbfunc+0x50>)
 8004924:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8004926:	4b08      	ldr	r3, [pc, #32]	; (8004948 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004928:	4a09      	ldr	r2, [pc, #36]	; (8004950 <reg_wizchip_spiburst_cbfunc+0x54>)
 800492a:	625a      	str	r2, [r3, #36]	; 0x24
 800492c:	e005      	b.n	800493a <reg_wizchip_spiburst_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800492e:	4a06      	ldr	r2, [pc, #24]	; (8004948 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6213      	str	r3, [r2, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8004934:	4a04      	ldr	r2, [pc, #16]	; (8004948 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6253      	str	r3, [r2, #36]	; 0x24
   }
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000010 	.word	0x20000010
 800494c:	0800482b 	.word	0x0800482b
 8004950:	08004843 	.word	0x08004843

08004954 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	2206      	movs	r2, #6
 800495e:	4619      	mov	r1, r3
 8004960:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004964:	f7fe fff0 	bl	8003948 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	2204      	movs	r2, #4
 800496e:	4619      	mov	r1, r3
 8004970:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004974:	f7fe ffe8 	bl	8003948 <WIZCHIP_READ_BUF>
 8004978:	f107 0310 	add.w	r3, r7, #16
 800497c:	2204      	movs	r2, #4
 800497e:	4619      	mov	r1, r3
 8004980:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004984:	f7fe ffe0 	bl	8003948 <WIZCHIP_READ_BUF>
 8004988:	f107 030c 	add.w	r3, r7, #12
 800498c:	2204      	movs	r2, #4
 800498e:	4619      	mov	r1, r3
 8004990:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004994:	f7fe ffd8 	bl	8003948 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004998:	2180      	movs	r1, #128	; 0x80
 800499a:	2000      	movs	r0, #0
 800499c:	f7fe ff86 	bl	80038ac <WIZCHIP_WRITE>
   getMR(); // for delay
 80049a0:	2000      	movs	r0, #0
 80049a2:	f7fe ff37 	bl	8003814 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80049a6:	1d3b      	adds	r3, r7, #4
 80049a8:	2206      	movs	r2, #6
 80049aa:	4619      	mov	r1, r3
 80049ac:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80049b0:	f7ff f82a 	bl	8003a08 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	2204      	movs	r2, #4
 80049ba:	4619      	mov	r1, r3
 80049bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80049c0:	f7ff f822 	bl	8003a08 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80049c4:	f107 0310 	add.w	r3, r7, #16
 80049c8:	2204      	movs	r2, #4
 80049ca:	4619      	mov	r1, r3
 80049cc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80049d0:	f7ff f81a 	bl	8003a08 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80049d4:	f107 030c 	add.w	r3, r7, #12
 80049d8:	2204      	movs	r2, #4
 80049da:	4619      	mov	r1, r3
 80049dc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80049e0:	f7ff f812 	bl	8003a08 <WIZCHIP_WRITE_BUF>
}
 80049e4:	bf00      	nop
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80049fa:	f7ff ffab 	bl	8004954 <wizchip_sw_reset>
   if(txsize)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d03b      	beq.n	8004a7c <wizchip_init+0x90>
   {
      tmp = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	73bb      	strb	r3, [r7, #14]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]
 8004a0c:	e015      	b.n	8004a3a <wizchip_init+0x4e>
        {
            tmp += txsize[i];
 8004a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	4413      	add	r3, r2
 8004a16:	781a      	ldrb	r2, [r3, #0]
 8004a18:	7bbb      	ldrb	r3, [r7, #14]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	73bb      	strb	r3, [r7, #14]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a24:	2b10      	cmp	r3, #16
 8004a26:	dd02      	ble.n	8004a2e <wizchip_init+0x42>
 8004a28:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2c:	e066      	b.n	8004afc <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	3301      	adds	r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	73fb      	strb	r3, [r7, #15]
 8004a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a3e:	2b07      	cmp	r3, #7
 8004a40:	dde5      	ble.n	8004a0e <wizchip_init+0x22>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	73fb      	strb	r3, [r7, #15]
 8004a46:	e015      	b.n	8004a74 <wizchip_init+0x88>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 8004a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	3301      	adds	r3, #1
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8004a56:	4618      	mov	r0, r3
 8004a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	f7fe ff22 	bl	80038ac <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	73fb      	strb	r3, [r7, #15]
 8004a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a78:	2b07      	cmp	r3, #7
 8004a7a:	dde5      	ble.n	8004a48 <wizchip_init+0x5c>
        }

    #endif
   }

   if(rxsize)
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d03b      	beq.n	8004afa <wizchip_init+0x10e>
   {
      tmp = 0;
 8004a82:	2300      	movs	r3, #0
 8004a84:	73bb      	strb	r3, [r7, #14]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	73fb      	strb	r3, [r7, #15]
 8004a8a:	e015      	b.n	8004ab8 <wizchip_init+0xcc>
        {
            tmp += rxsize[i];
 8004a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	4413      	add	r3, r2
 8004a94:	781a      	ldrb	r2, [r3, #0]
 8004a96:	7bbb      	ldrb	r3, [r7, #14]
 8004a98:	4413      	add	r3, r2
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	73bb      	strb	r3, [r7, #14]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 8004a9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004aa2:	2b10      	cmp	r3, #16
 8004aa4:	dd02      	ble.n	8004aac <wizchip_init+0xc0>
 8004aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aaa:	e027      	b.n	8004afc <wizchip_init+0x110>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004abc:	2b07      	cmp	r3, #7
 8004abe:	dde5      	ble.n	8004a8c <wizchip_init+0xa0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]
 8004ac4:	e015      	b.n	8004af2 <wizchip_init+0x106>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8004ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	3301      	adds	r3, #1
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	4413      	add	r3, r2
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f7fe fee3 	bl	80038ac <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	3301      	adds	r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af6:	2b07      	cmp	r3, #7
 8004af8:	dde5      	ble.n	8004ac6 <wizchip_init+0xda>
        #endif
        }
    #endif
   }
   return 0;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2206      	movs	r2, #6
 8004b10:	4619      	mov	r1, r3
 8004b12:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004b16:	f7fe ff77 	bl	8003a08 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	330e      	adds	r3, #14
 8004b1e:	2204      	movs	r2, #4
 8004b20:	4619      	mov	r1, r3
 8004b22:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004b26:	f7fe ff6f 	bl	8003a08 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	330a      	adds	r3, #10
 8004b2e:	2204      	movs	r2, #4
 8004b30:	4619      	mov	r1, r3
 8004b32:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004b36:	f7fe ff67 	bl	8003a08 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3306      	adds	r3, #6
 8004b3e:	2204      	movs	r2, #4
 8004b40:	4619      	mov	r1, r3
 8004b42:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004b46:	f7fe ff5f 	bl	8003a08 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	7c9a      	ldrb	r2, [r3, #18]
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <wizchip_setnetinfo+0x78>)
 8004b50:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7cda      	ldrb	r2, [r3, #19]
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <wizchip_setnetinfo+0x78>)
 8004b58:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	7d1a      	ldrb	r2, [r3, #20]
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <wizchip_setnetinfo+0x78>)
 8004b60:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	7d5a      	ldrb	r2, [r3, #21]
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <wizchip_setnetinfo+0x78>)
 8004b68:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	7d9a      	ldrb	r2, [r3, #22]
 8004b6e:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <wizchip_setnetinfo+0x7c>)
 8004b70:	701a      	strb	r2, [r3, #0]
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	200000dc 	.word	0x200000dc
 8004b80:	200000e0 	.word	0x200000e0

08004b84 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2206      	movs	r2, #6
 8004b90:	4619      	mov	r1, r3
 8004b92:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004b96:	f7fe fed7 	bl	8003948 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	330e      	adds	r3, #14
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ba6:	f7fe fecf 	bl	8003948 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	330a      	adds	r3, #10
 8004bae:	2204      	movs	r2, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004bb6:	f7fe fec7 	bl	8003948 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3306      	adds	r3, #6
 8004bbe:	2204      	movs	r2, #4
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004bc6:	f7fe febf 	bl	8003948 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8004bca:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <wizchip_getnetinfo+0x78>)
 8004bcc:	781a      	ldrb	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8004bd2:	4b0a      	ldr	r3, [pc, #40]	; (8004bfc <wizchip_getnetinfo+0x78>)
 8004bd4:	785a      	ldrb	r2, [r3, #1]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8004bda:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <wizchip_getnetinfo+0x78>)
 8004bdc:	789a      	ldrb	r2, [r3, #2]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8004be2:	4b06      	ldr	r3, [pc, #24]	; (8004bfc <wizchip_getnetinfo+0x78>)
 8004be4:	78da      	ldrb	r2, [r3, #3]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <wizchip_getnetinfo+0x7c>)
 8004bec:	781a      	ldrb	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	759a      	strb	r2, [r3, #22]
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	200000dc 	.word	0x200000dc
 8004c00:	200000e0 	.word	0x200000e0

08004c04 <__errno>:
 8004c04:	4b01      	ldr	r3, [pc, #4]	; (8004c0c <__errno+0x8>)
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000038 	.word	0x20000038

08004c10 <__libc_init_array>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4e0d      	ldr	r6, [pc, #52]	; (8004c48 <__libc_init_array+0x38>)
 8004c14:	4c0d      	ldr	r4, [pc, #52]	; (8004c4c <__libc_init_array+0x3c>)
 8004c16:	1ba4      	subs	r4, r4, r6
 8004c18:	10a4      	asrs	r4, r4, #2
 8004c1a:	2500      	movs	r5, #0
 8004c1c:	42a5      	cmp	r5, r4
 8004c1e:	d109      	bne.n	8004c34 <__libc_init_array+0x24>
 8004c20:	4e0b      	ldr	r6, [pc, #44]	; (8004c50 <__libc_init_array+0x40>)
 8004c22:	4c0c      	ldr	r4, [pc, #48]	; (8004c54 <__libc_init_array+0x44>)
 8004c24:	f000 fc42 	bl	80054ac <_init>
 8004c28:	1ba4      	subs	r4, r4, r6
 8004c2a:	10a4      	asrs	r4, r4, #2
 8004c2c:	2500      	movs	r5, #0
 8004c2e:	42a5      	cmp	r5, r4
 8004c30:	d105      	bne.n	8004c3e <__libc_init_array+0x2e>
 8004c32:	bd70      	pop	{r4, r5, r6, pc}
 8004c34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c38:	4798      	blx	r3
 8004c3a:	3501      	adds	r5, #1
 8004c3c:	e7ee      	b.n	8004c1c <__libc_init_array+0xc>
 8004c3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c42:	4798      	blx	r3
 8004c44:	3501      	adds	r5, #1
 8004c46:	e7f2      	b.n	8004c2e <__libc_init_array+0x1e>
 8004c48:	08005790 	.word	0x08005790
 8004c4c:	08005790 	.word	0x08005790
 8004c50:	08005790 	.word	0x08005790
 8004c54:	08005794 	.word	0x08005794

08004c58 <memcpy>:
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	1e43      	subs	r3, r0, #1
 8004c5c:	440a      	add	r2, r1
 8004c5e:	4291      	cmp	r1, r2
 8004c60:	d100      	bne.n	8004c64 <memcpy+0xc>
 8004c62:	bd10      	pop	{r4, pc}
 8004c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c6c:	e7f7      	b.n	8004c5e <memcpy+0x6>

08004c6e <memset>:
 8004c6e:	4402      	add	r2, r0
 8004c70:	4603      	mov	r3, r0
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d100      	bne.n	8004c78 <memset+0xa>
 8004c76:	4770      	bx	lr
 8004c78:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7c:	e7f9      	b.n	8004c72 <memset+0x4>
	...

08004c80 <_free_r>:
 8004c80:	b538      	push	{r3, r4, r5, lr}
 8004c82:	4605      	mov	r5, r0
 8004c84:	2900      	cmp	r1, #0
 8004c86:	d045      	beq.n	8004d14 <_free_r+0x94>
 8004c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c8c:	1f0c      	subs	r4, r1, #4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	bfb8      	it	lt
 8004c92:	18e4      	addlt	r4, r4, r3
 8004c94:	f000 f8e6 	bl	8004e64 <__malloc_lock>
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <_free_r+0x98>)
 8004c9a:	6813      	ldr	r3, [r2, #0]
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	b933      	cbnz	r3, 8004cae <_free_r+0x2e>
 8004ca0:	6063      	str	r3, [r4, #4]
 8004ca2:	6014      	str	r4, [r2, #0]
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004caa:	f000 b8dc 	b.w	8004e66 <__malloc_unlock>
 8004cae:	42a3      	cmp	r3, r4
 8004cb0:	d90c      	bls.n	8004ccc <_free_r+0x4c>
 8004cb2:	6821      	ldr	r1, [r4, #0]
 8004cb4:	1862      	adds	r2, r4, r1
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	bf04      	itt	eq
 8004cba:	681a      	ldreq	r2, [r3, #0]
 8004cbc:	685b      	ldreq	r3, [r3, #4]
 8004cbe:	6063      	str	r3, [r4, #4]
 8004cc0:	bf04      	itt	eq
 8004cc2:	1852      	addeq	r2, r2, r1
 8004cc4:	6022      	streq	r2, [r4, #0]
 8004cc6:	6004      	str	r4, [r0, #0]
 8004cc8:	e7ec      	b.n	8004ca4 <_free_r+0x24>
 8004cca:	4613      	mov	r3, r2
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	b10a      	cbz	r2, 8004cd4 <_free_r+0x54>
 8004cd0:	42a2      	cmp	r2, r4
 8004cd2:	d9fa      	bls.n	8004cca <_free_r+0x4a>
 8004cd4:	6819      	ldr	r1, [r3, #0]
 8004cd6:	1858      	adds	r0, r3, r1
 8004cd8:	42a0      	cmp	r0, r4
 8004cda:	d10b      	bne.n	8004cf4 <_free_r+0x74>
 8004cdc:	6820      	ldr	r0, [r4, #0]
 8004cde:	4401      	add	r1, r0
 8004ce0:	1858      	adds	r0, r3, r1
 8004ce2:	4282      	cmp	r2, r0
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	d1dd      	bne.n	8004ca4 <_free_r+0x24>
 8004ce8:	6810      	ldr	r0, [r2, #0]
 8004cea:	6852      	ldr	r2, [r2, #4]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	4401      	add	r1, r0
 8004cf0:	6019      	str	r1, [r3, #0]
 8004cf2:	e7d7      	b.n	8004ca4 <_free_r+0x24>
 8004cf4:	d902      	bls.n	8004cfc <_free_r+0x7c>
 8004cf6:	230c      	movs	r3, #12
 8004cf8:	602b      	str	r3, [r5, #0]
 8004cfa:	e7d3      	b.n	8004ca4 <_free_r+0x24>
 8004cfc:	6820      	ldr	r0, [r4, #0]
 8004cfe:	1821      	adds	r1, r4, r0
 8004d00:	428a      	cmp	r2, r1
 8004d02:	bf04      	itt	eq
 8004d04:	6811      	ldreq	r1, [r2, #0]
 8004d06:	6852      	ldreq	r2, [r2, #4]
 8004d08:	6062      	str	r2, [r4, #4]
 8004d0a:	bf04      	itt	eq
 8004d0c:	1809      	addeq	r1, r1, r0
 8004d0e:	6021      	streq	r1, [r4, #0]
 8004d10:	605c      	str	r4, [r3, #4]
 8004d12:	e7c7      	b.n	8004ca4 <_free_r+0x24>
 8004d14:	bd38      	pop	{r3, r4, r5, pc}
 8004d16:	bf00      	nop
 8004d18:	200000e4 	.word	0x200000e4

08004d1c <_malloc_r>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	1ccd      	adds	r5, r1, #3
 8004d20:	f025 0503 	bic.w	r5, r5, #3
 8004d24:	3508      	adds	r5, #8
 8004d26:	2d0c      	cmp	r5, #12
 8004d28:	bf38      	it	cc
 8004d2a:	250c      	movcc	r5, #12
 8004d2c:	2d00      	cmp	r5, #0
 8004d2e:	4606      	mov	r6, r0
 8004d30:	db01      	blt.n	8004d36 <_malloc_r+0x1a>
 8004d32:	42a9      	cmp	r1, r5
 8004d34:	d903      	bls.n	8004d3e <_malloc_r+0x22>
 8004d36:	230c      	movs	r3, #12
 8004d38:	6033      	str	r3, [r6, #0]
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	f000 f891 	bl	8004e64 <__malloc_lock>
 8004d42:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <_malloc_r+0xac>)
 8004d44:	6814      	ldr	r4, [r2, #0]
 8004d46:	4621      	mov	r1, r4
 8004d48:	b991      	cbnz	r1, 8004d70 <_malloc_r+0x54>
 8004d4a:	4c20      	ldr	r4, [pc, #128]	; (8004dcc <_malloc_r+0xb0>)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	b91b      	cbnz	r3, 8004d58 <_malloc_r+0x3c>
 8004d50:	4630      	mov	r0, r6
 8004d52:	f000 f83d 	bl	8004dd0 <_sbrk_r>
 8004d56:	6020      	str	r0, [r4, #0]
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f000 f838 	bl	8004dd0 <_sbrk_r>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d124      	bne.n	8004dae <_malloc_r+0x92>
 8004d64:	230c      	movs	r3, #12
 8004d66:	6033      	str	r3, [r6, #0]
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f000 f87c 	bl	8004e66 <__malloc_unlock>
 8004d6e:	e7e4      	b.n	8004d3a <_malloc_r+0x1e>
 8004d70:	680b      	ldr	r3, [r1, #0]
 8004d72:	1b5b      	subs	r3, r3, r5
 8004d74:	d418      	bmi.n	8004da8 <_malloc_r+0x8c>
 8004d76:	2b0b      	cmp	r3, #11
 8004d78:	d90f      	bls.n	8004d9a <_malloc_r+0x7e>
 8004d7a:	600b      	str	r3, [r1, #0]
 8004d7c:	50cd      	str	r5, [r1, r3]
 8004d7e:	18cc      	adds	r4, r1, r3
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 f870 	bl	8004e66 <__malloc_unlock>
 8004d86:	f104 000b 	add.w	r0, r4, #11
 8004d8a:	1d23      	adds	r3, r4, #4
 8004d8c:	f020 0007 	bic.w	r0, r0, #7
 8004d90:	1ac3      	subs	r3, r0, r3
 8004d92:	d0d3      	beq.n	8004d3c <_malloc_r+0x20>
 8004d94:	425a      	negs	r2, r3
 8004d96:	50e2      	str	r2, [r4, r3]
 8004d98:	e7d0      	b.n	8004d3c <_malloc_r+0x20>
 8004d9a:	428c      	cmp	r4, r1
 8004d9c:	684b      	ldr	r3, [r1, #4]
 8004d9e:	bf16      	itet	ne
 8004da0:	6063      	strne	r3, [r4, #4]
 8004da2:	6013      	streq	r3, [r2, #0]
 8004da4:	460c      	movne	r4, r1
 8004da6:	e7eb      	b.n	8004d80 <_malloc_r+0x64>
 8004da8:	460c      	mov	r4, r1
 8004daa:	6849      	ldr	r1, [r1, #4]
 8004dac:	e7cc      	b.n	8004d48 <_malloc_r+0x2c>
 8004dae:	1cc4      	adds	r4, r0, #3
 8004db0:	f024 0403 	bic.w	r4, r4, #3
 8004db4:	42a0      	cmp	r0, r4
 8004db6:	d005      	beq.n	8004dc4 <_malloc_r+0xa8>
 8004db8:	1a21      	subs	r1, r4, r0
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f000 f808 	bl	8004dd0 <_sbrk_r>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d0cf      	beq.n	8004d64 <_malloc_r+0x48>
 8004dc4:	6025      	str	r5, [r4, #0]
 8004dc6:	e7db      	b.n	8004d80 <_malloc_r+0x64>
 8004dc8:	200000e4 	.word	0x200000e4
 8004dcc:	200000e8 	.word	0x200000e8

08004dd0 <_sbrk_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4c06      	ldr	r4, [pc, #24]	; (8004dec <_sbrk_r+0x1c>)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4605      	mov	r5, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	f7fc f86a 	bl	8000eb4 <_sbrk>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_sbrk_r+0x1a>
 8004de4:	6823      	ldr	r3, [r4, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_sbrk_r+0x1a>
 8004de8:	602b      	str	r3, [r5, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	200009b0 	.word	0x200009b0

08004df0 <_vsniprintf_r>:
 8004df0:	b530      	push	{r4, r5, lr}
 8004df2:	1e14      	subs	r4, r2, #0
 8004df4:	4605      	mov	r5, r0
 8004df6:	b09b      	sub	sp, #108	; 0x6c
 8004df8:	4618      	mov	r0, r3
 8004dfa:	da05      	bge.n	8004e08 <_vsniprintf_r+0x18>
 8004dfc:	238b      	movs	r3, #139	; 0x8b
 8004dfe:	602b      	str	r3, [r5, #0]
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	b01b      	add	sp, #108	; 0x6c
 8004e06:	bd30      	pop	{r4, r5, pc}
 8004e08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004e0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004e10:	bf14      	ite	ne
 8004e12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004e16:	4623      	moveq	r3, r4
 8004e18:	9302      	str	r3, [sp, #8]
 8004e1a:	9305      	str	r3, [sp, #20]
 8004e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e20:	9100      	str	r1, [sp, #0]
 8004e22:	9104      	str	r1, [sp, #16]
 8004e24:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004e28:	4602      	mov	r2, r0
 8004e2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004e2c:	4669      	mov	r1, sp
 8004e2e:	4628      	mov	r0, r5
 8004e30:	f000 f874 	bl	8004f1c <_svfiprintf_r>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	bfbc      	itt	lt
 8004e38:	238b      	movlt	r3, #139	; 0x8b
 8004e3a:	602b      	strlt	r3, [r5, #0]
 8004e3c:	2c00      	cmp	r4, #0
 8004e3e:	d0e1      	beq.n	8004e04 <_vsniprintf_r+0x14>
 8004e40:	9b00      	ldr	r3, [sp, #0]
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	e7dd      	b.n	8004e04 <_vsniprintf_r+0x14>

08004e48 <vsniprintf>:
 8004e48:	b507      	push	{r0, r1, r2, lr}
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	460a      	mov	r2, r1
 8004e50:	4601      	mov	r1, r0
 8004e52:	4803      	ldr	r0, [pc, #12]	; (8004e60 <vsniprintf+0x18>)
 8004e54:	6800      	ldr	r0, [r0, #0]
 8004e56:	f7ff ffcb 	bl	8004df0 <_vsniprintf_r>
 8004e5a:	b003      	add	sp, #12
 8004e5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e60:	20000038 	.word	0x20000038

08004e64 <__malloc_lock>:
 8004e64:	4770      	bx	lr

08004e66 <__malloc_unlock>:
 8004e66:	4770      	bx	lr

08004e68 <__ssputs_r>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	688e      	ldr	r6, [r1, #8]
 8004e6e:	429e      	cmp	r6, r3
 8004e70:	4682      	mov	sl, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	4690      	mov	r8, r2
 8004e76:	4699      	mov	r9, r3
 8004e78:	d837      	bhi.n	8004eea <__ssputs_r+0x82>
 8004e7a:	898a      	ldrh	r2, [r1, #12]
 8004e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e80:	d031      	beq.n	8004ee6 <__ssputs_r+0x7e>
 8004e82:	6825      	ldr	r5, [r4, #0]
 8004e84:	6909      	ldr	r1, [r1, #16]
 8004e86:	1a6f      	subs	r7, r5, r1
 8004e88:	6965      	ldr	r5, [r4, #20]
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e90:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e94:	f109 0301 	add.w	r3, r9, #1
 8004e98:	443b      	add	r3, r7
 8004e9a:	429d      	cmp	r5, r3
 8004e9c:	bf38      	it	cc
 8004e9e:	461d      	movcc	r5, r3
 8004ea0:	0553      	lsls	r3, r2, #21
 8004ea2:	d530      	bpl.n	8004f06 <__ssputs_r+0x9e>
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	f7ff ff39 	bl	8004d1c <_malloc_r>
 8004eaa:	4606      	mov	r6, r0
 8004eac:	b950      	cbnz	r0, 8004ec4 <__ssputs_r+0x5c>
 8004eae:	230c      	movs	r3, #12
 8004eb0:	f8ca 3000 	str.w	r3, [sl]
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec4:	463a      	mov	r2, r7
 8004ec6:	6921      	ldr	r1, [r4, #16]
 8004ec8:	f7ff fec6 	bl	8004c58 <memcpy>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed6:	81a3      	strh	r3, [r4, #12]
 8004ed8:	6126      	str	r6, [r4, #16]
 8004eda:	6165      	str	r5, [r4, #20]
 8004edc:	443e      	add	r6, r7
 8004ede:	1bed      	subs	r5, r5, r7
 8004ee0:	6026      	str	r6, [r4, #0]
 8004ee2:	60a5      	str	r5, [r4, #8]
 8004ee4:	464e      	mov	r6, r9
 8004ee6:	454e      	cmp	r6, r9
 8004ee8:	d900      	bls.n	8004eec <__ssputs_r+0x84>
 8004eea:	464e      	mov	r6, r9
 8004eec:	4632      	mov	r2, r6
 8004eee:	4641      	mov	r1, r8
 8004ef0:	6820      	ldr	r0, [r4, #0]
 8004ef2:	f000 fa93 	bl	800541c <memmove>
 8004ef6:	68a3      	ldr	r3, [r4, #8]
 8004ef8:	1b9b      	subs	r3, r3, r6
 8004efa:	60a3      	str	r3, [r4, #8]
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	441e      	add	r6, r3
 8004f00:	6026      	str	r6, [r4, #0]
 8004f02:	2000      	movs	r0, #0
 8004f04:	e7dc      	b.n	8004ec0 <__ssputs_r+0x58>
 8004f06:	462a      	mov	r2, r5
 8004f08:	f000 faa1 	bl	800544e <_realloc_r>
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d1e2      	bne.n	8004ed8 <__ssputs_r+0x70>
 8004f12:	6921      	ldr	r1, [r4, #16]
 8004f14:	4650      	mov	r0, sl
 8004f16:	f7ff feb3 	bl	8004c80 <_free_r>
 8004f1a:	e7c8      	b.n	8004eae <__ssputs_r+0x46>

08004f1c <_svfiprintf_r>:
 8004f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f20:	461d      	mov	r5, r3
 8004f22:	898b      	ldrh	r3, [r1, #12]
 8004f24:	061f      	lsls	r7, r3, #24
 8004f26:	b09d      	sub	sp, #116	; 0x74
 8004f28:	4680      	mov	r8, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	4616      	mov	r6, r2
 8004f2e:	d50f      	bpl.n	8004f50 <_svfiprintf_r+0x34>
 8004f30:	690b      	ldr	r3, [r1, #16]
 8004f32:	b96b      	cbnz	r3, 8004f50 <_svfiprintf_r+0x34>
 8004f34:	2140      	movs	r1, #64	; 0x40
 8004f36:	f7ff fef1 	bl	8004d1c <_malloc_r>
 8004f3a:	6020      	str	r0, [r4, #0]
 8004f3c:	6120      	str	r0, [r4, #16]
 8004f3e:	b928      	cbnz	r0, 8004f4c <_svfiprintf_r+0x30>
 8004f40:	230c      	movs	r3, #12
 8004f42:	f8c8 3000 	str.w	r3, [r8]
 8004f46:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4a:	e0c8      	b.n	80050de <_svfiprintf_r+0x1c2>
 8004f4c:	2340      	movs	r3, #64	; 0x40
 8004f4e:	6163      	str	r3, [r4, #20]
 8004f50:	2300      	movs	r3, #0
 8004f52:	9309      	str	r3, [sp, #36]	; 0x24
 8004f54:	2320      	movs	r3, #32
 8004f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f5a:	2330      	movs	r3, #48	; 0x30
 8004f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f60:	9503      	str	r5, [sp, #12]
 8004f62:	f04f 0b01 	mov.w	fp, #1
 8004f66:	4637      	mov	r7, r6
 8004f68:	463d      	mov	r5, r7
 8004f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f6e:	b10b      	cbz	r3, 8004f74 <_svfiprintf_r+0x58>
 8004f70:	2b25      	cmp	r3, #37	; 0x25
 8004f72:	d13e      	bne.n	8004ff2 <_svfiprintf_r+0xd6>
 8004f74:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f78:	d00b      	beq.n	8004f92 <_svfiprintf_r+0x76>
 8004f7a:	4653      	mov	r3, sl
 8004f7c:	4632      	mov	r2, r6
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4640      	mov	r0, r8
 8004f82:	f7ff ff71 	bl	8004e68 <__ssputs_r>
 8004f86:	3001      	adds	r0, #1
 8004f88:	f000 80a4 	beq.w	80050d4 <_svfiprintf_r+0x1b8>
 8004f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f8e:	4453      	add	r3, sl
 8004f90:	9309      	str	r3, [sp, #36]	; 0x24
 8004f92:	783b      	ldrb	r3, [r7, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 809d 	beq.w	80050d4 <_svfiprintf_r+0x1b8>
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa4:	9304      	str	r3, [sp, #16]
 8004fa6:	9307      	str	r3, [sp, #28]
 8004fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fac:	931a      	str	r3, [sp, #104]	; 0x68
 8004fae:	462f      	mov	r7, r5
 8004fb0:	2205      	movs	r2, #5
 8004fb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004fb6:	4850      	ldr	r0, [pc, #320]	; (80050f8 <_svfiprintf_r+0x1dc>)
 8004fb8:	f7fb f912 	bl	80001e0 <memchr>
 8004fbc:	9b04      	ldr	r3, [sp, #16]
 8004fbe:	b9d0      	cbnz	r0, 8004ff6 <_svfiprintf_r+0xda>
 8004fc0:	06d9      	lsls	r1, r3, #27
 8004fc2:	bf44      	itt	mi
 8004fc4:	2220      	movmi	r2, #32
 8004fc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fca:	071a      	lsls	r2, r3, #28
 8004fcc:	bf44      	itt	mi
 8004fce:	222b      	movmi	r2, #43	; 0x2b
 8004fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fd4:	782a      	ldrb	r2, [r5, #0]
 8004fd6:	2a2a      	cmp	r2, #42	; 0x2a
 8004fd8:	d015      	beq.n	8005006 <_svfiprintf_r+0xea>
 8004fda:	9a07      	ldr	r2, [sp, #28]
 8004fdc:	462f      	mov	r7, r5
 8004fde:	2000      	movs	r0, #0
 8004fe0:	250a      	movs	r5, #10
 8004fe2:	4639      	mov	r1, r7
 8004fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fe8:	3b30      	subs	r3, #48	; 0x30
 8004fea:	2b09      	cmp	r3, #9
 8004fec:	d94d      	bls.n	800508a <_svfiprintf_r+0x16e>
 8004fee:	b1b8      	cbz	r0, 8005020 <_svfiprintf_r+0x104>
 8004ff0:	e00f      	b.n	8005012 <_svfiprintf_r+0xf6>
 8004ff2:	462f      	mov	r7, r5
 8004ff4:	e7b8      	b.n	8004f68 <_svfiprintf_r+0x4c>
 8004ff6:	4a40      	ldr	r2, [pc, #256]	; (80050f8 <_svfiprintf_r+0x1dc>)
 8004ff8:	1a80      	subs	r0, r0, r2
 8004ffa:	fa0b f000 	lsl.w	r0, fp, r0
 8004ffe:	4318      	orrs	r0, r3
 8005000:	9004      	str	r0, [sp, #16]
 8005002:	463d      	mov	r5, r7
 8005004:	e7d3      	b.n	8004fae <_svfiprintf_r+0x92>
 8005006:	9a03      	ldr	r2, [sp, #12]
 8005008:	1d11      	adds	r1, r2, #4
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	9103      	str	r1, [sp, #12]
 800500e:	2a00      	cmp	r2, #0
 8005010:	db01      	blt.n	8005016 <_svfiprintf_r+0xfa>
 8005012:	9207      	str	r2, [sp, #28]
 8005014:	e004      	b.n	8005020 <_svfiprintf_r+0x104>
 8005016:	4252      	negs	r2, r2
 8005018:	f043 0302 	orr.w	r3, r3, #2
 800501c:	9207      	str	r2, [sp, #28]
 800501e:	9304      	str	r3, [sp, #16]
 8005020:	783b      	ldrb	r3, [r7, #0]
 8005022:	2b2e      	cmp	r3, #46	; 0x2e
 8005024:	d10c      	bne.n	8005040 <_svfiprintf_r+0x124>
 8005026:	787b      	ldrb	r3, [r7, #1]
 8005028:	2b2a      	cmp	r3, #42	; 0x2a
 800502a:	d133      	bne.n	8005094 <_svfiprintf_r+0x178>
 800502c:	9b03      	ldr	r3, [sp, #12]
 800502e:	1d1a      	adds	r2, r3, #4
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	9203      	str	r2, [sp, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	bfb8      	it	lt
 8005038:	f04f 33ff 	movlt.w	r3, #4294967295
 800503c:	3702      	adds	r7, #2
 800503e:	9305      	str	r3, [sp, #20]
 8005040:	4d2e      	ldr	r5, [pc, #184]	; (80050fc <_svfiprintf_r+0x1e0>)
 8005042:	7839      	ldrb	r1, [r7, #0]
 8005044:	2203      	movs	r2, #3
 8005046:	4628      	mov	r0, r5
 8005048:	f7fb f8ca 	bl	80001e0 <memchr>
 800504c:	b138      	cbz	r0, 800505e <_svfiprintf_r+0x142>
 800504e:	2340      	movs	r3, #64	; 0x40
 8005050:	1b40      	subs	r0, r0, r5
 8005052:	fa03 f000 	lsl.w	r0, r3, r0
 8005056:	9b04      	ldr	r3, [sp, #16]
 8005058:	4303      	orrs	r3, r0
 800505a:	3701      	adds	r7, #1
 800505c:	9304      	str	r3, [sp, #16]
 800505e:	7839      	ldrb	r1, [r7, #0]
 8005060:	4827      	ldr	r0, [pc, #156]	; (8005100 <_svfiprintf_r+0x1e4>)
 8005062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005066:	2206      	movs	r2, #6
 8005068:	1c7e      	adds	r6, r7, #1
 800506a:	f7fb f8b9 	bl	80001e0 <memchr>
 800506e:	2800      	cmp	r0, #0
 8005070:	d038      	beq.n	80050e4 <_svfiprintf_r+0x1c8>
 8005072:	4b24      	ldr	r3, [pc, #144]	; (8005104 <_svfiprintf_r+0x1e8>)
 8005074:	bb13      	cbnz	r3, 80050bc <_svfiprintf_r+0x1a0>
 8005076:	9b03      	ldr	r3, [sp, #12]
 8005078:	3307      	adds	r3, #7
 800507a:	f023 0307 	bic.w	r3, r3, #7
 800507e:	3308      	adds	r3, #8
 8005080:	9303      	str	r3, [sp, #12]
 8005082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005084:	444b      	add	r3, r9
 8005086:	9309      	str	r3, [sp, #36]	; 0x24
 8005088:	e76d      	b.n	8004f66 <_svfiprintf_r+0x4a>
 800508a:	fb05 3202 	mla	r2, r5, r2, r3
 800508e:	2001      	movs	r0, #1
 8005090:	460f      	mov	r7, r1
 8005092:	e7a6      	b.n	8004fe2 <_svfiprintf_r+0xc6>
 8005094:	2300      	movs	r3, #0
 8005096:	3701      	adds	r7, #1
 8005098:	9305      	str	r3, [sp, #20]
 800509a:	4619      	mov	r1, r3
 800509c:	250a      	movs	r5, #10
 800509e:	4638      	mov	r0, r7
 80050a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a4:	3a30      	subs	r2, #48	; 0x30
 80050a6:	2a09      	cmp	r2, #9
 80050a8:	d903      	bls.n	80050b2 <_svfiprintf_r+0x196>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0c8      	beq.n	8005040 <_svfiprintf_r+0x124>
 80050ae:	9105      	str	r1, [sp, #20]
 80050b0:	e7c6      	b.n	8005040 <_svfiprintf_r+0x124>
 80050b2:	fb05 2101 	mla	r1, r5, r1, r2
 80050b6:	2301      	movs	r3, #1
 80050b8:	4607      	mov	r7, r0
 80050ba:	e7f0      	b.n	800509e <_svfiprintf_r+0x182>
 80050bc:	ab03      	add	r3, sp, #12
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	4622      	mov	r2, r4
 80050c2:	4b11      	ldr	r3, [pc, #68]	; (8005108 <_svfiprintf_r+0x1ec>)
 80050c4:	a904      	add	r1, sp, #16
 80050c6:	4640      	mov	r0, r8
 80050c8:	f3af 8000 	nop.w
 80050cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80050d0:	4681      	mov	r9, r0
 80050d2:	d1d6      	bne.n	8005082 <_svfiprintf_r+0x166>
 80050d4:	89a3      	ldrh	r3, [r4, #12]
 80050d6:	065b      	lsls	r3, r3, #25
 80050d8:	f53f af35 	bmi.w	8004f46 <_svfiprintf_r+0x2a>
 80050dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050de:	b01d      	add	sp, #116	; 0x74
 80050e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e4:	ab03      	add	r3, sp, #12
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	4622      	mov	r2, r4
 80050ea:	4b07      	ldr	r3, [pc, #28]	; (8005108 <_svfiprintf_r+0x1ec>)
 80050ec:	a904      	add	r1, sp, #16
 80050ee:	4640      	mov	r0, r8
 80050f0:	f000 f882 	bl	80051f8 <_printf_i>
 80050f4:	e7ea      	b.n	80050cc <_svfiprintf_r+0x1b0>
 80050f6:	bf00      	nop
 80050f8:	08005754 	.word	0x08005754
 80050fc:	0800575a 	.word	0x0800575a
 8005100:	0800575e 	.word	0x0800575e
 8005104:	00000000 	.word	0x00000000
 8005108:	08004e69 	.word	0x08004e69

0800510c <_printf_common>:
 800510c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005110:	4691      	mov	r9, r2
 8005112:	461f      	mov	r7, r3
 8005114:	688a      	ldr	r2, [r1, #8]
 8005116:	690b      	ldr	r3, [r1, #16]
 8005118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800511c:	4293      	cmp	r3, r2
 800511e:	bfb8      	it	lt
 8005120:	4613      	movlt	r3, r2
 8005122:	f8c9 3000 	str.w	r3, [r9]
 8005126:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800512a:	4606      	mov	r6, r0
 800512c:	460c      	mov	r4, r1
 800512e:	b112      	cbz	r2, 8005136 <_printf_common+0x2a>
 8005130:	3301      	adds	r3, #1
 8005132:	f8c9 3000 	str.w	r3, [r9]
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	0699      	lsls	r1, r3, #26
 800513a:	bf42      	ittt	mi
 800513c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005140:	3302      	addmi	r3, #2
 8005142:	f8c9 3000 	strmi.w	r3, [r9]
 8005146:	6825      	ldr	r5, [r4, #0]
 8005148:	f015 0506 	ands.w	r5, r5, #6
 800514c:	d107      	bne.n	800515e <_printf_common+0x52>
 800514e:	f104 0a19 	add.w	sl, r4, #25
 8005152:	68e3      	ldr	r3, [r4, #12]
 8005154:	f8d9 2000 	ldr.w	r2, [r9]
 8005158:	1a9b      	subs	r3, r3, r2
 800515a:	42ab      	cmp	r3, r5
 800515c:	dc28      	bgt.n	80051b0 <_printf_common+0xa4>
 800515e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005162:	6822      	ldr	r2, [r4, #0]
 8005164:	3300      	adds	r3, #0
 8005166:	bf18      	it	ne
 8005168:	2301      	movne	r3, #1
 800516a:	0692      	lsls	r2, r2, #26
 800516c:	d42d      	bmi.n	80051ca <_printf_common+0xbe>
 800516e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005172:	4639      	mov	r1, r7
 8005174:	4630      	mov	r0, r6
 8005176:	47c0      	blx	r8
 8005178:	3001      	adds	r0, #1
 800517a:	d020      	beq.n	80051be <_printf_common+0xb2>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	68e5      	ldr	r5, [r4, #12]
 8005180:	f8d9 2000 	ldr.w	r2, [r9]
 8005184:	f003 0306 	and.w	r3, r3, #6
 8005188:	2b04      	cmp	r3, #4
 800518a:	bf08      	it	eq
 800518c:	1aad      	subeq	r5, r5, r2
 800518e:	68a3      	ldr	r3, [r4, #8]
 8005190:	6922      	ldr	r2, [r4, #16]
 8005192:	bf0c      	ite	eq
 8005194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005198:	2500      	movne	r5, #0
 800519a:	4293      	cmp	r3, r2
 800519c:	bfc4      	itt	gt
 800519e:	1a9b      	subgt	r3, r3, r2
 80051a0:	18ed      	addgt	r5, r5, r3
 80051a2:	f04f 0900 	mov.w	r9, #0
 80051a6:	341a      	adds	r4, #26
 80051a8:	454d      	cmp	r5, r9
 80051aa:	d11a      	bne.n	80051e2 <_printf_common+0xd6>
 80051ac:	2000      	movs	r0, #0
 80051ae:	e008      	b.n	80051c2 <_printf_common+0xb6>
 80051b0:	2301      	movs	r3, #1
 80051b2:	4652      	mov	r2, sl
 80051b4:	4639      	mov	r1, r7
 80051b6:	4630      	mov	r0, r6
 80051b8:	47c0      	blx	r8
 80051ba:	3001      	adds	r0, #1
 80051bc:	d103      	bne.n	80051c6 <_printf_common+0xba>
 80051be:	f04f 30ff 	mov.w	r0, #4294967295
 80051c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c6:	3501      	adds	r5, #1
 80051c8:	e7c3      	b.n	8005152 <_printf_common+0x46>
 80051ca:	18e1      	adds	r1, r4, r3
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	2030      	movs	r0, #48	; 0x30
 80051d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051d4:	4422      	add	r2, r4
 80051d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051de:	3302      	adds	r3, #2
 80051e0:	e7c5      	b.n	800516e <_printf_common+0x62>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4622      	mov	r2, r4
 80051e6:	4639      	mov	r1, r7
 80051e8:	4630      	mov	r0, r6
 80051ea:	47c0      	blx	r8
 80051ec:	3001      	adds	r0, #1
 80051ee:	d0e6      	beq.n	80051be <_printf_common+0xb2>
 80051f0:	f109 0901 	add.w	r9, r9, #1
 80051f4:	e7d8      	b.n	80051a8 <_printf_common+0x9c>
	...

080051f8 <_printf_i>:
 80051f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005200:	460c      	mov	r4, r1
 8005202:	7e09      	ldrb	r1, [r1, #24]
 8005204:	b085      	sub	sp, #20
 8005206:	296e      	cmp	r1, #110	; 0x6e
 8005208:	4617      	mov	r7, r2
 800520a:	4606      	mov	r6, r0
 800520c:	4698      	mov	r8, r3
 800520e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005210:	f000 80b3 	beq.w	800537a <_printf_i+0x182>
 8005214:	d822      	bhi.n	800525c <_printf_i+0x64>
 8005216:	2963      	cmp	r1, #99	; 0x63
 8005218:	d036      	beq.n	8005288 <_printf_i+0x90>
 800521a:	d80a      	bhi.n	8005232 <_printf_i+0x3a>
 800521c:	2900      	cmp	r1, #0
 800521e:	f000 80b9 	beq.w	8005394 <_printf_i+0x19c>
 8005222:	2958      	cmp	r1, #88	; 0x58
 8005224:	f000 8083 	beq.w	800532e <_printf_i+0x136>
 8005228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800522c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005230:	e032      	b.n	8005298 <_printf_i+0xa0>
 8005232:	2964      	cmp	r1, #100	; 0x64
 8005234:	d001      	beq.n	800523a <_printf_i+0x42>
 8005236:	2969      	cmp	r1, #105	; 0x69
 8005238:	d1f6      	bne.n	8005228 <_printf_i+0x30>
 800523a:	6820      	ldr	r0, [r4, #0]
 800523c:	6813      	ldr	r3, [r2, #0]
 800523e:	0605      	lsls	r5, r0, #24
 8005240:	f103 0104 	add.w	r1, r3, #4
 8005244:	d52a      	bpl.n	800529c <_printf_i+0xa4>
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	6011      	str	r1, [r2, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	da03      	bge.n	8005256 <_printf_i+0x5e>
 800524e:	222d      	movs	r2, #45	; 0x2d
 8005250:	425b      	negs	r3, r3
 8005252:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005256:	486f      	ldr	r0, [pc, #444]	; (8005414 <_printf_i+0x21c>)
 8005258:	220a      	movs	r2, #10
 800525a:	e039      	b.n	80052d0 <_printf_i+0xd8>
 800525c:	2973      	cmp	r1, #115	; 0x73
 800525e:	f000 809d 	beq.w	800539c <_printf_i+0x1a4>
 8005262:	d808      	bhi.n	8005276 <_printf_i+0x7e>
 8005264:	296f      	cmp	r1, #111	; 0x6f
 8005266:	d020      	beq.n	80052aa <_printf_i+0xb2>
 8005268:	2970      	cmp	r1, #112	; 0x70
 800526a:	d1dd      	bne.n	8005228 <_printf_i+0x30>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	f043 0320 	orr.w	r3, r3, #32
 8005272:	6023      	str	r3, [r4, #0]
 8005274:	e003      	b.n	800527e <_printf_i+0x86>
 8005276:	2975      	cmp	r1, #117	; 0x75
 8005278:	d017      	beq.n	80052aa <_printf_i+0xb2>
 800527a:	2978      	cmp	r1, #120	; 0x78
 800527c:	d1d4      	bne.n	8005228 <_printf_i+0x30>
 800527e:	2378      	movs	r3, #120	; 0x78
 8005280:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005284:	4864      	ldr	r0, [pc, #400]	; (8005418 <_printf_i+0x220>)
 8005286:	e055      	b.n	8005334 <_printf_i+0x13c>
 8005288:	6813      	ldr	r3, [r2, #0]
 800528a:	1d19      	adds	r1, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6011      	str	r1, [r2, #0]
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005298:	2301      	movs	r3, #1
 800529a:	e08c      	b.n	80053b6 <_printf_i+0x1be>
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6011      	str	r1, [r2, #0]
 80052a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052a4:	bf18      	it	ne
 80052a6:	b21b      	sxthne	r3, r3
 80052a8:	e7cf      	b.n	800524a <_printf_i+0x52>
 80052aa:	6813      	ldr	r3, [r2, #0]
 80052ac:	6825      	ldr	r5, [r4, #0]
 80052ae:	1d18      	adds	r0, r3, #4
 80052b0:	6010      	str	r0, [r2, #0]
 80052b2:	0628      	lsls	r0, r5, #24
 80052b4:	d501      	bpl.n	80052ba <_printf_i+0xc2>
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	e002      	b.n	80052c0 <_printf_i+0xc8>
 80052ba:	0668      	lsls	r0, r5, #25
 80052bc:	d5fb      	bpl.n	80052b6 <_printf_i+0xbe>
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	4854      	ldr	r0, [pc, #336]	; (8005414 <_printf_i+0x21c>)
 80052c2:	296f      	cmp	r1, #111	; 0x6f
 80052c4:	bf14      	ite	ne
 80052c6:	220a      	movne	r2, #10
 80052c8:	2208      	moveq	r2, #8
 80052ca:	2100      	movs	r1, #0
 80052cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052d0:	6865      	ldr	r5, [r4, #4]
 80052d2:	60a5      	str	r5, [r4, #8]
 80052d4:	2d00      	cmp	r5, #0
 80052d6:	f2c0 8095 	blt.w	8005404 <_printf_i+0x20c>
 80052da:	6821      	ldr	r1, [r4, #0]
 80052dc:	f021 0104 	bic.w	r1, r1, #4
 80052e0:	6021      	str	r1, [r4, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d13d      	bne.n	8005362 <_printf_i+0x16a>
 80052e6:	2d00      	cmp	r5, #0
 80052e8:	f040 808e 	bne.w	8005408 <_printf_i+0x210>
 80052ec:	4665      	mov	r5, ip
 80052ee:	2a08      	cmp	r2, #8
 80052f0:	d10b      	bne.n	800530a <_printf_i+0x112>
 80052f2:	6823      	ldr	r3, [r4, #0]
 80052f4:	07db      	lsls	r3, r3, #31
 80052f6:	d508      	bpl.n	800530a <_printf_i+0x112>
 80052f8:	6923      	ldr	r3, [r4, #16]
 80052fa:	6862      	ldr	r2, [r4, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	bfde      	ittt	le
 8005300:	2330      	movle	r3, #48	; 0x30
 8005302:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005306:	f105 35ff 	addle.w	r5, r5, #4294967295
 800530a:	ebac 0305 	sub.w	r3, ip, r5
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	f8cd 8000 	str.w	r8, [sp]
 8005314:	463b      	mov	r3, r7
 8005316:	aa03      	add	r2, sp, #12
 8005318:	4621      	mov	r1, r4
 800531a:	4630      	mov	r0, r6
 800531c:	f7ff fef6 	bl	800510c <_printf_common>
 8005320:	3001      	adds	r0, #1
 8005322:	d14d      	bne.n	80053c0 <_printf_i+0x1c8>
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	b005      	add	sp, #20
 800532a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800532e:	4839      	ldr	r0, [pc, #228]	; (8005414 <_printf_i+0x21c>)
 8005330:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005334:	6813      	ldr	r3, [r2, #0]
 8005336:	6821      	ldr	r1, [r4, #0]
 8005338:	1d1d      	adds	r5, r3, #4
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6015      	str	r5, [r2, #0]
 800533e:	060a      	lsls	r2, r1, #24
 8005340:	d50b      	bpl.n	800535a <_printf_i+0x162>
 8005342:	07ca      	lsls	r2, r1, #31
 8005344:	bf44      	itt	mi
 8005346:	f041 0120 	orrmi.w	r1, r1, #32
 800534a:	6021      	strmi	r1, [r4, #0]
 800534c:	b91b      	cbnz	r3, 8005356 <_printf_i+0x15e>
 800534e:	6822      	ldr	r2, [r4, #0]
 8005350:	f022 0220 	bic.w	r2, r2, #32
 8005354:	6022      	str	r2, [r4, #0]
 8005356:	2210      	movs	r2, #16
 8005358:	e7b7      	b.n	80052ca <_printf_i+0xd2>
 800535a:	064d      	lsls	r5, r1, #25
 800535c:	bf48      	it	mi
 800535e:	b29b      	uxthmi	r3, r3
 8005360:	e7ef      	b.n	8005342 <_printf_i+0x14a>
 8005362:	4665      	mov	r5, ip
 8005364:	fbb3 f1f2 	udiv	r1, r3, r2
 8005368:	fb02 3311 	mls	r3, r2, r1, r3
 800536c:	5cc3      	ldrb	r3, [r0, r3]
 800536e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005372:	460b      	mov	r3, r1
 8005374:	2900      	cmp	r1, #0
 8005376:	d1f5      	bne.n	8005364 <_printf_i+0x16c>
 8005378:	e7b9      	b.n	80052ee <_printf_i+0xf6>
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	6825      	ldr	r5, [r4, #0]
 800537e:	6961      	ldr	r1, [r4, #20]
 8005380:	1d18      	adds	r0, r3, #4
 8005382:	6010      	str	r0, [r2, #0]
 8005384:	0628      	lsls	r0, r5, #24
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	d501      	bpl.n	800538e <_printf_i+0x196>
 800538a:	6019      	str	r1, [r3, #0]
 800538c:	e002      	b.n	8005394 <_printf_i+0x19c>
 800538e:	066a      	lsls	r2, r5, #25
 8005390:	d5fb      	bpl.n	800538a <_printf_i+0x192>
 8005392:	8019      	strh	r1, [r3, #0]
 8005394:	2300      	movs	r3, #0
 8005396:	6123      	str	r3, [r4, #16]
 8005398:	4665      	mov	r5, ip
 800539a:	e7b9      	b.n	8005310 <_printf_i+0x118>
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	1d19      	adds	r1, r3, #4
 80053a0:	6011      	str	r1, [r2, #0]
 80053a2:	681d      	ldr	r5, [r3, #0]
 80053a4:	6862      	ldr	r2, [r4, #4]
 80053a6:	2100      	movs	r1, #0
 80053a8:	4628      	mov	r0, r5
 80053aa:	f7fa ff19 	bl	80001e0 <memchr>
 80053ae:	b108      	cbz	r0, 80053b4 <_printf_i+0x1bc>
 80053b0:	1b40      	subs	r0, r0, r5
 80053b2:	6060      	str	r0, [r4, #4]
 80053b4:	6863      	ldr	r3, [r4, #4]
 80053b6:	6123      	str	r3, [r4, #16]
 80053b8:	2300      	movs	r3, #0
 80053ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053be:	e7a7      	b.n	8005310 <_printf_i+0x118>
 80053c0:	6923      	ldr	r3, [r4, #16]
 80053c2:	462a      	mov	r2, r5
 80053c4:	4639      	mov	r1, r7
 80053c6:	4630      	mov	r0, r6
 80053c8:	47c0      	blx	r8
 80053ca:	3001      	adds	r0, #1
 80053cc:	d0aa      	beq.n	8005324 <_printf_i+0x12c>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	079b      	lsls	r3, r3, #30
 80053d2:	d413      	bmi.n	80053fc <_printf_i+0x204>
 80053d4:	68e0      	ldr	r0, [r4, #12]
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	4298      	cmp	r0, r3
 80053da:	bfb8      	it	lt
 80053dc:	4618      	movlt	r0, r3
 80053de:	e7a3      	b.n	8005328 <_printf_i+0x130>
 80053e0:	2301      	movs	r3, #1
 80053e2:	464a      	mov	r2, r9
 80053e4:	4639      	mov	r1, r7
 80053e6:	4630      	mov	r0, r6
 80053e8:	47c0      	blx	r8
 80053ea:	3001      	adds	r0, #1
 80053ec:	d09a      	beq.n	8005324 <_printf_i+0x12c>
 80053ee:	3501      	adds	r5, #1
 80053f0:	68e3      	ldr	r3, [r4, #12]
 80053f2:	9a03      	ldr	r2, [sp, #12]
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	42ab      	cmp	r3, r5
 80053f8:	dcf2      	bgt.n	80053e0 <_printf_i+0x1e8>
 80053fa:	e7eb      	b.n	80053d4 <_printf_i+0x1dc>
 80053fc:	2500      	movs	r5, #0
 80053fe:	f104 0919 	add.w	r9, r4, #25
 8005402:	e7f5      	b.n	80053f0 <_printf_i+0x1f8>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1ac      	bne.n	8005362 <_printf_i+0x16a>
 8005408:	7803      	ldrb	r3, [r0, #0]
 800540a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800540e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005412:	e76c      	b.n	80052ee <_printf_i+0xf6>
 8005414:	08005765 	.word	0x08005765
 8005418:	08005776 	.word	0x08005776

0800541c <memmove>:
 800541c:	4288      	cmp	r0, r1
 800541e:	b510      	push	{r4, lr}
 8005420:	eb01 0302 	add.w	r3, r1, r2
 8005424:	d807      	bhi.n	8005436 <memmove+0x1a>
 8005426:	1e42      	subs	r2, r0, #1
 8005428:	4299      	cmp	r1, r3
 800542a:	d00a      	beq.n	8005442 <memmove+0x26>
 800542c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005430:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005434:	e7f8      	b.n	8005428 <memmove+0xc>
 8005436:	4283      	cmp	r3, r0
 8005438:	d9f5      	bls.n	8005426 <memmove+0xa>
 800543a:	1881      	adds	r1, r0, r2
 800543c:	1ad2      	subs	r2, r2, r3
 800543e:	42d3      	cmn	r3, r2
 8005440:	d100      	bne.n	8005444 <memmove+0x28>
 8005442:	bd10      	pop	{r4, pc}
 8005444:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005448:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800544c:	e7f7      	b.n	800543e <memmove+0x22>

0800544e <_realloc_r>:
 800544e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005450:	4607      	mov	r7, r0
 8005452:	4614      	mov	r4, r2
 8005454:	460e      	mov	r6, r1
 8005456:	b921      	cbnz	r1, 8005462 <_realloc_r+0x14>
 8005458:	4611      	mov	r1, r2
 800545a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800545e:	f7ff bc5d 	b.w	8004d1c <_malloc_r>
 8005462:	b922      	cbnz	r2, 800546e <_realloc_r+0x20>
 8005464:	f7ff fc0c 	bl	8004c80 <_free_r>
 8005468:	4625      	mov	r5, r4
 800546a:	4628      	mov	r0, r5
 800546c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800546e:	f000 f814 	bl	800549a <_malloc_usable_size_r>
 8005472:	42a0      	cmp	r0, r4
 8005474:	d20f      	bcs.n	8005496 <_realloc_r+0x48>
 8005476:	4621      	mov	r1, r4
 8005478:	4638      	mov	r0, r7
 800547a:	f7ff fc4f 	bl	8004d1c <_malloc_r>
 800547e:	4605      	mov	r5, r0
 8005480:	2800      	cmp	r0, #0
 8005482:	d0f2      	beq.n	800546a <_realloc_r+0x1c>
 8005484:	4631      	mov	r1, r6
 8005486:	4622      	mov	r2, r4
 8005488:	f7ff fbe6 	bl	8004c58 <memcpy>
 800548c:	4631      	mov	r1, r6
 800548e:	4638      	mov	r0, r7
 8005490:	f7ff fbf6 	bl	8004c80 <_free_r>
 8005494:	e7e9      	b.n	800546a <_realloc_r+0x1c>
 8005496:	4635      	mov	r5, r6
 8005498:	e7e7      	b.n	800546a <_realloc_r+0x1c>

0800549a <_malloc_usable_size_r>:
 800549a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800549e:	1f18      	subs	r0, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bfbc      	itt	lt
 80054a4:	580b      	ldrlt	r3, [r1, r0]
 80054a6:	18c0      	addlt	r0, r0, r3
 80054a8:	4770      	bx	lr
	...

080054ac <_init>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr

080054b8 <_fini>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr
